// File: src/onboarding/__tests__/StartOnboarding.test.tsx
import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

// ----------------- Router mocks -----------------
const mockNavigate = jest.fn();
let mockParams: any = {};

jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useParams: () => mockParams,
  useNavigate: () => mockNavigate,
}));

// ----------------- API hook mock -----------------
const makeRequest = jest.fn();
jest.mock('../services/ApiService', () => ({
  __esModule: true,
  default: () => ({ makeRequest }),
}));

// ----------------- Context mock -----------------
let ctxFormData: any;
let setFormData: jest.Mock;
let resetFormData: jest.Mock;
let requiredFields: string[];

jest.mock('../forms/onboardingFormContext', () => ({
  useOnboardingContext: () => ({
    formData: ctxFormData,
    setFormData,
    requiredFields,
    resetFormData,
  }),
}));

// ----------------- Child components mocks -----------------
jest.mock('../intake-components/applicationDetails', () => ({
  __esModule: true,
  default: ({ validationErrors }: any) => (
    <div data-testid="ApplicationDetails">Application Details {Object.keys(validationErrors || {}).length}</div>
  ),
}));

jest.mock('../intake-components/componentsDetails', () => ({
  __esModule: true,
  default: ({ validationErrors }: any) => (
    <div data-testid="ComponentsDetails">Components Details {Object.keys(validationErrors || {}).length}</div>
  ),
}));

jest.mock('../intake-components/guidelinesIntakeForm', () => ({
  __esModule: true,
  default: () => <div data-testid="GuidelinesIntakeForm">Guide Lines Content</div>,
}));

// Cancel dialog renders a button that triggers its confirm handler
let cancelConfirmHandler: (() => void) | null = null;
jest.mock('../intake-components/cancelOnboarding', () => ({
  __esModule: true,
  default: ({ openCancelDialog, handleConfirmCancel, handleCloseCancelDialog }: any) => {
    cancelConfirmHandler = handleConfirmCancel;
    return openCancelDialog ? (
      <div data-testid="CancelOnboarding">
        <button onClick={handleConfirmCancel}>confirm-cancel</button>
        <button onClick={handleCloseCancelDialog}>close-cancel</button>
      </div>
    ) : null;
  },
}));

// Confirmation dialog renders a button that triggers submit handler
let submitConfirmHandler: (() => void) | null = null;
jest.mock('../intake-components/confirmationOnboarding', () => ({
  __esModule: true,
  default: ({ openConfirmSubmitDialog, handleConfirmSubmit }: any) => {
    submitConfirmHandler = handleConfirmSubmit;
    return openConfirmSubmitDialog ? (
      <div data-testid="ConfirmationOnboarding">
        <button onClick={handleConfirmSubmit}>confirm-submit</button>
      </div>
    ) : null;
  },
}));

// --------------- Import SUT (after mocks) ---------------
import StartOnboarding from '../startOnboarding';

// --------------- Helpers ---------------
function resetCtx(overrides?: Partial<any>) {
  ctxFormData = {
    trackingStatus: 'In_Draft',
    cdpNextDetails: {},
    ...overrides,
  };
  setFormData = jest.fn((next: any) => {
    ctxFormData = typeof next === 'function' ? next(ctxFormData) : next;
  });
  resetFormData = jest.fn();
  requiredFields = [];
  makeRequest.mockReset();
  mockNavigate.mockReset();
  mockParams = {};
}

const renderSut = () => render(<StartOnboarding />);

// --------------- Tests ---------------
describe('StartOnboarding', () => {
  beforeEach(() => resetCtx());

  test('renders default tab and action buttons', () => {
    renderSut();
    expect(screen.getByTestId('ApplicationDetails')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Cancel/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /^Save$/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /^Submit$/i })).toBeInTheDocument();
  });

  test('useEffect with trackingId fetches form and sets formData', async () => {
    mockParams = { trackingId: '42' };
    makeRequest.mockResolvedValueOnce({ data: { intakeFormTrackingId: 42, foo: 'bar' }, status: 200 });

    renderSut();

    // async fetch will call setFormData with server data
    await screen.findByTestId('ApplicationDetails');
    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({ method: 'GET', endpoints: expect.stringContaining('42') })
    );
    // setFormData receives the server data
    expect(setFormData).toHaveBeenCalledWith(expect.objectContaining({ foo: 'bar' }));
  });

  test('useEffect without trackingId resets form', () => {
    renderSut();
    expect(resetFormData).toHaveBeenCalled();
  });

  test('Save posts intake-form, shows toast and navigates to onboarding route', async () => {
    makeRequest.mockResolvedValueOnce({
      data: { intakeFormTrackingId: 777 },
      status: 200,
    });

    renderSut();

    await userEvent.click(screen.getByRole('button', { name: /^Save$/i }));

    // POST called
    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({ method: 'POST', endpoints: expect.stringMatching(/api\/intake-form/) })
    );

    // Toast HTML heading appears (Snackbar with dangerouslySetInnerHTML)
    expect(await screen.findByText(/Intake form saved successfully/i)).toBeInTheDocument();

    expect(mockNavigate).toHaveBeenCalledWith(expect.stringContaining('/gcpOnboarding/777'));
  });

  test('getFormData non-200 shows error toast', async () => {
    mockParams = { trackingId: '5' };
    makeRequest.mockResolvedValueOnce({ data: {}, status: 500 });

    renderSut();

    expect(await screen.findByText(/Error has occurred while fetching Intake Form/i)).toBeInTheDocument();
  });

  test('Submit invalid shows validation error list in toast', async () => {
    // one required field path missing to fail validation
    requiredFields = ['app.name'];
    ctxFormData = { app: {} };

    renderSut();

    await userEvent.click(screen.getByRole('button', { name: /^Submit$/i }));

    expect(
      await screen.findByText(/Please fill in all required fields before submitting/i)
    ).toBeInTheDocument();
  });

  test('Submit valid opens confirmation, confirm triggers submit API and shows toast', async () => {
    requiredFields = []; // validation passes
    makeRequest
      .mockResolvedValueOnce({ data: { intakeFormTrackingId: 1 }, status: 200 }) // submit POST
      .mockResolvedValueOnce({}); // navigate call doesn't make a request; keep stack clean

    renderSut();

    await userEvent.click(screen.getByRole('button', { name: /^Submit$/i }));

    // Confirmation dialog visible (our mock renders a trigger)
    expect(screen.getByTestId('ConfirmationOnboarding')).toBeInTheDocument();

    // Trigger confirm
    await userEvent.click(screen.getByText('confirm-submit'));

    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({ method: 'POST', endpoints: expect.stringMatching(/api\/submit-intake-form/) })
    );
    expect(
      await screen.findByText(/Intake form submitted successfully/i)
    ).toBeInTheDocument();
  });

  test('Cancel â†’ confirm (with trackingId) reloads server form', async () => {
    mockParams = { trackingId: '99' };
    makeRequest.mockResolvedValue({ data: { intakeFormTrackingId: 99, xyz: 'abc' }, status: 200 });

    renderSut();

    await userEvent.click(screen.getByRole('button', { name: /Cancel/i }));

    // Our cancel mock shows a button to invoke confirm
    expect(screen.getByTestId('CancelOnboarding')).toBeInTheDocument();
    await userEvent.click(screen.getByText('confirm-cancel'));

    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({ method: 'GET', endpoints: expect.stringContaining('99') })
    );
    expect(setFormData).toHaveBeenCalledWith(expect.objectContaining({ xyz: 'abc' }));
  });

  test('tab switching renders correct panels', async () => {
    renderSut();

    await userEvent.click(screen.getByRole('button', { name: /Component Details/i }));
    expect(screen.getByTestId('ComponentsDetails')).toBeInTheDocument();

    await userEvent.click(screen.getByRole('button', { name: /Guide Lines/i }));
    expect(screen.getByTestId('GuidelinesIntakeForm')).toBeInTheDocument();

    await userEvent.click(screen.getByRole('button', { name: /Application Details/i }));
    expect(screen.getByTestId('ApplicationDetails')).toBeInTheDocument();
  });
});
