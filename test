import React from 'react';
import { render, screen } from '@testing-library/react';
import ProvisionLogsTemplate from './Provision-logs-template';

// --- tiny icon mocks so we can assert success/error quickly ---
jest.mock('@mui/icons-material/CheckCircle', () => ({
  __esModule: true,
  default: (props: any) => <i data-testid="ok-icon" {...props} />,
}));
jest.mock('@mui/icons-material/Cancel', () => ({
  __esModule: true,
  default: (props: any) => <i data-testid="error-icon" {...props} />,
}));

type Props = React.ComponentProps<typeof ProvisionLogsTemplate>;
type Logs = Props['provisioningLogs'];

/**
 * Build a base object that satisfies what the component expects.
 * Key point: for the APP section to show project details, your component
 * checks `typeof details === 'object' && details.project_id && Array.isArray(details.missing_additional_roles)`.
 * So we include those arrays (even if empty).
 */
function makeLogs(overall: 'success' | 'failure' = 'success'): Logs {
  return {
    overall_status: overall,
    validation_results: {
      gcpapp_validation: {
        status: 'success',
        details: {
          project_id: 'proj-123',
          terraform_service_account: undefined, // makes it print "N/A"
          // these must exist so APP details render at all
          missing_additional_roles: [] as string[],
          missing_grantable_roles: [] as string[],
          project_flags: [] as { flag_name: string; flag_value: string }[],
        } as any,
      },
      gcpdm_validation: {
        status: 'success',
        details: {
          missing_additional_roles: [] as string[],
          missing_grantable_roles: [] as string[],
          project_flags: [] as { flag_name: string; flag_value: string }[],
          secondary_ranges_validation: [] as string[],
        } as any,
      },
      github_repos_validation: { status: 'success', details: [] as any[] },
      secondary_ranges_validation: { status: 'success', details: [] as any[] },
      workspace_validation: { status: 'success', details: [] as any[] },
    },
  };
}

/** Render helper with sensible defaults; override as needed per test */
const renderTpl = (partial?: Partial<Props>) => {
  const base: Props = {
    logType: 'GCP APP Validation Logs',
    provisioningLogs: makeLogs('success'),
  };
  return render(<ProvisionLogsTemplate {...base} {...partial} />);
};

describe('ProvisionLogsTemplate', () => {
  test('renders all APP section headings and shows at least one success icon', () => {
    renderTpl();

    expect(screen.getByText(/GCP Validation/i)).toBeInTheDocument();
    expect(screen.getByText(/GitHub Repos Validation/i)).toBeInTheDocument();
    expect(screen.getByText(/Secondary Ranges Validation/i)).toBeInTheDocument();
    expect(screen.getByText(/Workspace Validation/i)).toBeInTheDocument();
    expect(screen.getByText(/Missing Roles/i)).toBeInTheDocument();
    expect(screen.getByText(/Missing Services/i)).toBeInTheDocument();
    expect(screen.getByText(/Project Creation Flags/i)).toBeInTheDocument();

    expect(screen.getAllByTestId('ok-icon').length).toBeGreaterThan(0);
    expect(screen.queryByTestId('error-icon')).toBeNull();
  });

  test('shows GCP APP project details and prints "N/A" when service account is missing', () => {
    const logs = makeLogs('success');
    // Make the project ID obvious for assertion
    (logs.validation_results.gcpapp_validation.details as any).project_id = 'abc-999';
    (logs.validation_results.gcpapp_validation.details as any).terraform_service_account = undefined;

    renderTpl({ provisioningLogs: logs });

    // Label + ID. The label is wrapped in <strong>, so match flexibly:
    const projectIdLine = screen.getByText((content) =>
      content.includes('GCP APP Project ID') && content.includes('abc-999')
    );
    expect(projectIdLine).toBeInTheDocument();

    // "Terraform Service Account: N/A" (label + N/A split by nodes -> flexible matcher)
    const tfaLine = screen.getByText((content) =>
      content.includes('Terraform Service Account') && content.includes('N/A')
    );
    expect(tfaLine).toBeInTheDocument();
  });

  test('renders Missing Roles items and marks section as failure when lists have entries', () => {
    const logs = makeLogs('success');
    (logs.validation_results.gcpdm_validation.details as any) = {
      missing_additional_roles: ['roles/logging.viewer', 'roles/storage.objectViewer'],
      missing_grantable_roles: ['roles/iam.serviceAccountUser'],
      project_flags: [],
      secondary_ranges_validation: [],
    };

    renderTpl({ provisioningLogs: logs });

    expect(screen.getByText(/roles\/logging\.viewer/i)).toBeInTheDocument();
    expect(screen.getByText(/roles\/storage\.objectViewer/i)).toBeInTheDocument();
    expect(screen.getByText(/roles\/iam\.serviceAccountUser/i)).toBeInTheDocument();

    // With entries present, that section becomes failure -> an error icon appears somewhere
    expect(screen.getByTestId('error-icon')).toBeInTheDocument();
  });

  test('renders Project Creation Flags as list items', () => {
    const logs = makeLogs('success');
    (logs.validation_results.gcpdm_validation.details as any).project_flags = [
      { flag_name: 'billingEnabled', flag_value: 'true' },
      { flag_name: 'orgPolicySet', flag_value: 'false' },
    ];

    renderTpl({ provisioningLogs: logs });

    // The component renders "flag_name: flag_value"
    expect(screen.getByText(/billingEnabled.*true/i)).toBeInTheDocument();
    expect(screen.getByText(/orgPolicySet.*false/i)).toBeInTheDocument();
  });

  test('renders Secondary Ranges items and shows error icon when list has entries', () => {
    const logs = makeLogs('success');
    logs.validation_results.gcpdm_validation.status = 'failure'; // your code treats entries as failure anyway
    (logs.validation_results.gcpdm_validation.details as any).secondary_ranges_validation = [
      'range-a',
      'range-b',
    ];

    renderTpl({ provisioningLogs: logs });

    expect(screen.getByText(/range-a/i)).toBeInTheDocument();
    expect(screen.getByText(/range-b/i)).toBeInTheDocument();
    expect(screen.getByTestId('error-icon')).toBeInTheDocument();
  });

  test('renders CDM log view when logType = "GCP CDM Validation Logs"', () => {
    // Make sure the CDM branch has data so status reads safely
    const logs = makeLogs('success');
    (logs.validation_results.gcpdm_validation.details as any) = {
      missing_additional_roles: [],
      missing_grantable_roles: [],
      project_flags: [],
      secondary_ranges_validation: [],
    };

    renderTpl({
      logType: 'GCP CDM Validation Logs',
      provisioningLogs: logs,
    });

    // Sanity check a heading shared in the CDM variant (template shows this title line)
    expect(screen.getByText(/GCP CDM Validation Logs/i)).toBeInTheDocument();
  });
});
