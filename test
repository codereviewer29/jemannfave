// ====================================================================
// File: src/home/CustomNavigation.test.tsx
// ====================================================================
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';
import CustomNavigation from './CustomNavigation';

// --- Router spy: capture programmatic navigation ---
const navigateMock = jest.fn();
jest.mock('react-router-dom', () => {
  const actual = jest.requireActual('react-router-dom');
  return {
    __esModule: true,
    ...actual,
    useNavigate: () => navigateMock,
  };
});

const renderAt = (path: string) =>
  render(
    <MemoryRouter initialEntries={[path]}>
      <CustomNavigation />
    </MemoryRouter>,
  );

const getLink = (label: RegExp) =>
  screen.getByRole('link', { name: label });

// ====================================================================
// Tests
// ====================================================================
describe('CustomNavigation', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('home route shows only Home link and marks it active', () => {
    renderAt('/home');

    const home = getLink(/home/i);
    expect(home).toBeInTheDocument();
    expect(home).toHaveClass('nav-link');
    expect(home).toHaveClass('nav-link-active');

    // only one link for /home mapping
    expect(screen.getAllByRole('link')).toHaveLength(1);

    // click navigates to /home
    fireEvent.click(home);
    expect(navigateMock).toHaveBeenCalledWith('/home');
  });

  test('/provision shows Home + Environment Provisioning; active is /provision', () => {
    renderAt('/provision');

    const home = getLink(/^home$/i);
    const envProv = getLink(/environment provisioning/i);

    expect(home).toBeInTheDocument();
    expect(envProv).toBeInTheDocument();

    // active highlighting
    expect(envProv).toHaveClass('nav-link-active');
    expect(home).not.toHaveClass('nav-link-active');

    // click both â†’ navigate calls
    fireEvent.click(home);
    fireEvent.click(envProv);
    expect(navigateMock).toHaveBeenCalledWith('/home');
    expect(navigateMock).toHaveBeenCalledWith('/provision');
  });

  test('/gcpOnboarding shows Home + Onboarding Form + Onboarding Request; active is Onboarding Form', () => {
    renderAt('/gcpOnboarding');

    const home = getLink(/^home$/i);
    const form = getLink(/onboarding form/i);
    const request = getLink(/onboarding request/i);

    expect(home).toBeInTheDocument();
    expect(form).toBeInTheDocument();
    expect(request).toBeInTheDocument();

    expect(form).toHaveClass('nav-link-active');
    expect(home).not.toHaveClass('nav-link-active');
    expect(request).not.toHaveClass('nav-link-active');

    // clicks navigate to their paths
    fireEvent.click(form);
    fireEvent.click(request);
    expect(navigateMock).toHaveBeenCalledWith('/gcpOnboarding');
    expect(navigateMock).toHaveBeenCalledWith('/inbox');
  });

  test('/inbox shows Home + Onboarding Form + Onboarding Request; active is Onboarding Request', () => {
    renderAt('/inbox');

    const home = getLink(/^home$/i);
    const form = getLink(/onboarding form/i);
    const request = getLink(/onboarding request/i);

    expect(home).toBeInTheDocument();
    expect(form).toBeInTheDocument();
    expect(request).toBeInTheDocument();

    expect(request).toHaveClass('nav-link-active');
    expect(form).not.toHaveClass('nav-link-active');

    fireEvent.click(home);
    fireEvent.click(request);
    expect(navigateMock).toHaveBeenCalledWith('/home');
    expect(navigateMock).toHaveBeenCalledWith('/inbox');
  });

  test('/inventory-dashboard shows Home + Environment Build Inventory; active is inventory', () => {
    renderAt('/inventory-dashboard');

    const home = getLink(/^home$/i);
    const inv = getLink(/environment build inventory/i);

    expect(home).toBeInTheDocument();
    expect(inv).toBeInTheDocument();

    expect(inv).toHaveClass('nav-link-active');
    expect(home).not.toHaveClass('nav-link-active');

    fireEvent.click(inv);
    expect(navigateMock).toHaveBeenCalledWith('/inventory-dashboard');
  });

  test('unknown route falls back to default (no links) but still renders container and image', () => {
    renderAt('/unknown/path');

    // default mapping is empty list
    expect(screen.queryAllByRole('link')).toHaveLength(0);

    // container and image still present
    expect(document.querySelector('.nav-container')).toBeTruthy();
    expect(document.querySelector('.google-cloud-img')).toBeTruthy();
  });
});
