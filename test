// src/provision/Provision-logs.test.tsx
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import ProvisionLogs from './Provision-logs';                 // <-- same folder

// mock the child exactly like the component imports it
jest.mock('./provision-logs-template', () => ({               // <-- same folder
  __esModule: true,
  default: ({ logType }: { logType: string }) => (
    <div data-testid="logs-template">{logType}</div>
  ),
}));

// derive the exact prop type for provisioningLogs
type ProvisionLogsProps =
  React.ComponentProps<typeof ProvisionLogs>['provisioningLogs'];

// helper to build valid props
function makeLogs(
  overall: 'success' | 'failure' = 'success'
): ProvisionLogsProps {
  return {
    overall_status: overall,
    validation_results: {
      gcpapp_validation: { status: 'ok', details: [] },
      gcpdm_validation: { status: 'ok', details: [] },
      github_repos_validation: { status: 'ok', details: [] },
      secondary_ranges_validation: { status: 'ok', details: [] },
      workspace_validation: { status: 'ok', details: [] },
    },
  };
}

describe('ProvisionLogs', () => {
  test('renders empty state when no logs', () => {
    // @ts-expect-error: exercising empty branch
    render(<ProvisionLogs provisioningLogs={undefined} />);
    expect(screen.getByText(/no provisioning logs available/i)).toBeInTheDocument();
    expect(screen.queryByTestId('logs-template')).not.toBeInTheDocument();
  });

  test('shows overall status "Success" in green by default (APP tab active)', () => {
    render(<ProvisionLogs provisioningLogs={makeLogs('success')} />);

    expect(screen.getByText(/overall status/i)).toBeInTheDocument();

    const statusValue = screen.getByText(/success/i);
    expect(statusValue).toBeInTheDocument();
    expect(statusValue).toHaveStyle({ color: 'green' });

    expect(screen.getByTestId('logs-template')).toHaveTextContent(/gcp app validation logs/i);
  });

  test('switches to CDM tab and renders CDM template', () => {
    render(<ProvisionLogs provisioningLogs={makeLogs('success')} />);
    fireEvent.click(screen.getByRole('button', { name: /gcp cdm validation logs/i }));
    expect(screen.getByTestId('logs-template')).toHaveTextContent(/gcp cdm validation logs/i);
  });

  test('shows overall status "Failure" in red', () => {
    render(<ProvisionLogs provisioningLogs={makeLogs('failure')} />);
    const statusValue = screen.getByText(/failure/i);
    expect(statusValue).toBeInTheDocument();
    expect(statusValue).toHaveStyle({ color: 'red' });
  });
});
