/* eslint-disable @typescript-eslint/no-explicit-any */
import React from 'react';
import { render, screen } from '@testing-library/react';
import ProvisionLogsTemplate from './Provision-logs-template';

// --- minimal icon mocks so we can assert which one renders
jest.mock('@mui/icons-material/CheckCircle', () => ({
  __esModule: true,
  default: (props: any) => <i data-testid="ok-icon" {...props} />,
}));
jest.mock('@mui/icons-material/Cancel', () => ({
  __esModule: true,
  default: (props: any) => <i data-testid="error-icon" {...props} />,
}));

// --- a factory for a valid "logs" object the component expects.
// we include both gcppap_validation and gcpapp_validation in case the file uses either spelling.
function makeLogs(
  overall: 'success' | 'failure' = 'success',
): any {
  return {
    overall_status: overall,
    validation_results: {
      gcppap_validation: {
        status: 'success',
        details: {
          project_id: 'proj-123',
          // when undefined it should display "N/A"
          terraform_service_account: undefined,
        },
      },
      gcpapp_validation: {
        status: 'success',
        details: {
          project_id: 'proj-123',
          terraform_service_account: undefined,
        },
      },
      gcpdm_validation: {
        status: 'success',
        details: {
          missing_additional_roles: [] as string[],
          missing_grantable_roles: [] as string[],
          project_flags: [] as Array<{ flag_name: string; flag_value: string }>,
        },
      },
      github_repos_validation: { status: 'success', details: [] },
      secondary_ranges_validation: {
        status: 'success',
        details: { secondary_ranges_validation: [] as string[] },
      },
      workspace_validation: { status: 'success', details: [] },
    },
  };
}

// helper to render the template with sane defaults
const renderTemplate = (opts?: {
  logType?: string;
  logs?: any;
}) => {
  const base = {
    logType: 'GCP APP Validation Logs',
    provisioningLogs: makeLogs('success'),
    ...opts,
  };
  return render(
    // cast once so we never fight TS about the prop shape in tests
    <ProvisionLogsTemplate
      {...(base as unknown as {
        logType: string;
        provisioningLogs: any;
      })}
    />,
  );
};

describe('ProvisionLogsTemplate', () => {
  test('renders all section headings for APP logs and shows success icons', () => {
    renderTemplate();

    // Section headings (these strings come from your component)
    expect(screen.getByText(/GCP Validation/i)).toBeInTheDocument();
    expect(screen.getByText(/GitHub Repos Validation/i)).toBeInTheDocument();
    expect(screen.getByText(/Secondary Ranges Validation/i)).toBeInTheDocument();
    expect(screen.getByText(/Workspace Validation/i)).toBeInTheDocument();
    expect(screen.getByText(/Missing Roles/i)).toBeInTheDocument();
    expect(screen.getByText(/Missing Services/i)).toBeInTheDocument();
    expect(screen.getByText(/Project Creation Flags/i)).toBeInTheDocument();

    // at least one "ok" icon and no "error" icon when everything is success
    expect(screen.getAllByTestId('ok-icon').length).toBeGreaterThan(0);
    expect(screen.queryByTestId('error-icon')).toBeNull();
  });

  test('shows GCP APP project details and prints "N/A" when service account is missing', () => {
    const logs = makeLogs('success');
    logs.validation_results.gcppap_validation.details = {
      project_id: 'abc-999',
      // service account intentionally missing -> "N/A"
    };

    renderTemplate({ logs });

    expect(screen.getByText(/GCP APP Project ID/i)).toBeInTheDocument();
    expect(screen.getByText(/abc-999/i)).toBeInTheDocument();
    expect(screen.getByText(/Terraform Service Account/i)).toBeInTheDocument();
    expect(screen.getByText(/N\/A/i)).toBeInTheDocument();
  });

  test('renders "Missing Roles" items and marks section as failure when lists have entries', () => {
    const logs = makeLogs('success');
    logs.validation_results.gcpdm_validation = {
      status: 'success',
      details: {
        missing_additional_roles: ['roles/logging.viewer', 'roles/storage.objectViewer'],
        missing_grantable_roles: ['roles/iam.serviceAccountUser'],
        project_flags: [],
      },
    };

    renderTemplate({ logs });

    // list items
    expect(screen.getByText(/roles\/logging\.viewer/i)).toBeInTheDocument();
    expect(screen.getByText(/roles\/storage\.objectViewer/i)).toBeInTheDocument();
    expect(screen.getByText(/roles\/iam\.serviceAccountUser/i)).toBeInTheDocument();

    // section becomes failure -> error icon appears somewhere
    expect(screen.getByTestId('error-icon')).toBeInTheDocument();
  });

  test('renders Project Creation Flags as list items', () => {
    const logs = makeLogs('success');
    logs.validation_results.gcpdm_validation = {
      status: 'success',
      details: {
        missing_additional_roles: [],
        missing_grantable_roles: [],
        project_flags: [
          { flag_name: 'billingEnabled', flag_value: 'true' },
          { flag_name: 'orgPolicySet', flag_value: 'false' },
        ],
      },
    };

    renderTemplate({ logs });

    expect(screen.getByText(/billingEnabled.*true/i)).toBeInTheDocument();
    expect(screen.getByText(/orgPolicySet.*false/i)).toBeInTheDocument();
  });

  test('renders Secondary Ranges items and flags section as failure when list has entries', () => {
    const logs = makeLogs('success');
    logs.validation_results.secondary_ranges_validation = {
      status: 'failure', // component converts to failure when list has data anyway
      details: { secondary_ranges_validation: ['range-a', 'range-b'] },
    };

    renderTemplate({ logs });

    expect(screen.getByText(/range-a/i)).toBeInTheDocument();
    expect(screen.getByText(/range-b/i)).toBeInTheDocument();
    expect(screen.getByTestId('error-icon')).toBeInTheDocument();
  });

  test('shows footer email when overall_status is failure', () => {
    const failing = makeLogs('failure');

    renderTemplate({ logs: failing });

    // footer paragraph + mailto
    expect(screen.getByText(/Please contact the Enablement Team/i)).toBeInTheDocument();
    expect(screen.getByText(/CloudEnablement@wellsfargo\.com/i)).toBeInTheDocument();
  });

  test('renders CDM log view when logType = "GCP CDM Validation Logs"', () => {
    renderTemplate({
      logType: 'GCP CDM Validation Logs',
      logs: makeLogs('success'),
    });

    // sanity check the title used for the CDM variant
    expect(screen.getByText(/GCP CDM Validation Logs/i)).toBeInTheDocument();
  });
});
