// src/main.test.tsx
import React from 'react';

describe('main.tsx entry', () => {
  beforeEach(() => {
    document.body.innerHTML = '<div id="root"></div>';
    jest.resetModules(); // why: reload main.tsx with fresh mocks
  });

  test('creates a root and renders App inside ConfigContextProvider + StrictMode', () => {
    // --- mock react-dom/client ---
    const renderMock = jest.fn();
    const createRootMock = jest.fn(() => ({ render: renderMock }));
    jest.mock('react-dom/client', () => ({
      __esModule: true,
      createRoot: createRootMock,
    }));

    // --- mock App component ---
    const AppMock = jest.fn(() => null);
    jest.mock('./App', () => ({
      __esModule: true,
      default: AppMock,
    }));

    // --- mock ConfigContextProvider (pass-through) ---
    const MockProvider: React.FC<React.PropsWithChildren> = ({ children }) => <>{children}</>;
    jest.mock('@wf/react-library', () => ({
      __esModule: true,
      ConfigContextProvider: MockProvider,
    }));

    // Load the entry after mocks
    jest.isolateModules(() => {
      // eslint-disable-next-line @typescript-eslint/no-var-requires
      require('./main');
    });

    // --- assertions ---
    const rootEl = document.getElementById('root');
    expect(createRootMock).toHaveBeenCalledTimes(1);
    expect(createRootMock).toHaveBeenCalledWith(rootEl);

    expect(renderMock).toHaveBeenCalledTimes(1);
    const renderedTree = renderMock.mock.calls[0][0];

    // StrictMode at the top level
    expect(React.isValidElement(renderedTree)).toBe(true);
    expect(renderedTree.type).toBe(React.StrictMode);

    // StrictMode child should be the provider
    const providerEl = renderedTree.props.children;
    const { ConfigContextProvider } = jest.requireMock('@wf/react-library');
    expect(React.isValidElement(providerEl)).toBe(true);
    expect(providerEl.type).toBe(ConfigContextProvider);

    // Provider child should be <App />
    const appEl = providerEl.props.children;
    const App = jest.requireMock('./App').default;
    expect(React.isValidElement(appEl)).toBe(true);
    expect(appEl.type).toBe(App);

    // Ensure App function component was invoked by React
    expect(AppMock).toHaveBeenCalled();
  });
});
