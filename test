import { renderHook, act } from '@testing-library/react';
import useApiService from './useApiService';
import type { HttpRequest } from './types';

// ---- Mocks for external deps ----------------------------------------------
jest.mock('@wf/react-library', () => ({
  __esModule: true,
  useAppGlobalState: jest.fn(),
  useConfig: jest.fn(),
}));

jest.mock('./processHttp', () => ({
  __esModule: true,
  default: jest.fn(),
}));

// typed handles to the mocks
const useAppGlobalStateMock = require('@wf/react-library')
  .useAppGlobalState as jest.Mock;
const useConfigMock = require('@wf/react-library').useConfig as jest.Mock;
const processHttpRequestMock = require('./processHttp').default as jest.Mock;

// convenient constants
const BASE = 'https://api.example.com';
const TOKEN = { access_token: 'abc123' };

// helper that satisfies your HttpRequest type (adjust if your type differs)
const makeReq = (endpoint = '/things', method: HttpRequest['method'] = 'GET'): HttpRequest => ({
  method,
  endpoint,
  // include any optional props your HttpRequest type expects to avoid TS errors
  responseType: 'json' as const,
});

beforeEach(() => {
  jest.clearAllMocks();

  // Always provide env so env.API_BASE_ENDPOINT is defined
  useConfigMock.mockReturnValue({ API_BASE_ENDPOINT: BASE });
});

// ---------------------------------------------------------------------------

test('calls processHttpRequest with (request, access_token, baseEndpoint)', async () => {
  useAppGlobalStateMock.mockReturnValue({ token: TOKEN });
  processHttpRequestMock.mockResolvedValue({ ok: true });

  const { result } = renderHook(() => useApiService());
  const req = makeReq('/things', 'GET');

  await act(async () => {
    await result.current.makeRequest(req);
  });

  expect(processHttpRequestMock).toHaveBeenCalledTimes(1);
  expect(processHttpRequestMock).toHaveBeenCalledWith(req, TOKEN.access_token, BASE);
});

test('passes undefined token when global state has no token', async () => {
  // IMPORTANT: return an object with token: undefined, not undefined directly
  useAppGlobalStateMock.mockReturnValue({ token: undefined });
  processHttpRequestMock.mockResolvedValue({ ok: true });

  const { result } = renderHook(() => useApiService());
  const req = makeReq('/no-token');

  await act(async () => {
    await result.current.makeRequest(req);
  });

  expect(processHttpRequestMock).toHaveBeenCalledWith(req, undefined, BASE);
});

test('returns the resolved value from processHttpRequest', async () => {
  useAppGlobalStateMock.mockReturnValue({ token: TOKEN });
  const payload = { id: 7, name: 'thing' };
  processHttpRequestMock.mockResolvedValue(payload);

  const { result } = renderHook(() => useApiService());
  const req = makeReq('/thing/7');

  // act returns whatever the callback returns; await directly for clarity
  const value = await act(async () => result.current.makeRequest(req));
  expect(value).toBe(payload);
});

test('propagates errors from processHttpRequest', async () => {
  useAppGlobalStateMock.mockReturnValue({ token: TOKEN });
  const err = new Error('network down');
  processHttpRequestMock.mockRejectedValue(err);

  const { result } = renderHook(() => useApiService());
  const req = makeReq('/oops');

  await expect(result.current.makeRequest(req)).rejects.toThrow('network down');
});
