// saferoomIntakeForm.test.tsx
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import SafeRoomIntakeForm from './saferoomIntakeForm';

/* ------------------------------ mock FormContext ------------------------------ */
/** We must mock the same path the component imports from */
jest.mock('./FormContext', () => {
  const React = require('react') as typeof import('react');
  // keep this any-typed so TS doesn't complain about generics in createContext
  const Ctx: any = React.createContext(null);

  return {
    __esModule: true,
    FormContext: Ctx,
    useFormContext: () => {
      const v = React.useContext(Ctx);
      if (!v) throw new Error('useFormContext used outside Provider in test');
      return v;
    },
  };
});

// pull the mocked context back so we can render with its Provider
import { FormContext } from './FormContext';

/* --------------------------------- helpers ---------------------------------- */

// Testing Library's TextMatch type (string | RegExp | (content,node)=>boolean)
type TextMatch = Parameters<typeof screen.getByLabelText>[0];

/** Open a MUI <Select> by its label (mouseDown on the input opens the menu) */
const openSelectByLabel = (label: TextMatch) => {
  const input = screen.getByLabelText(label, { selector: 'input' });
  fireEvent.mouseDown(input);
};

/** Build a Provider with the minimal, safe form shape this component reads/writes */
function withForm(overrides?: Partial<any>) {
  // minimal + correct keys (only keys used inside this component)
  const baseFormData: any = {
    cdpDetails: {
      versionCDPRequired: '', // updated in useEffect based on selection
    },
    safeRoomDetails: {
      dataLoadRequired: '', // bound to the Select
    },
    ...(overrides || {}),
  };

  // updater that supports both object + functional setState shapes
  const setFormData = jest.fn((updater: any) => {
    if (typeof updater === 'function') {
      const next = updater(baseFormData);
      Object.assign(baseFormData, next);
    } else {
      Object.assign(baseFormData, updater);
    }
  });

  const value = {
    formData: baseFormData,
    setFormData,
    requiredFields: [],
    resetFormData: jest.fn(),
  };

  // IMPORTANT: cast to a local component, then use <Ctx.Provider>
  const Ctx: any = FormContext;
  const Provider = ({ children }: { children: React.ReactNode }) => (
    <Ctx.Provider value={value}>{children}</Ctx.Provider>
  );

  return { Provider, setFormData, formData: baseFormData };
}

/* ----------------------------------- tests ---------------------------------- */

describe('SafeRoomIntakeForm', () => {
  test('renders overview copy and the Select (smoke)', () => {
    const { Provider } = withForm();

    render(
      <Provider>
        <SafeRoomIntakeForm validationErrors={{}} />
      </Provider>
    );

    expect(
      screen.getByText(/Saferoom Overview/i)
    ).toBeInTheDocument();

    // label exists, and the underlying input is present
    const selectInput = screen.getByLabelText(/Select the Saferoom Data Load Capability/i, {
      selector: 'input',
    });
    expect(selectInput).toBeInTheDocument();
  });

  test('choosing "Cloud Storage" updates form and sets CDP version in useEffect', () => {
    const { Provider, setFormData, formData } = withForm();

    render(
      <Provider>
        <SafeRoomIntakeForm validationErrors={{}} />
      </Provider>
    );

    // open the select
    openSelectByLabel(/Select the Saferoom Data Load Capability/i);
    // click Cloud Storage option
    fireEvent.click(screen.getByText(/Cloud Storage/i));

    // component writes selection through setFormData
    expect(setFormData).toHaveBeenCalled();

    // useEffect should map Cloud Storage -> "File to BQ version"
    expect(formData.cdpDetails.versionCDPRequired).toBe('File to BQ version');
    // and the chosen value should be saved
    expect(formData.safeRoomDetails.dataLoadRequired).toBe('Cloud Storage');
  });

  test('choosing "Big Query" updates form and sets alternate CDP version', () => {
    const { Provider, setFormData, formData } = withForm();

    render(
      <Provider>
        <SafeRoomIntakeForm validationErrors={{}} />
      </Provider>
    );

    openSelectByLabel(/Select the Saferoom Data Load Capability/i);
    fireEvent.click(screen.getByText(/Big Query/i));

    expect(setFormData).toHaveBeenCalled();
    // useEffect should map Big Query -> "BQ to BQ version"
    expect(formData.cdpDetails.versionCDPRequired).toBe('BQ to BQ version');
    expect(formData.safeRoomDetails.dataLoadRequired).toBe('Big Query');
  });

  test('shows helper error style when validationErrors has an entry', () => {
    const { Provider } = withForm();

    render(
      <Provider>
        <SafeRoomIntakeForm
          validationErrors={{ 'safeRoomDetails.dataLoadRequired': 'Required' }}
        />
      </Provider>
    );

    // The Select is labeled by the InputLabel text
    const selectEl = screen.getByLabelText(/Select the Saferoom Data Load Capability/i, {
      selector: 'input',
    });
    // MUI usually toggles aria-invalid on the input when error={true}
    expect(selectEl).toHaveAttribute('aria-invalid', 'true');
  });
});
