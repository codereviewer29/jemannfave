import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import GCPInfraSetup from './gcp-infra-setup';

// --- shared mocks -----------------------------------------------------------

// spy for window.open (links in the UI)
const openSpy = jest.spyOn(window, 'open').mockImplementation(() => null as any);

// API client hook -> returns a function we can spy on
const makeRequestMock = jest.fn();
jest.mock('../services/useApiService', () => ({
  __esModule: true,
  default: () => makeRequestMock,
}));

// react-router navigate + params
const navigateMock = jest.fn();
jest.mock('react-router-dom', () => {
  const real = jest.requireActual('react-router-dom');
  return {
    ...real,
    useNavigate: () => navigateMock,
    useParams: () => ({ appid: 'abc-999', environment: 'dev' }),
    Link: (props: any) => <a {...props} />,
  };
});

// Provision context (only github/terraform tokens are used here)
jest.mock('../ProvisionContext', () => ({
  __esModule: true,
  useProvisionContext: () => ({
    provisioningData: {
      githubToken: 'ghp_123',
      terraformToken: 'tf_123',
    },
  }),
}));

// --- helpers ----------------------------------------------------------------

const GET_ENV_RESPONSE = {
  data: {
    env_params: {
      // app values (what the form shows)
      vault_password: 'P@ssw0rd1',
      servicenowsupportgroup: 'svc-group',
      requestemail: 'user@example.com',
      app_repo_name: 'corp-abc',
      app_branch_name: 'main',
      app_project_id: 'p-123',
      app_notification_channel: 'app-chan',
      // saferoom values
      saferoom_repo_name: 'corp-abc',
      saferoom_branch_name: 'main',
      saferoom_project_id: 's-456',
      saferoom_notification_channel: 'safe-chan',
    },
  },
};

function primeGETOnce() {
  makeRequestMock.mockResolvedValueOnce(GET_ENV_RESPONSE);
}

function primePOSTSuccessOnce() {
  makeRequestMock.mockResolvedValueOnce({
    status: 200,
    data: { log_output: ['ok'] },
  });
}

function primePOSTNon200Once() {
  makeRequestMock.mockResolvedValueOnce({
    status: 500,
    data: { log_output: [] },
  });
}

function primePOSTRejectOnce() {
  makeRequestMock.mockRejectedValueOnce(new Error('boom'));
}

/** render the page and return basic handles */
function renderPage() {
  // Component takes props from router params; no props to pass.
  makeRequestMock.mockClear();
  const ui = render(<GCPInfraSetup />);
  return { ui };
}

// --- tests ------------------------------------------------------------------

afterEach(() => {
  makeRequestMock.mockReset();
});

afterAll(() => {
  openSpy.mockRestore();
});

describe('GCPInfraSetup', () => {
  test('loads existing env params (GET) and renders the form with values', async () => {
    // 1) prime GET
    primeGETOnce();

    renderPage();

    // 2) GET is sent
    await waitFor(() =>
      expect(makeRequestMock).toHaveBeenCalledWith(
        expect.objectContaining({
          method: 'GET',
          endPoints: expect.stringMatching(/get-env-params/i),
        })
      )
    );

    // 3) form is hydrated with returned values
    expect(await screen.findByLabelText(/vault password/i)).toHaveValue('P@ssw0rd1');
    expect(screen.getByLabelText(/repo name/i)).toHaveValue('corp-abc');
    expect(screen.getByLabelText(/project id/i)).toHaveValue('p-123');
  });

  test('clicking "Build GCP Infrastructure" posts env params and marks tab complete', async () => {
    // 1) bootstrap GET then POST success
    primeGETOnce();
    primePOSTSuccessOnce();

    renderPage();

    // wait for GET
    await waitFor(() => expect(makeRequestMock).toHaveBeenCalledTimes(1));

    // click the action button -> triggers POST
    fireEvent.click(screen.getByRole('button', { name: /build gcp infrastructure/i }));

    // Ensure GET + POST happened
    await waitFor(() => expect(makeRequestMock).toHaveBeenCalledTimes(2));

    // Inspect the last call (the POST)
    const lastCallArg = makeRequestMock.mock.calls.at(-1)?.[0];
    expect(lastCallArg).toEqual(
      expect.objectContaining({
        method: 'POST',
        endPoints: expect.stringMatching(/tab=gcpapp/i),
        body: expect.objectContaining({
          env_params: expect.objectContaining({
            app_project_id: 'p-123',
            app_repo_name: 'corp-abc',
          }),
          github_token: 'ghp_123',
          terraform_token: 'tf_123',
        }),
      })
    );
  });

  test('shows an error toast if POST returns non-200', async () => {
    primeGETOnce();
    primePOSTNon200Once();

    renderPage();

    await waitFor(() => expect(makeRequestMock).toHaveBeenCalledTimes(1));

    fireEvent.click(screen.getByRole('button', { name: /build gcp infrastructure/i }));

    // POST attempted
    await waitFor(() => expect(makeRequestMock).toHaveBeenCalledTimes(2));

    // Toast appears (component sets HTML message inside Snackbar/Alert)
    expect(await screen.findByText(/error has occurred/i)).toBeInTheDocument();
  });

  test('shows an error toast if POST rejects (catch path)', async () => {
    primeGETOnce();
    primePOSTRejectOnce();

    renderPage();

    await waitFor(() => expect(makeRequestMock).toHaveBeenCalledTimes(1));

    fireEvent.click(screen.getByRole('button', { name: /build gcp infrastructure/i }));

    // POST attempted -> rejected
    await waitFor(() => expect(makeRequestMock).toHaveBeenCalledTimes(2));

    expect(await screen.findByText(/error has occurred/i)).toBeInTheDocument();
  });

  test('validation prevents POST and shows "required fields" toast when required data is missing', async () => {
    // Provide GET with empty required fields to trigger validation failure
    makeRequestMock.mockResolvedValueOnce({
      data: { env_params: { ...GET_ENV_RESPONSE.data.env_params, app_repo_name: '' } },
    });

    renderPage();

    // wait for GET to settle so inputs exist
    await waitFor(() => expect(makeRequestMock).toHaveBeenCalledTimes(1));

    // Try to submit with an empty required field
    fireEvent.click(screen.getByRole('button', { name: /build gcp infrastructure/i }));

    // Ensure no POST was sent (still only the initial GET)
    await waitFor(() => expect(makeRequestMock).toHaveBeenCalledTimes(1));

    // Required fields toast text
    expect(await screen.findByText(/please fill in all required fields/i)).toBeInTheDocument();
  });

  test('vault password visibility toggle switches type', async () => {
    primeGETOnce();

    renderPage();

    // wait for GET to settle so input exists
    await waitFor(() => expect(makeRequestMock).toHaveBeenCalled());

    const pwd = screen.getByLabelText(/vault password/i) as HTMLInputElement;
    const toggle = screen.getByRole('button', { name: /toggle password visibility/i });

    expect(pwd.type).toBe('password');
    fireEvent.click(toggle);
    expect(pwd.type).toBe('text');
  });
});
