import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import GCPInfraSetup from './gcp-infra-setup';
import { vi } from 'vitest';

// --- Mocks shared by tests ---------------------------------------------------

// mock window.open used inside links
vi.spyOn(window, 'open').mockImplementation(() => null as any);

// API client hook -> returns a function we can spy on
const makeRequestMock = vi.fn();
vi.mock('../services/useApiService', () => ({
  __esModule: true,
  default: () => makeRequestMock,
}));

// react-router navigate
const navigateMock = vi.fn();
vi.mock('react-router-dom', async (og) => {
  const real: any = await og();
  return {
    ...real,
    useNavigate: () => navigateMock,
    useParams: () => ({ appid: 'abc-999', environment: 'dev' }),
  };
});

// Provision context (tokens, etc.)
const setProvisionDataMock = vi.fn();
vi.mock('../ProvisionContext', () => ({
  __esModule: true,
  useProvisionContext: () => ({
    provisioningData: {
      githubToken: 'ghp_123',
      terraformToken: 'tf_456',
    },
    setProvisionData: setProvisionDataMock,
  }),
}));

// -----------------------------------------------------------------------------
// Small factory/fixture helpers

type Props = React.ComponentProps<typeof GCPInfraSetup>;

const envParamsFixture = {
  vault_password: 'Secret123',
  servicenowsupportgroup: 'svc-group',
  requestsemail: 'team@example.com',
  app_repo_name: 'corp-abc',
  app_branch_name: 'main',
  app_project_id: 'p-123',
  app_notification_channel: 'chan-a',
  saferoom_repo_name: 'corp-abc',
  saferoom_branch_name: 'main',
  saferoom_project_id: 'sr-123',
  saferoom_notification_channel: 'sr-chan',
};

function renderPage(overrides: Partial<Props> = {}) {
  const base: Props = {
    appid: 'abc-999',
    environment: 'dev',
    completedTabs: [],
    setCompletedTabs: vi.fn(),
    tabIndex: 2,
  };
  const props = { ...base, ...overrides };

  // default GET -> env params
  makeRequestMock.mockResolvedValueOnce({
    data: { env_params: envParamsFixture },
  });

  const ui = render(<GCPInfraSetup {...props} />);

  return { ui, props };
}

// -----------------------------------------------------------------------------
// Tests

describe('GCPInfraSetup', () => {
  beforeEach(() => {
    makeRequestMock.mockClear();
    navigateMock.mockClear();
    setProvisionDataMock.mockClear();
  });

  test('loads existing env params (GET) and renders the form with values', async () => {
    renderPage();

    // initial GET was made
    await waitFor(() =>
      expect(makeRequestMock).toHaveBeenCalledWith(
        expect.objectContaining({
          method: 'GET',
          // NOTE: correct key: endpoints (lowercase p)
          endpoints: expect.stringMatching(/get-env-params/i),
        }),
      ),
    );

    // some values were populated on screen
    expect(await screen.findByLabelText(/Project ID/i)).toHaveValue('p-123');
    expect(screen.getByLabelText(/Repo Name/i)).toHaveValue('corp-abc');
  });

  test('clicking "Build GCP Infrastructure" posts env params and marks tab complete', async () => {
    const setCompletedTabs = vi.fn();
    renderPage({ setCompletedTabs });

    // prime POST (2nd API call)
    makeRequestMock.mockResolvedValueOnce({
      status: 200,
      data: { log_output: ['success: repo created'] },
    });

    const btn = await screen.findByRole('button', { name: /Build GCP Infrastructure/i });
    fireEvent.click(btn);

    // Ensure both calls were made: GET then POST
    await waitFor(() => expect(makeRequestMock).toHaveBeenCalledTimes(2));

    // Inspect the LAST call which should be the POST
    const lastCall = makeRequestMock.mock.calls.at(-1)?.[0];
    expect(lastCall).toEqual(
      expect.objectContaining({
        method: 'POST',
        endpoints: expect.stringMatching(/tab=gcpapp/i),
      }),
    );
    // body carries env_params + tokens
    expect(lastCall?.body).toEqual(
      expect.objectContaining({
        env_params: expect.objectContaining({ app_project_id: 'p-123' }),
        github_token: 'ghp_123',
        terraform_token: 'tf_456',
      }),
    );

    // tab marked complete
    await waitFor(() => expect(setCompletedTabs).toHaveBeenCalled());
  });

  test('shows an error toast if POST fails (non-200)', async () => {
    renderPage();

    // POST response -> error
    makeRequestMock.mockResolvedValueOnce({ status: 500 });

    fireEvent.click(await screen.findByRole('button', { name: /Build GCP Infrastructure/i }));

    // The component shows a MUI <Snackbar><Alert severity="error" />
    await waitFor(() =>
      expect(screen.getByRole('alert')).toBeInTheDocument(),
    );
  });

  test('vault password visibility toggle switches from password to text', async () => {
    renderPage();

    const pwd = await screen.findByLabelText(/Vault Password/i);
    // initial MUI TextField renders as type="password"
    expect(pwd).toHaveAttribute('type', 'password');

    // click the little eye icon (the component sets aria-label like this)
    const toggle = screen.getByRole('button', { name: /toggle password visibility/i });
    fireEvent.click(toggle);

    expect(pwd).toHaveAttribute('type', 'text');
  });
});
