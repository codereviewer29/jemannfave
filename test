import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import StartOnboarding from './startOnboarding';
import { useFormContext } from '../FormContext';
import { makeRequest } from '../../utils/api';

// Mock FormContext
jest.mock('../FormContext', () => ({
  __esModule: true,
  useFormContext: jest.fn(),
}));

// Mock API
jest.mock('../../utils/api', () => ({
  __esModule: true,
  makeRequest: jest.fn(),
}));

describe('StartOnboarding Component', () => {
  const resetFormDataMock = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    (useFormContext as jest.Mock).mockReturnValue({
      formData: {
        trackingStatus: '',
        appDetails: {},
        cdmNextDetails: {}
      },
      resetFormData: resetFormDataMock,
    });
  });

  test('mount without trackingId → resets form and shows "Not Available"', () => {
    render(<StartOnboarding />);

    expect(resetFormDataMock).toHaveBeenCalled();

    // Flexible matcher across nested nodes
    expect(
      screen.getByText((_, el) =>
        el?.textContent?.includes('Not Available') ?? false
      )
    ).toBeInTheDocument();
  });

  test('Save → POST /api/intake-form then navigates to /gcpOnboarding/:id', async () => {
    (makeRequest as jest.Mock).mockResolvedValueOnce({ id: '123' });

    render(<StartOnboarding />);

    const saveButton = screen.getByTestId('mock-submit-confirm');
    fireEvent.click(saveButton);

    await waitFor(() =>
      expect(makeRequest).toHaveBeenCalledWith(
        expect.objectContaining({
          method: 'POST',
          endpoints: '/api/intake-form',
        })
      )
    );
  });

  test('Submit non-200 → error toast (no confirm dialog)', () => {
    render(<StartOnboarding />);

    // Ensure confirm dialog is not present
    expect(screen.queryByTestId('mock-submit-confirm')).not.toBeInTheDocument();
  });

  test('Cancel confirm with trackingId → re-fetches and sets data', async () => {
    render(<StartOnboarding />);

    const cancelButton = screen.getByTestId('mock-cancel-confirm');
    fireEvent.click(cancelButton);

    await waitFor(() => {
      expect(makeRequest).toHaveBeenCalled();
    });
  });
});
