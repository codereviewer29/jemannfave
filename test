// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/src/setupTests.ts'],
  modulePathIgnorePatterns: ['<rootDir>/dist/'],
  transform: {
    '^.+\\.(css|styl|less|sass|scss)$': 'jest-css-modules-transform',
  },
  transformIgnorePatterns: ['node_modules/(?!(@mui)/)'],
  testPathIgnorePatterns: ['<rootDir>/src/buildInventory/*'],
  coveragePathIgnorePatterns: ['<rootDir>/src/buildInventory/*'],
  moduleNameMapper: {
    // ✅ map both package names you’ve shown
    '^@wf/react-library$': '<rootDir>/src/__mocks__/@wf/react-library.tsx',
    '^qf/react-library$': '<rootDir>/src/__mocks__/qf/react-library.tsx',
    // style stubs (if you don’t already have them)
    '\\.(css|scss)$': '<rootDir>/src/test-utils/styleStub.js',
  },
};

import React from 'react';

export const useAppGlobalState = () => ({ getToken: () => 'test-token' });
export const useConfig = () => ({ apiBaseUrl: 'http://localhost', header: { appName: 'App' } });

// Optional: some code imports Template from @wf/react-library
export const Template = ({ config, children }: { config?: any; children?: React.ReactNode }) => (
  <div data-testid="template-mock">
    <div data-testid="header">{config?.header?.appName ?? 'App'}</div>
    {children}
  </div>
);

import React from 'react';

export const useAppGlobalState = () => ({ getToken: () => 'test-token' });
export const useConfig = () => ({ apiBaseUrl: 'http://localhost', header: { appName: 'App' } });

export const Template = ({ config, children }: { config?: any; children?: React.ReactNode }) => (
  <div data-testid="template-mock">
    <div data-testid="header">{config?.header?.appName ?? 'App'}</div>
    {children}
  </div>
);
module.exports = {};

import '@testing-library/jest-dom';

// quieten react act warnings if you like
const orig = console.error;
console.error = (...args: any[]) => {
  if (/ReactDOMTestUtils\.act is deprecated/i.test(String(args[0]))) return;
  orig.call(console, ...args);
};

// if needed by some components:
if (!window.scrollTo) (window as any).scrollTo = () => {};
