import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import ProvisionLogs from './Provision-logs';

// Mock the child exactly as imported by the component
jest.mock('./provision-logs-template', () => ({
  __esModule: true,
  default: ({ logType }: { logType: string }) => (
    <div data-testid="logs-template">{logType}</div>
  ),
}));

// Derive the exact prop type of the provisioningLogs prop
type ProvisioningLogsProps = React.ComponentProps<
  typeof ProvisionLogs
>['provisioningLogs'];

// Helper that returns a clearly nonâ€‘empty object (so Object.keys(...) > 0)
function makeLogs(overall: 'success' | 'failure'): ProvisioningLogsProps {
  return {
    overall_status: overall,
    validation_results: {
      gcpapp_validation:     { status: 'ok', details: [] },
      gcpdm_validation:      { status: 'ok', details: [] },
      github_repos_validation:{ status: 'ok', details: [] },
      secondary_ranges_validation: { status: 'ok', details: [] },
      workspace_validation:  { status: 'ok', details: [] },
    },
  };
}

describe('ProvisionLogs', () => {
  test('renders empty state when no logs', () => {
    // explicitly pass undefined to exercise the early-return branch
    render(<ProvisionLogs provisioningLogs={undefined} />);

    expect(
      screen.getByText(/no provisioning logs available/i)
    ).toBeInTheDocument();
    expect(screen.queryByTestId('logs-template')).not.toBeInTheDocument();
  });

  test('shows overall status "Success" in green by default (APP tab active)', () => {
    render(<ProvisionLogs provisioningLogs={makeLogs('success')} />);

    // label exists
    expect(screen.getByText(/overall status/i)).toBeInTheDocument();

    // value text (component capitalizes first letter)
    const statusValue = screen.getByText(/success/i);
    expect(statusValue).toBeInTheDocument();

    // sx inline style sets the color
    expect(statusValue).toHaveStyle({ color: 'green' });

    // APP tab is active initially -> child template shows APP label
    expect(screen.getByTestId('logs-template')).toHaveTextContent(
      /gcp app validation logs/i
    );
  });

  test('switches to CDM tab and renders CDM template', () => {
    render(<ProvisionLogs provisioningLogs={makeLogs('success')} />);

    // Click the CDM tab button as it appears in the markup
    fireEvent.click(
      screen.getByRole('button', { name: /gcp cdm validation logs/i })
    );

    // Now the mocked child should show the CDM label
    expect(screen.getByTestId('logs-template')).toHaveTextContent(
      /gcp cdm validation logs/i
    );
  });

  test('shows overall status "Failure" in red when overall_status=failure', () => {
    render(<ProvisionLogs provisioningLogs={makeLogs('failure')} />);

    const statusValue = screen.getByText(/failure/i);
    expect(statusValue).toBeInTheDocument();
    expect(statusValue).toHaveStyle({ color: 'red' });
  });
});
