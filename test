// src/services/__tests__/gcpIntakeInboxService.test.ts
import gcpIntakeInboxService from '../gcpIntakeInboxService';

// Mock api client (why: avoid real HTTP)
const apiClientMock = jest.fn();
jest.mock('../../apiClient', () => ({
  __esModule: true,
  default: (...args: any[]) => (apiClientMock as any)(...args),
}));

describe('gcpIntakeInboxService.getAllGCPIntakeRequests', () => {
  const envA = { API_BASE_URL: 'https://api.example.test' };
  const envB = { API_BASE_URL: 'http://localhost:3000' };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('builds the HttpRequestModel and returns apiClient result (envA)', async () => {
    const payload = [{ id: 1 }, { id: 2 }];
    apiClientMock.mockResolvedValueOnce(payload);

    const out = await gcpIntakeInboxService.getAllGCPIntakeRequests(envA);

    expect(apiClientMock).toHaveBeenCalledTimes(1);
    expect(apiClientMock).toHaveBeenCalledWith({
      endpoints: `${envA.API_BASE_URL}/api/inbox`,
      method: 'GET',
    });
    expect(out).toBe(payload);
  });

  it('uses the provided base URL (envB)', async () => {
    apiClientMock.mockResolvedValueOnce({ ok: true });

    await gcpIntakeInboxService.getAllGCPIntakeRequests(envB);

    expect(apiClientMock).toHaveBeenCalledWith({
      endpoints: `${envB.API_BASE_URL}/api/inbox`,
      method: 'GET',
    });
  });

  it('propagates apiClient error', async () => {
    const err = new Error('network down');
    apiClientMock.mockRejectedValueOnce(err);

    await expect(
      gcpIntakeInboxService.getAllGCPIntakeRequests(envA),
    ).rejects.toThrow('network down');

    expect(apiClientMock).toHaveBeenCalledWith({
      endpoints: `${envA.API_BASE_URL}/api/inbox`,
      method: 'GET',
    });
  });
});
