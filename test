import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import SafeRoomIntakeForm from './saferoomIntakeForm';

/* ---------------- Mock FormContext ---------------- */
// ⚠️ IMPORTANT: path here must match the import in saferoomIntakeForm.tsx
jest.mock('./FormContext', () => {
  const React = require('react') as typeof import('react');
  const Ctx: any = React.createContext(null);

  return {
    __esModule: true,
    FormContext: Ctx,
    useFormContext: () => {
      const v = React.useContext(Ctx);
      if (!v) throw new Error('useFormContext used outside Provider in test');
      return v;
    },
  };
});

// Pull mocked context back out (instead of import → avoids TS error)
const { FormContext: Ctx } = jest.requireMock('./FormContext');

/* ---------------- Helpers ---------------- */

// Testing Library’s TextMatch type
type TextMatch = Parameters<typeof screen.getByLabelText>[0];

// Open a MUI Select by label
const openSelectByLabel = (label: TextMatch) => {
  const input = screen.getByLabelText(label, { selector: 'input' });
  fireEvent.mouseDown(input);
};

// Build Provider with safe default formData
function withForm(overrides?: Partial<any>) {
  const baseFormData: any = {
    cdpDetails: { versionCDPRequired: '' }, // used in useEffect
    safeRoomDetails: { dataLoadRequired: '' }, // bound to the Select
    ...(overrides || {}),
  };

  // supports object + functional updater forms
  const setFormData = jest.fn((updater: any) => {
    if (typeof updater === 'function') {
      Object.assign(baseFormData, updater(baseFormData));
    } else {
      Object.assign(baseFormData, updater);
    }
  });

  const value = {
    formData: baseFormData,
    setFormData,
    requiredFields: [],
    resetFormData: jest.fn(),
  };

  const Provider = ({ children }: { children: React.ReactNode }) => (
    <Ctx.Provider value={value}>{children}</Ctx.Provider>
  );

  return { Provider, setFormData, formData: baseFormData };
}

/* ---------------- Tests ---------------- */

describe('SafeRoomIntakeForm', () => {
  test('renders overview text and select input', () => {
    const { Provider } = withForm();
    render(
      <Provider>
        <SafeRoomIntakeForm validationErrors={{}} />
      </Provider>
    );

    expect(screen.getByText(/SafeRoom Overview/i)).toBeInTheDocument();
    expect(
      screen.getByLabelText(/Select the SafeRoom Data Load Capability/i)
    ).toBeInTheDocument();
  });

  test('allows selecting Cloud Storage', () => {
    const { Provider, setFormData } = withForm();
    render(
      <Provider>
        <SafeRoomIntakeForm validationErrors={{}} />
      </Provider>
    );

    openSelectByLabel(/Select the SafeRoom Data Load Capability/i);
    fireEvent.click(screen.getByText(/Cloud Storage/i));

    expect(setFormData).toHaveBeenCalled();
  });

  test('allows selecting Big Query', () => {
    const { Provider, setFormData } = withForm();
    render(
      <Provider>
        <SafeRoomIntakeForm validationErrors={{}} />
      </Provider>
    );

    openSelectByLabel(/Select the SafeRoom Data Load Capability/i);
    fireEvent.click(screen.getByText(/Big Query/i));

    expect(setFormData).toHaveBeenCalled();
  });

  test('shows validation error when provided', () => {
    const { Provider } = withForm({ safeRoomDetails: { dataLoadRequired: '' } });
    render(
      <Provider>
        <SafeRoomIntakeForm
          validationErrors={{ dataLoadRequired: 'Required field' }}
        />
      </Provider>
    );

    expect(screen.getByText(/Required field/i)).toBeInTheDocument();
  });
});
