// src/sideNavbar/boarding/startOnboarding.test.tsx
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';

/* ─────────────────────────── stubs (keep DOM small) ────────────────────────── */
// These never read FormContext so they won't crash.
jest.mock('../applicationDetails', () => () => <div data-testid="app-details" />);
jest.mock('../componentsDetails', () => () => <div data-testid="components-details" />);
jest.mock('../intake-components/guidelinesIntakeForm', () => () => <div data-testid="guidelines" />);

// Dialogs used by StartOnboarding: respect their `open` prop so tests can assert visibility.
jest.mock('../intake-components/cancelOnboarding', () => (props: any) =>
  props.open ? (
    <button data-testid="dlg-cancel-confirm" onClick={props.handleConfirmCancel} />
  ) : null
);
jest.mock('../intake-components/confirmationOnboarding', () => (props: any) =>
  props.open ? (
    <button data-testid="dlg-submit-confirm" onClick={props.handleConfirmSubmit} />
  ) : null
);

// Top nav (avoid pulling hooks/logic)
jest.mock('../../home/CustomNavigation', () => () => <nav data-testid="nav" />);

/* ─────────────────────────── service + router mocks ────────────────────────── */
const makeRequest = jest.fn();
jest.mock('../../services/useApiService', () => ({
  __esModule: true,
  default: () => ({ makeRequest }),
}));

const navigateMock = jest.fn();
let paramsMock: Record<string, string> | undefined;

jest.mock('react-router-dom', () => ({
  __esModule: true,
  useNavigate: () => navigateMock,
  useParams: () => paramsMock ?? {},
  Link: ({ to, children }: any) => <a href={typeof to === 'string' ? to : '/'}>{children}</a>,
}));

/* ─────────────────────────── FormContext mock ──────────────────────────────── */
const setFormDataMock = jest.fn();
const resetFormDataMock = jest.fn();
const requiredFieldsMock: string[] = [];

const baseFormData = {
  trackingStatus: '',
  appDetails: {},
  applicationDetails: {},   // keep both keys present, component reads these
  cdmNextDetails: {},
};

jest.mock('../FormContext', () => ({
  __esModule: true,
  useFormContext: () => ({
    formData: baseFormData,
    setFormData: setFormDataMock,
    resetFormData: resetFormDataMock,
    requiredFields: requiredFieldsMock,
    initialFormData: baseFormData,
  }),
}));

/* ─────────────────────────── SUT ──────────────────────────────────────────── */
import StartOnboarding from './startOnboarding';

/* helper */
const click = (el: HTMLElement) => fireEvent.click(el);

describe('StartOnboarding (lite)', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    paramsMock = undefined; // default: no trackingId
    (baseFormData as any).trackingStatus = '';
  });

  test('mount without trackingId → calls reset and shows basic UI', () => {
    render(<StartOnboarding />);

    expect(resetFormDataMock).toHaveBeenCalled();

    // header present (keep simple so DOM changes don’t break the test)
    expect(screen.getByText(/GCP Onboarding Form/i)).toBeInTheDocument();

    // default tab (our stub)
    expect(screen.getByTestId('app-details')).toBeInTheDocument();
  });

  test('mount with trackingId → performs GET for intake form', async () => {
    paramsMock = { trackingId: '123' };
    makeRequest.mockResolvedValueOnce({ data: { foo: 'bar' }, status: 200 });

    render(<StartOnboarding />);

    await waitFor(() => expect(makeRequest).toHaveBeenCalled());
    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({
        method: 'GET',
        // your code builds `/api/intake-form?intakeFormTrackingId=123`
        endpoints: expect.stringMatching(/\/api\/intake-form\?intakeFormTrackingId=123/),
        responseType: 'json',
      })
    );
  });

  test('Save → POST then navigates to /gcpOnboarding/:id', async () => {
    makeRequest.mockResolvedValueOnce({ data: { intakeFormTrackingId: 987 }, status: 200 });

    render(<StartOnboarding />);
    click(screen.getByRole('button', { name: /Save/i }));

    await waitFor(() => expect(makeRequest).toHaveBeenCalled());
    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({
        method: 'POST',
        // accept with or without trailing slash
        endpoints: expect.stringMatching(/^\/api\/intake-form\/?$/),
        responseType: 'json',
        body: expect.any(Object),
      })
    );

    expect(navigateMock).toHaveBeenCalledWith('/gcpOnboarding/987');
  });

  test('Submit non-200 → shows an error alert (confirm dialog not shown)', async () => {
    // First click opens confirm dialog (component calls formSubmit inside)
    makeRequest.mockRejectedValueOnce(new Error('boom'));

    render(<StartOnboarding />);
    click(screen.getByRole('button', { name: /Submit/i }));

    await waitFor(() => expect(makeRequest).toHaveBeenCalled());
    // confirm dialog should NOT be visible in the error path
    expect(screen.queryByTestId('dlg-submit-confirm')).not.toBeInTheDocument();
  });

  test('buttons disabled when trackingStatus is "Completed"', () => {
    (baseFormData as any).trackingStatus = 'Completed';

    render(<StartOnboarding />);
    expect(screen.getByRole('button', { name: /Save/i })).toBeDisabled();
    expect(screen.getByRole('button', { name: /Submit/i })).toBeDisabled();
  });

  test('tabs switch content (stubs)', () => {
    render(<StartOnboarding />);

    // default tab is Application
    expect(screen.getByTestId('app-details')).toBeInTheDocument();

    // switch to Component Details
    fireEvent.click(screen.getByRole('button', { name: /Component Details/i }));
    expect(screen.getByTestId('components-details')).toBeInTheDocument();

    // switch to Guide Lines
    fireEvent.click(screen.getByRole('button', { name: /Guide Lines/i }));
    expect(screen.getByTestId('guidelines')).toBeInTheDocument();
  });

  test('Cancel confirm without trackingId → resets to initialFormData', () => {
    render(<StartOnboarding />);

    // Page "Cancel" opens dialog; our stub shows a button only when `open` is true.
    fireEvent.click(screen.getByRole('button', { name: /Cancel/i }));

    // click confirm inside dialog
    fireEvent.click(screen.getByTestId('dlg-cancel-confirm'));

    expect(setFormDataMock).toHaveBeenCalledWith(baseFormData);
  });
});
