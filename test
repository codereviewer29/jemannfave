// src/provision/gcp-infra-setup.test.tsx
import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import GCPInfraSetup from './gcp-infra-setup';

// ---- shared mocks -------------------------------------------------

// window.open (used by a couple of <Link/>s)
const openSpy = jest.spyOn(window, 'open').mockImplementation(() => null as any);

// API hook: component imports from "./services/useApiService"
const makeRequestMock = jest.fn();
jest.mock('./services/useApiService', () => ({
  __esModule: true,
  default: () => makeRequestMock,
}));

// react-router
jest.mock('react-router-dom', () => {
  const real = jest.requireActual('react-router-dom');
  return {
    ...real,
    useParams: () => ({ appid: 'abc-999', environment: 'dev' }),
    useNavigate: () => jest.fn(),
  };
});

// Provision context (tokens used in POST body)
jest.mock('./ProvisionContext', () => ({
  __esModule: true,
  useProvisionContext: () => ({
    provisioningData: {
      githubToken: 'ghp_token',
      terraformToken: 'tf_token',
    },
  }),
}));

// ---- helpers ------------------------------------------------------

function renderPage() {
  render(
    <GCPInfraSetup
      appid="abc-999"
      environment="dev"
      completedTabs={[]}
      setCompletedTabs={jest.fn()}
      tabIndex={2}
    />
  );
}

const envParams = {
  env_params: {
    vault_password: 'Abcdef12!',
    servicenowsupportgroup: 'svc-group',
    requestereamil: 'req@corp.com', // spelling matches component interface
    app_repo_name: 'corp-abc',
    app_branch_name: 'main',
    app_project_id: 'prj-123',
    app_notification_channel: 'chan-a',
    saferoom_repo_name: 'corp-abc',
    saferoom_branch_name: 'main',
    saferoom_project_id: 'sr-456',
    saferoom_notification_channel: 'safe-chan',
  },
};

// Utility to prime the GET
function mockGetOk(params = envParams) {
  makeRequestMock.mockResolvedValueOnce({ data: params });
}

// Utility to prime the POST
function mockPost(result: any, status = 200) {
  makeRequestMock.mockResolvedValueOnce({ data: result, status });
}

// Make matchers a little looser & resilient
const calledWithGet = () =>
  expect(makeRequestMock).toHaveBeenCalledWith(
    expect.objectContaining({
      method: 'GET',
      endPoints: expect.stringMatching(/get-env-params/i),
    })
  );

const calledTimes = (n: number) =>
  waitFor(() => expect(makeRequestMock).toHaveBeenCalledTimes(n));

// ---- tests --------------------------------------------------------

afterEach(() => {
  makeRequestMock.mockReset();
});

afterAll(() => {
  openSpy.mockRestore();
});

describe('GCPInfraSetup', () => {
  test('loads existing env params (GET) and renders the form with values', async () => {
    mockGetOk(); // 1st call â†’ GET
    renderPage();

    // wait for GET to be sent
    await calledTimes(1);
    await calledWithGet();

    // and rendered values appear
    expect(await screen.findByLabelText(/vault password/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/repo name/i)).toHaveValue(envParams.env_params.app_repo_name);
    expect(screen.getByLabelText(/project id/i)).toHaveValue(envParams.env_params.app_project_id);
  });

  test('clicking "Build GCP Infrastructure" posts env params and marks tab complete', async () => {
    // GET -> populate form
    mockGetOk();
    // POST -> success
    mockPost({ log_output: ['OK'] }, 200);

    renderPage();

    // ensure GET happened
    await calledTimes(1);
    await calledWithGet();

    // click the action button -> triggers POST
    fireEvent.click(screen.getByRole('button', { name: /build gcp infrastructure/i }));

    // GET + POST
    await calledTimes(2);

    // last call must be the POST with tokens and env_params
    const last = makeRequestMock.mock.calls.at(-1)![0];
    expect(last).toEqual(
      expect.objectContaining({
        method: 'POST',
        endPoints: expect.stringMatching(/tab=gcpapp/i),
        body: expect.objectContaining({
          env_params: expect.objectContaining({
            app_project_id: envParams.env_params.app_project_id,
          }),
          github_token: 'ghp_token',
          terraform_token: 'tf_token',
        }),
      })
    );

    // success logs region appears
    expect(await screen.findByText(/logs/i)).toBeInTheDocument();
  });

  test('shows an error toast if POST returns non-200', async () => {
    mockGetOk();
    // non-200 result
    mockPost({ log_output: [], message: 'error' }, 500);

    renderPage();

    await calledTimes(1);
    fireEvent.click(screen.getByRole('button', { name: /build gcp infrastructure/i }));

    await calledTimes(2);

    // error toast shows
    expect(await screen.findByRole('alert')).toHaveTextContent(/error has occurred/i);
  });

  test('shows an error toast if POST rejects (catch path)', async () => {
    mockGetOk();
    // reject the POST
    makeRequestMock.mockRejectedValueOnce(new Error('boom'));

    renderPage();

    await calledTimes(1);
    fireEvent.click(screen.getByRole('button', { name: /build gcp infrastructure/i }));

    // GET + rejected POST still counts as 2 calls
    await calledTimes(2);

    expect(await screen.findByRole('alert')).toHaveTextContent(/error has occurred/i);
  });

  test('validation prevents POST and shows "required fields" toast when required data is missing', async () => {
    // Return empty env params so validation fails
    mockGetOk({ env_params: {} as any });

    renderPage();

    await calledTimes(1);

    fireEvent.click(screen.getByRole('button', { name: /build gcp infrastructure/i }));

    // Still only the GET was called
    await calledTimes(1);

    // Toast with validation message appears
    expect(await screen.findByRole('alert')).toHaveTextContent(/required/i);
  });

  test('vault password visibility toggle switches type', async () => {
    mockGetOk();
    renderPage();

    await calledTimes(1);

    const pwd = screen.getByLabelText(/vault password/i) as HTMLInputElement;
    const toggle = screen.getByRole('button', { name: /toggle password visibility/i });

    // initial: password
    expect(pwd.type).toBe('password');

    fireEvent.click(toggle);
    expect(pwd.type).toBe('text');

    fireEvent.click(toggle);
    expect(pwd.type).toBe('password');
  });
});
