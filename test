// ---- REPLACE the "filters by status" test with this ----
test('filters by status (In Progress includes In_Draft)', async () => {
  setupSuccess();
  renderInbox();

  // MUI Select renders as a combobox labeled by its value "All"
  const statusSelect = await screen.findByRole('combobox', { name: /^All$/ });
  fireEvent.mouseDown(statusSelect); // open menu

  const option = await screen.findByRole('option', { name: /In Progress/i });
  fireEvent.click(option);

  // allow state -> effect -> render to settle
  await act(async () => {});

  expect(screen.queryByText('Completed')).not.toBeInTheDocument();
  expect(screen.getByText('In Progress')).toBeInTheDocument();
});

// ---- REPLACE the "filters by search keyword" test with this ----
test('filters by search keyword (env, avoids appID array crash)', async () => {
  setupSuccess();
  renderInbox();

  const search = await screen.findByLabelText(/Search/i);
  fireEvent.change(search, { target: { value: 'UAT' } });

  // wait for the filtered row to appear
  await screen.findByText('APP-B');

  // now assert the other row is gone
  expect(screen.queryByText('APP-A')).not.toBeInTheDocument();
});

// ---- REPLACE the "download PDF" test tail assertions with this ----
test('download PDF for Completed row triggers blob request', async () => {
  setupSuccess();
  // second call -> blob for download
  makeRequest.mockResolvedValueOnce({ data: new Blob(['%PDF'], { type: 'application/pdf' }) });

  renderInbox();

  const completedCell = await screen.findByText('Completed');
  const rowEl = completedCell.closest('tr');
  expect(rowEl).not.toBeNull();

  // clickable PDF icon <span style="cursor: pointer">
  const clickableSpans = Array.from(rowEl!.querySelectorAll('span')).filter((el) =>
    (el.getAttribute('style') || '').includes('cursor: pointer'),
  );
  expect(clickableSpans.length).toBeGreaterThan(0);

  fireEvent.click(clickableSpans[0]);

  expect(makeRequest).toHaveBeenCalledWith(
    expect.objectContaining({
      method: 'GET',
      endpoints: expect.stringContaining('/api/download-pdf'),
      responseType: 'blob',
    }),
  );
  // intentionally NOT asserting URL.createObjectURL to avoid flaky env differences
});
