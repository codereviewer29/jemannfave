// -------------------------------------------------------------
// 6) Import the real component under test
// -------------------------------------------------------------
import ApplicationDetails from './applicationDetails';

// -------------------------------------------------------------
// 7) Render helper (wrap with provider and seed form state)
// -------------------------------------------------------------
function render(
  uiProps?: Partial<Record<string, any>>,
  seed?: Partial<any>
) {
  // default categories for ART section â€” can be empty {}
  const defaultArtRequestDetails: Record<string, Array<{ label: string; value: string; isCustom?: boolean }>> = {
    Sandbox: [],
    DEV1: [],
    DEV2: [],
    SIT: [],
    UAT: [],
    PERF: [],
    Prep: [],
    Prod: [],
  };

  const initialForm = {
    applicationDetails: {
      applicationID: '',
      applicationName: '',
      requesterName: '',
      requesterEmail: '',
      summary: '',
      description: '',
      lobDomain: '',
      environmentsNeeded: [] as string[],
      timelineSandbox: null,
      timelineNonProd: null,
      timelineProd: null,
      isNewApp: 'new',
      application: '',
      appLinkInBAM: '',
      beamsStatus: '',
      dataSource: '',
      dataFormat: [] as string[],
      dataSLATime: '',
      dataClassification: '',
      panCardDataInScope: '',
      panCardDetails: '',
      sarUarData: '',
      internationalUsers: '',
      externalIngress: '',
      externalIngressDetails: '',
      serviceNowCI: '',
      technicalConstraints: '',
      reviewedWithCIO: '',
      reviewedWithArchitect: '',
      requiresCloudReview: '',
      // >>> THE IMPORTANT LINE: never undefined
      artRequestDetails: {
        ...defaultArtRequestDetails,
        ...(seed?.applicationDetails?.artRequestDetails ?? {}),
      },
      // keep this spread LAST so seed can override other fields
      ...seed?.applicationDetails,
    },
  };

  const Wrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [formData, setFormData] = React.useState(initialForm);
    return (
      <TestFormContext.Provider value={{ formData, setFormData }}>
        {children}
      </TestFormContext.Provider>
    );
  };

  const validationErrors = seed?.validationErrors ?? {};
  const setValidationErrors = jest.fn();

  const utils = rtlRender(
    <Wrapper>
      <ApplicationDetails
        validationErrors={validationErrors}
        setValidationErrors={setValidationErrors}
        {...uiProps}
      />
    </Wrapper>
  );

  return {
    ...utils,
    setValidationErrors,
  };
}
