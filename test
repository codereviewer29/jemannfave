// src/sideNavbar/boarding/intake-components/saferoomIntakeForm.test.tsx

// --- 1) Router hooks MUST be mocked BEFORE importing the component ---
jest.mock('react-router-dom', () => ({
  // keep only what this component needs
  useSubmit: () => jest.fn(),
  useNavigate: () => jest.fn(),
}));

import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

// --- 2) Form context mock ---
const setFormData = jest.fn();
const useFormContextMock = jest.fn();

jest.mock('../FormContext', () => ({
  useFormContext: () => useFormContextMock(),
}));

// --- 3) MUI + icon stubs (minimal & a11y-friendly) ---
jest.mock('@mui/material', () => {
  const React = require('react');
  const Pass = ({ children }: { children: React.ReactNode }) => <>{children}</>;
  const Box = Pass;
  const Grid = Pass;
  const FormControl = Pass;
  const InputLabel = ({ children }: { children: React.ReactNode }) => <div>{children}</div>;
  const MenuItem = ({ children }: { children: React.ReactNode }) => <>{children}</>;
  const Tooltip = ({ title, children }: any) => (
    <div>
      <div data-testid="tooltip-title">{title}</div>
      {children}
    </div>
  );

  const Select = ({ label, id, name, value, onChange, children, disabled }: any) => {
    const options = React.Children.toArray(children).map((n: any, i: number) => (
      <option key={i} value={n?.props?.value}>
        {n?.props?.children}
      </option>
    ));
    return (
      <label htmlFor={id}>
        {label}
        <select
          id={id}
          name={name}
          aria-label={label}
          value={value ?? ''}
          disabled={disabled}
          onChange={(e) =>
            onChange?.({ target: { name: e.currentTarget.name, value: e.currentTarget.value } })
          }
        >
          {options}
        </select>
      </label>
    );
  };

  return {
    __esModule: true,
    Box,
    Grid,
    FormControl,
    InputLabel,
    MenuItem,
    Select,
    Tooltip,
  };
});

jest.mock('@mui/icons-material/Info', () => ({
  __esModule: true,
  default: () => <span data-testid="info-icon" />,
}));

// --- 4) Import SUT AFTER mocks ---
import SaferoomIntakeForm from './saferoomIntakeForm';

// --- Helpers ---
const baseFormData = {
  cdpDetails: { versionCDPRequired: '' },
  safeRoomDetails: { dataLoadRequired: 'Cloud Storage' },
};

function setup(formData = baseFormData) {
  setFormData.mockClear();
  useFormContextMock.mockReturnValue({ formData, setFormData, isReadOnly: false });

  const user = userEvent.setup();
  render(<SaferoomIntakeForm validationErrors={{}} />);

  const combo = screen.getByRole('combobox', {
    name: /select the saferoom data load capability/i,
  });
  return { user, combo, formData };
}

// --- Tests ---
describe('SaferoomIntakeForm', () => {
  test('renders overview text, section header, tooltip and icon', () => {
    setup();
    expect(screen.getByRole('heading', { name: /saferoom overview/i })).toBeInTheDocument();
    expect(
      screen.getByText(/please select the required data load capability for saferoom/i)
    ).toBeInTheDocument();
    expect(screen.getByTestId('tooltip-title')).toBeInTheDocument();
    expect(screen.getByTestId('info-icon')).toBeInTheDocument();
  });

  test('renders select with initial value and options', () => {
    const { combo } = setup();
    expect(combo).toHaveDisplayValue(/cloud storage/i);
    expect(screen.getAllByRole('option').map((o) => o.textContent)).toEqual([
      'Cloud Storage',
      'Big Query',
    ]);
  });

  test('updates nested formData on change', async () => {
    const { user, combo, formData } = setup();
    await user.selectOptions(combo, 'Big Query');
    expect(setFormData).toHaveBeenCalledTimes(1);
    expect(setFormData).toHaveBeenCalledWith({
      ...formData,
      safeRoomDetails: { ...formData.safeRoomDetails, dataLoadRequired: 'Big Query' },
    });
  });

  test('respects existing value when starting with Big Query', () => {
    setup({ ...baseFormData, safeRoomDetails: { dataLoadRequired: 'Big Query' } });
    expect(
      screen.getByRole('combobox', { name: /select the saferoom data load capability/i })
    ).toHaveDisplayValue(/big query/i);
  });
});
