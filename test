// ====================================================================
// File: src/home/Home.test.tsx
// ====================================================================
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';
import Home from './Home';

// ---- Only mock the pieces we actually need ----
const navigateMock = jest.fn();
jest.mock('react-router-dom', () => {
  const actual = jest.requireActual('react-router-dom');
  return {
    __esModule: true,
    ...actual,
    useNavigate: () => navigateMock, // spy navigation
    Link: ({ children, ...p }: any) => <a {...p}>{children}</a>, // simple anchor
  };
});

jest.mock('@wf/react-library', () => ({
  __esModule: true,
  useConfig: () => ({ env: 'test' }),
}));

jest.mock('../services/useApiService', () => ({
  __esModule: true,
  default: () => ({ makeRequest: jest.fn() }),
}));

jest.mock('./CustomNavigation', () => ({
  __esModule: true,
  default: () => <nav data-testid="custom-nav">nav</nav>,
}));

function renderWithRouter(ui: React.ReactElement) {
  return render(<MemoryRouter>{ui}</MemoryRouter>);
}

const getCardBtn = (title: RegExp) =>
  // CardActionArea renders as a button (role="button")
  screen.getByRole('button', { name: title });

describe('Home', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders intro content and all cards', () => {
    renderWithRouter(<Home />);

    // intro
    expect(
      screen.getByText(/Welcome to the GCP Tenant Environment Provisioning homepage/i),
    ).toBeInTheDocument();

    // titles + descriptions
    expect(screen.getByText(/Launch Your Journey in GCP/i)).toBeInTheDocument();
    expect(
      screen.getByText(/GCP Environment Provision Request/i),
    ).toBeInTheDocument();

    expect(screen.getByText(/GCP Environment Provisioning/i)).toBeInTheDocument();
    expect(screen.getByText(/Provision GCP Infrastructure/i)).toBeInTheDocument();

    expect(screen.getByText(/Environment Build Inventory/i)).toBeInTheDocument();
    expect(
      screen.getByText(/Explore details of environment build inventory/i),
    ).toBeInTheDocument();

    // one icon per card
    expect(screen.getAllByAltText('icon')).toHaveLength(3);

    // navbar shown
    expect(screen.getByTestId('custom-nav')).toBeInTheDocument();
  });

  test('clicking first card navigates to /gcpOnboarding and sets active state', () => {
    renderWithRouter(<Home />);

    const card1 = getCardBtn(/Launch Your Journey in GCP/i);
    const card2 = getCardBtn(/GCP Environment Provisioning/i);
    const card3 = getCardBtn(/Environment Build Inventory/i);

    fireEvent.click(card1);

    expect(navigateMock).toHaveBeenCalledWith('/gcpOnboarding');
    // selected card has data-active attribute
    expect(card1).toHaveAttribute('data-active', '');
    expect(card2).not.toHaveAttribute('data-active');
    expect(card3).not.toHaveAttribute('data-active');
  });

  test('clicking second card navigates to /provision', () => {
    renderWithRouter(<Home />);
    fireEvent.click(getCardBtn(/GCP Environment Provisioning/i));
    expect(navigateMock).toHaveBeenCalledWith('/provision');
  });

  test('clicking third card navigates to /inventory-dashboard', () => {
    renderWithRouter(<Home />);
    fireEvent.click(getCardBtn(/Environment Build Inventory/i));
    expect(navigateMock).toHaveBeenCalledWith('/inventory-dashboard');
  });
});
