/**
 * @file gcp-infra-setup.test.tsx
 */

import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import GCPInfraSetup from './gcp-infra-setup';

// --- Mocks we control --------------------------------------------------------
const makeRequestMock = jest.fn();

// useApiService hook -> returns our makeRequest mock
jest.mock('../services/useApiService', () => ({
  __esModule: true,
  default: () => ({ makeRequest: makeRequestMock }),
}));

// Provision context – we only need tokens for the POST body
jest.mock('./ProvisionContext', () => ({
  __esModule: true,
  useProvisionContext: () => ({
    provisioningData: {
      githubToken: 'ghp_abc',
      terraformToken: 'tfp_def',
    },
  }),
}));

// Keep MUI icons-lite (avoid SVG noise)
jest.mock('@mui/icons-material/InfoOutlined', () => ({
  __esModule: true,
  default: () => <i data-testid="info-icon" />,
}));
jest.mock('@mui/icons-material/Visibility', () => ({
  __esModule: true,
  default: () => <i data-testid="vis-on" />,
}));
jest.mock('@mui/icons-material/VisibilityOff', () => ({
  __esModule: true,
  default: () => <i data-testid="vis-off" />,
}));

// Prevent real window.open from exploding the test
const openSpy = jest.spyOn(window, 'open').mockImplementation(() => null);

// -----------------------------------------------------------------------------
// Fixtures that match the component’s shape
const envParams = {
  vault_password: 'GoodP4ssword',
  servicenowsupportgroup: 'svc-group',
  requestemail: 'team@example.com',
  app_repo_name: 'corp-abc',
  app_branch_name: 'main',
  app_project_id: 'p-123',
  app_notification_channel: 'app-chan',
  saferoom_repo_name: 'corp-abc',
  saferoom_branch_name: 'main',
  saferoom_project_id: 's-456',
  saferoom_notification_channel: 'safe-chan',
};

function renderPage(overrides: Partial<React.ComponentProps<typeof GCPInfraSetup>> = {}) {
  const props = {
    appid: 'abc-999',
    environment: 'dev',
    completedTabs: [] as number[],
    setCompletedTabs: jest.fn(),
    tabIndex: 2,
    ...overrides,
  };

  return {
    ...props,
    ui: render(<GCPInfraSetup {...props} />),
  };
}

afterEach(() => {
  makeRequestMock.mockReset();
});

afterAll(() => {
  openSpy.mockRestore();
});

describe('GCPInfraSetup', () => {
  test('loads existing env params (GET) and renders the form with values', async () => {
    // 1st call: bootstrap GET
    makeRequestMock.mockResolvedValueOnce({ data: { env_params: envParams } });

    renderPage();

    // loading indicator appears then disappears
    // (the component uses <CircularProgress/> + "GCP App Infrastructure Setup running..." text later;
    // use a general wait for inputs)
    expect(await screen.findByLabelText(/Vault Password/i)).toBeInTheDocument();

    // the GET was issued with method GET (don’t over-specify endpoint string)
    await waitFor(() =>
      expect(makeRequestMock).toHaveBeenCalledWith(
        expect.objectContaining({ method: 'GET' })
      )
    );

    // a couple of fields should be pre-populated from GET data
    expect(screen.getByLabelText(/Repo Name/i)).toHaveValue(envParams.app_repo_name);
    expect(screen.getByLabelText(/Project ID/i)).toHaveValue(envParams.app_project_id);
    expect(screen.getByLabelText(/Email Address/i)).toHaveValue(envParams.requestemail);
  });

  test('shows helper text when vault password fails validation', async () => {
    makeRequestMock.mockResolvedValueOnce({ data: { env_params: envParams } });
    renderPage();

    const pwd = await screen.findByLabelText(/Vault Password/i);
    // Type an invalid password (no number, too short, etc.)
    fireEvent.change(pwd, { target: { value: 'short' } });

    // Component validates on change and toggles error + helper text
    expect(
      await screen.findByText(/Password must have 8\+ characters/i)
    ).toBeInTheDocument();
  });

  test('Build GCP Infrastructure: POST success shows logs and marks tab complete', async () => {
    // GET then POST
    makeRequestMock
      .mockResolvedValueOnce({ data: { env_params: envParams } }) // bootstrap GET
      .mockResolvedValueOnce({
        status: 200,
        data: { log_output: ['Create bucket - SUCCESS', 'Bind roles - SUCCESS'] },
      }); // POST success

    const { setCompletedTabs, tabIndex } = renderPage();

    // Click the action button
    const btn = await screen.findByRole('button', { name: /Build GCP Infrastructure/i });
    fireEvent.click(btn);

    // POST sent (again: do not assert exact URL, only method/body presence)
    await waitFor(() =>
      expect(makeRequestMock).toHaveBeenLastCalledWith(
        expect.objectContaining({
          method: 'POST',
          body: expect.objectContaining({
            env_params: expect.objectContaining({ app_project_id: envParams.app_project_id }),
            github_token: 'ghp_abc',
            terraform_token: 'tfp_def',
          }),
        })
      )
    );

    // Logs panel appears (we render each item)
    expect(await screen.findByText(/Create bucket - SUCCESS/i)).toBeInTheDocument();

    // "Next Step" hint is shown after logs
    expect(screen.getByText(/Next Step/i)).toBeInTheDocument();

    // Tab is marked complete
    expect(setCompletedTabs).toHaveBeenCalled();
    const updater = (setCompletedTabs as jest.Mock).mock.calls.at(-1)?.[0];
    // Call the updater to ensure it adds tabIndex
    const result = updater([0, 1]);
    expect(result).toEqual(expect.arrayContaining([tabIndex]));
  });

  test('Build GCP Infrastructure: POST failure opens toast with error message', async () => {
    // GET ok, POST non-200
    makeRequestMock
      .mockResolvedValueOnce({ data: { env_params: envParams } })
      .mockResolvedValueOnce({ status: 500, data: { log_output: [] } });

    renderPage();

    fireEvent.click(await screen.findByRole('button', { name: /Build GCP Infrastructure/i }));

    // An error toast (Snackbar + Alert) appears with our generic message
    // (we don’t rely on exact HTML — just detect the Alert role/text region)
    expect(
      await screen.findByText(/Error has occurred while building GCP App Infrastructure Setup/i)
    ).toBeInTheDocument();
  });
});
