import React from 'react';
import { render, screen } from '@testing-library/react';
import ProvisionLogsTemplate from './Provision-logs-template';

// --- Minimal icon mocks so we can assert which one shows ---
jest.mock('@mui/icons-material/CheckCircle', () => ({
  __esModule: true,
  default: (props: any) => <i data-testid="ok-icon" {...props} />,
}));
jest.mock('@mui/icons-material/Cancel', () => ({
  __esModule: true,
  default: (props: any) => <i data-testid="error-icon" {...props} />,
}));

// --- Type helpers (pull the exact prop shape from the component) ---
type Props = React.ComponentProps<typeof ProvisionLogsTemplate>;
type Logs = Props['provisioningLogs'];

// Factory: a complete, valid logs object we can tweak per test
function makeLogs(overall: 'success' | 'failure' = 'success'): Logs {
  return {
    overall_status: overall,
    validation_results: {
      gcppap_validation: {
        status: 'success',
        details: {
          project_id: 'proj-123',
          terraform_service_account: undefined, // should display "N/A"
        },
      },
      gcpdm_validation: {
        status: 'success',
        details: {},
      },
      github_repos_validation: {
        status: 'success',
        details: [],
      },
      secondary_ranges_validation: {
        status: 'success',
        details: { secondary_ranges_validation: [] },
      },
      workspace_validation: {
        status: 'success',
        details: [],
      },
      // sections the template checks by name
      // “Missing Roles” uses these arrays inside details:
      // - missing_additional_roles (string[])
      // - missing_grantable_roles (string[])
      // “Missing Services” uses: missing_services (string[])
      // “Project Creation Flags” uses: project_flags (Array<{flag_name, flag_value}>)
      // They’re part of gcpdm_validation details in your file, so keep them there:
      gcpdm_validation_extra: undefined as unknown as never, // (just to remind future readers)
    } as any,
  };
}

const renderTemplate = (partial?: Partial<Props>) => {
  const base: Props = {
    logType: 'GCP APP Validation Logs',
    provisioningLogs: makeLogs('success'),
    ...partial,
  };
  return render(<ProvisionLogsTemplate {...base} />);
};

describe('ProvisionLogsTemplate', () => {
  test('renders all section headings for APP logs', () => {
    renderTemplate();

    // Section titles / headings the template renders
    expect(
      screen.getByText(/GCP Validation/i)
    ).toBeInTheDocument();
    expect(
      screen.getByText(/GitHub Repos Validation/i)
    ).toBeInTheDocument();
    expect(
      screen.getByText(/Secondary Ranges Validation/i)
    ).toBeInTheDocument();
    expect(
      screen.getByText(/Workspace Validation/i)
    ).toBeInTheDocument();
    expect(
      screen.getByText(/Missing Roles/i)
    ).toBeInTheDocument();
    expect(
      screen.getByText(/Missing Services/i)
    ).toBeInTheDocument();
    expect(
      screen.getByText(/Project Creation Flags/i)
    ).toBeInTheDocument();

    // Because every section above is success in our factory,
    // we should see at least one "ok" icon and no "error" icon.
    expect(screen.getAllByTestId('ok-icon').length).toBeGreaterThan(0);
    expect(screen.queryByTestId('error-icon')).toBeNull();
  });

  test('shows GCP project details and uses "N/A" when service account is missing', () => {
    const logs = makeLogs('success');
    // GCP Validation details are in gcppap_validation.details in your component
    logs.validation_results.gcppap_validation.details = {
      project_id: 'abc-999',
      // terraform_service_account absent -> "N/A"
    };

    renderTemplate({ provisioningLogs: logs });

    expect(screen.getByText(/GCP APP Project ID/i)).toBeInTheDocument();
    expect(screen.getByText(/abc-999/i)).toBeInTheDocument();
    // text "Terraform Service Account:" followed by "N/A"
    expect(screen.getByText(/Terraform Service Account/i)).toBeInTheDocument();
    expect(screen.getByText(/N\/A/i)).toBeInTheDocument();
  });

  test('renders Missing Roles items and marks section as failure when lists have entries', () => {
    const logs = makeLogs('success');
    // The component reads “Missing Roles” from one validation’s details.
    // In your file that content is shown under a section named “Missing Roles”,
    // which uses arrays missing_additional_roles and missing_grantable_roles.
    (logs.validation_results as any).gcpdm_validation = {
      status: 'success',
      details: {
        missing_additional_roles: ['roles/logging.viewer', 'roles/storage.objectViewer'],
        missing_grantable_roles: ['roles/iam.serviceAccountUser'],
      },
    };

    renderTemplate({ provisioningLogs: logs });

    // We expect the list items to render
    expect(screen.getByText(/roles\/logging\.viewer/i)).toBeInTheDocument();
    expect(screen.getByText(/roles\/storage\.objectViewer/i)).toBeInTheDocument();
    expect(screen.getByText(/roles\/iam\.serviceAccountUser/i)).toBeInTheDocument();

    // That section becomes failure -> we should see at least one error icon now
    expect(screen.getByTestId('error-icon')).toBeInTheDocument();
  });

  test('renders Project Creation Flags as list items', () => {
    const logs = makeLogs('success');
    (logs.validation_results as any).gcpdm_validation = {
      status: 'success',
      details: {
        project_flags: [
          { flag_name: 'billingEnabled', flag_value: 'true' },
          { flag_name: 'orgPolicySet', flag_value: 'false' },
        ],
      },
    };

    renderTemplate({ provisioningLogs: logs });

    expect(screen.getByText(/billingEnabled\s*:\s*true/i)).toBeInTheDocument();
    expect(screen.getByText(/orgPolicySet\s*:\s*false/i)).toBeInTheDocument();
  });

  test('renders Secondary Ranges items', () => {
    const logs = makeLogs('success');
    logs.validation_results.secondary_ranges_validation = {
      status: 'failure',
      details: { secondary_ranges_validation: ['range-a', 'range-b'] },
    };

    renderTemplate({ provisioningLogs: logs });

    expect(screen.getByText(/range-a/i)).toBeInTheDocument();
    expect(screen.getByText(/range-b/i)).toBeInTheDocument();
    // failure -> error icon present
    expect(screen.getByTestId('error-icon')).toBeInTheDocument();
  });

  test('shows footer email when overall_status=failure', () => {
    const failing = makeLogs('failure');
    renderTemplate({ provisioningLogs: failing });

    // The footer paragraph shown only when overall failure is present
    expect(
      screen.getByText(/Please contact the Enablement Team/i)
    ).toBeInTheDocument();

    // The mailto anchor text from your file
    expect(
      screen.getByText(/CloudEnablement@wellsfargo\.com/i)
    ).toBeInTheDocument();
  });

  test('renders CDM log view when logType = "GCP CDM Validation Logs"', () => {
    const logs = makeLogs('success');
    renderTemplate({
      logType: 'GCP CDM Validation Logs',
      provisioningLogs: logs,
    });

    // We can still see shared section titles; this just confirms the template
    // renders correctly for the CDM variant.
    expect(
      screen.getByText(/GCP CDM Validation Logs/i)
    ).toBeInTheDocument();
  });
});
