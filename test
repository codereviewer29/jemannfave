// ====================================================================
// File: src/home/Home.test.tsx
// ====================================================================
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import Home from './Home';

// ---- Default-path MUI mocks ----
jest.mock('@mui/material/Box', () => ({
  __esModule: true,
  default: ({ children, ...rest }: any) => <div {...rest}>{children}</div>,
}));
jest.mock('@mui/material/Typography', () => ({
  __esModule: true,
  default: ({ children, ...rest }: any) => <div {...rest}>{children}</div>,
}));
jest.mock('@mui/material/Card', () => ({
  __esModule: true,
  default: ({ children, ...rest }: any) => (
    <div role="article" {...rest}>{children}</div>
  ),
}));
jest.mock('@mui/material/CardContent', () => ({
  __esModule: true,
  default: ({ children, ...rest }: any) => <div {...rest}>{children}</div>,
}));

// ---- MUI barrel mock (why: Home imports these from '@mui/material') ----
jest.mock('@mui/material', () => ({
  __esModule: true,
  CardActionArea: ({ children, onClick, ...rest }: any) => (
    <button type="button" onClick={onClick} {...rest}>{children}</button>
  ),
  Container: ({ children, ...rest }: any) => <div {...rest}>{children}</div>,
  Grid: ({ children, ...rest }: any) => <div {...rest}>{children}</div>,
}));

// Toolpad
jest.mock('@toolpad/core/PageContainer', () => ({
  __esModule: true,
  default: ({ children, ...rest }: any) => <div {...rest}>{children}</div>,
}));

// Router / Config / Service / CustomNavigation
const navigateMock = jest.fn();
jest.mock('react-router-dom', () => ({
  __esModule: true,
  useNavigate: () => navigateMock,
  Link: ({ children, ...p }: any) => <a {...p}>{children}</a>,
}));
jest.mock('@wf/react-library', () => ({
  __esModule: true,
  useConfig: () => ({ env: 'test' }),
}));
jest.mock('../services/useApiService', () => ({
  __esModule: true,
  default: () => ({ makeRequest: jest.fn() }),
}));
jest.mock('./CustomNavigation', () => ({
  __esModule: true,
  default: () => <nav data-testid="custom-nav">nav</nav>,
}));

// Helper
const getCardBtn = (title: RegExp) =>
  screen.getByRole('button', { name: title });

describe('Home', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders intro content and all cards', () => {
    render(<Home />);

    expect(
      screen.getByText(/Welcome to the GCP Tenant Environment Provisioning homepage/i),
    ).toBeInTheDocument();

    expect(screen.getByText(/Launch Your Journey in GCP/i)).toBeInTheDocument();
    expect(screen.getByText(/GCP Environment Provision Request/i)).toBeInTheDocument();

    expect(screen.getByText(/GCP Environment Provisioning/i)).toBeInTheDocument();
    expect(screen.getByText(/Provision GCP Infrastructure/i)).toBeInTheDocument();

    expect(screen.getByText(/Environment Build Inventory/i)).toBeInTheDocument();
    expect(
      screen.getByText(/Explore details of environment build inventory/i),
    ).toBeInTheDocument();

    expect(screen.getAllByAltText('icon')).toHaveLength(3);
    expect(screen.getByTestId('custom-nav')).toBeInTheDocument();
  });

  test('clicking first card navigates to /gcpOnboarding and marks it active only for that card', () => {
    render(<Home />);

    const card1 = getCardBtn(/Launch Your Journey in GCP/i);
    const card2 = getCardBtn(/GCP Environment Provisioning/i);
    const card3 = getCardBtn(/Environment Build Inventory/i);

    fireEvent.click(card1);

    expect(navigateMock).toHaveBeenCalledWith('/gcpOnboarding');
    expect(card1).toHaveAttribute('data-active', '');
    expect(card2).not.toHaveAttribute('data-active');
    expect(card3).not.toHaveAttribute('data-active');
  });

  test('clicking second card navigates to /provision', () => {
    render(<Home />);
    fireEvent.click(getCardBtn(/GCP Environment Provisioning/i));
    expect(navigateMock).toHaveBeenCalledWith('/provision');
  });

  test('clicking third card navigates to /inventory-dashboard', () => {
    render(<Home />);
    fireEvent.click(getCardBtn(/Environment Build Inventory/i));
    expect(navigateMock).toHaveBeenCalledWith('/inventory-dashboard');
  });
});
