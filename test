const parseApiDate = (s: string) => {
  // guard
  if (!s) return new Date('1970-01-01');
  // support both "08-05-25" and "08/05/25" just in case
  const parts = s.includes('-') ? s.split('-') : s.split('/');
  const [mm, dd, yy] = parts.map(Number);
  return new Date(2000 + yy, (mm ?? 1) - 1, dd ?? 1);
};

/** Format Date -> "Aug 5" (labels on x-axis) */
const formatLabel = (d: Date) =>
  d.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });

if (!filteredChartData.length) return;

  // Sort ascending by date so x-axis is leftâ†’right
  const sorted = [...filteredChartData].sort(
    (a, b) => parseApiDate(a.date).getTime() - parseApiDate(b.date).getTime()
  );

  // Labels directly from API dates
  const labels = sorted.map((item) => formatLabel(parseApiDate(item.date)));
  setChartLabels(labels);

  // Series aligned 1:1 with labels
  const fileCount = sorted.map((i) => i.filecount ?? 0);
  const avgFileSize = sorted.map((i) => i.avg_filesize_in_mb ?? 0);
  const avgTime = sorted.map((i) => i.avg_time_in_min ?? 0);
  const avgThroughput = sorted.map((i) => i.avg_throughput ?? 0);
