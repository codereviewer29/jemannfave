import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';

// ---- Router mocks (params + navigation) ----
const navigateMock = jest.fn();
jest.mock('react-router-dom', () => {
  const actual = jest.requireActual('react-router-dom');
  return {
    ...actual,
    // Your component reads these two params
    useParams: () => ({ appId: 'abc-999', environment: 'dev' }),
    useNavigate: () => navigateMock,
    // Let Link render a simple anchor so role="link" works
    Link: ({ children, ...rest }: any) => <a {...rest}>{children}</a>,
  };
});

// ---- Child components mocked (render lightweight placeholders) ----
jest.mock('../act-task-validation', () => ({
  __esModule: true,
  default: (props: any) => (
    <div data-testid="ActTaskValidation">ActTaskValidation</div>
  ),
}));

jest.mock('../gcp-infra-setup', () => ({
  __esModule: true,
  default: (props: any) => (
    <div data-testid="GcpInfraSetup">GcpInfraSetup</div>
  ),
}));

jest.mock('../build-saferoom-infra', () => ({
  __esModule: true,
  default: (props: any) => (
    <div data-testid="BuildSaferoomInfra">BuildSaferoomInfra</div>
  ),
}));

// MUI icon (only used as decoration) – render a tiny stub to avoid SVG noise
jest.mock('@mui/icons-material/InfoOutlined', () => ({
  __esModule: true,
  default: (props: any) => <i data-testid="info-icon" {...props} />,
}));

// ---- SUT ----
import ProvisionDetails from './provision-details';

// Helpers
const stepLabels = [
  'GCP Project Creation',
  'GCP App Infrastructure Setup',
  'GCP CDM Next Infrastructure Setup',
  'CDM Next Deployment',
  'Environment Build Validation',
];

// Window.open (used in the “CDM Next Deployment” step)
const openSpy = jest.spyOn(window, 'open').mockImplementation(() => null as any);

afterEach(() => {
  jest.clearAllMocks();
});

describe('ProvisionDetails', () => {
  test('boots, shows breadcrumb + fields, renders all step labels', async () => {
    render(<ProvisionDetails />);

    // Initial loading state flashes – don’t assert it strictly, but ensure final UI shows
    expect(await screen.findByText(/Provisioning Details/i)).toBeInTheDocument();

    // App/environment TextFields show param values
    expect(screen.getByDisplayValue('abc-999')).toBeInTheDocument();
    expect(screen.getByDisplayValue('dev')).toBeInTheDocument();

    // Stepper labels
    for (const label of stepLabels) {
      expect(screen.getByText(label)).toBeInTheDocument();
    }

    // By default step 0 is active -> our mocked component should be visible
    expect(screen.getByTestId('ActTaskValidation')).toBeInTheDocument();
  });

  test('clicking a step label switches panels (step 1 -> GCP Infra Setup)', async () => {
    render(<ProvisionDetails />);

    // Wait for bootstrap
    await screen.findByText(/Provisioning Details/i);

    // Click the “GCP App Infrastructure Setup” step label (index 1)
    fireEvent.click(screen.getByText(stepLabels[1]));

    // Panel should switch to GcpInfraSetup
    expect(screen.getByTestId('GcpInfraSetup')).toBeInTheDocument();

    // The step title shown below the Stepper updates too
    expect(screen.getByText(stepLabels[1])).toBeInTheDocument();
  });

  test('step 2 shows Saferoom Infra panel (BuildSaferoomInfra mock)', async () => {
    render(<ProvisionDetails />);

    await screen.findByText(/Provisioning Details/i);

    fireEvent.click(screen.getByText(stepLabels[2]));
    expect(screen.getByTestId('BuildSaferoomInfra')).toBeInTheDocument();
    expect(screen.getByText(stepLabels[2])).toBeInTheDocument();
  });

  test('step 3 shows “CDM Next Deployment” button and opens link', async () => {
    render(<ProvisionDetails />);

    await screen.findByText(/Provisioning Details/i);

    fireEvent.click(screen.getByText(stepLabels[3]));

    const btn = screen.getByRole('button', { name: /CDM Next Deployment/i });
    fireEvent.click(btn);

    // We don’t assert the exact long URL; just ensure window.open was called with https link
    expect(openSpy).toHaveBeenCalled();
    const [url] = (openSpy.mock.calls[0] ?? []) as unknown as [string];
    expect(url).toMatch(/^https?:\/\//);
  });

  test('step 4 shows “Environment Build Validation Execution” link', async () => {
    render(<ProvisionDetails />);

    await screen.findByText(/Provisioning Details/i);

    fireEvent.click(screen.getByText(stepLabels[4]));

    const link = screen.getByRole('link', {
      name: /Environment Build Validation Execution/i,
    });
    expect(link).toBeInTheDocument();
    // Basic sanity: looks like a valid http(s) link
    expect(link).toHaveAttribute('href', expect.stringMatching(/^https?:\/\//));
  });
});
