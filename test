import React from 'react';
import { render } from '@testing-library/react';
import ProvisionLogsTemplate from './Provision-logs-template';

// 1) Pull the real prop type from the component
type Props = React.ComponentProps<typeof ProvisionLogsTemplate>;
type Logs = Props['provisioningLogs'];

// 2) Build logs that satisfy that type
function makeLogs(overall: 'success' | 'failure' = 'success'): Logs {
  return {
    overall_status: overall,
    validation_results: {
      gcpapp_validation: {
        status: 'success',
        details: {
          project_id: 'proj-123',
          terraform_service_account: undefined, // will show "N/A"
        },
      },
      // include whatever validations your component reads
      gcpdm_validation: {
        status: 'success',
        details: {
          missing_additional_roles: [],
          missing_grantable_roles: [],
          project_flags: [],
        },
      },
      github_repos_validation: { status: 'success', details: [] },
      secondary_ranges_validation: {
        status: 'success',
        details: { secondary_ranges_validation: [] as string[] },
      },
      workspace_validation: { status: 'success', details: [] },
    },
  } as unknown as Logs; // (keeps TS happy if your file refines the shape internally)
}

// 3) Use the derived Props when rendering
const renderTemplate = (partial?: Partial<Props>) => {
  const base: Props = {
    logType: 'GCP APP Validation Logs',
    provisioningLogs: makeLogs('success'),
    ...(partial as Props),
  };
  return render(<ProvisionLogsTemplate {...base} />);
};
