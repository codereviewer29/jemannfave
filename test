import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';

/* ---------------------- FormContext mock ---------------------- */
const setFormDataMock = jest.fn();
const resetFormDataMock = jest.fn();
let requiredFieldsMock: string[] = [];
let formDataMock: any = { trackingStatus: '', appDetails: {}, cdmNextDetails: {} };
const initialFormDataMock = { trackingStatus: '', appDetails: {}, cdmNextDetails: {} };

jest.mock('../FormContext', () => ({
  __esModule: true,
  useFormContext: () => ({
    formData: formDataMock,
    setFormData: setFormDataMock,
    resetFormData: resetFormDataMock,
    requiredFields: requiredFieldsMock,
    initialFormData: initialFormDataMock,
  }),
}));

/* ----------------------- API hook mock ------------------------ */
const makeRequest = jest.fn();
jest.mock('../../services/useApiService', () => ({
  __esModule: true,
  default: () => makeRequest,
}));

/* -------------------- react-router-dom mock ------------------- */
/* make sure useLocation exists (CustomNavigation uses it) */
const navigateMock = jest.fn();
let paramsMock: Record<string, string> | undefined = undefined;

jest.mock('react-router-dom', () => ({
  __esModule: true,
  useNavigate: () => navigateMock,
  useParams: () => (paramsMock ?? ({} as any)),
  useLocation: () => ({ pathname: '/' }),
  Link: ({ to, children }: { to: string; children: React.ReactNode }) => (
    <a href={to}>{children}</a>
  ),
}));

/* -------- lightweight stubs for the three child panes ---------- */
jest.mock('../applicationDetails', () => () => <div data-testid="app-details" />);
jest.mock('../componentsDetails', () => () => <div data-testid="components-details" />);
jest.mock('../guidelinesIntakeForm', () => () => <div data-testid="guidelines" />);

/* --------- stubs for the two dialogs (expose buttons) ---------- */
jest.mock('../intake-components/cancelOnboarding', () => (props: any) => (
  <button data-testid="mock-cancel-confirm" onClick={props.handleConfirmCancel} />
));
jest.mock('../intake-components/confirmationOnboarding', () => (props: any) => (
  <button data-testid="mock-submit-confirm" onClick={props.handleConfirmSubmit} />
));

/* ---------------------------- SUT ------------------------------ */
import StartOnboarding from './startOnboarding';

const click = (el: HTMLElement) => fireEvent.click(el);

describe('StartOnboarding', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    paramsMock = undefined;
    requiredFieldsMock = [];
    formDataMock = { trackingStatus: '', appDetails: {}, cdmNextDetails: {} };
  });

  test('mount with trackingId → fetches data and shows id', async () => {
    paramsMock = { trackingId: '123' };
    makeRequest.mockResolvedValueOnce({ data: { foo: 'bar' }, status: 200 });

    render(<StartOnboarding />);

    await waitFor(() => expect(makeRequest).toHaveBeenCalledTimes(1));
    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({
        method: 'GET',
        endpoints: '/api/intake-form?intakeFormTrackingId=123',
        responseType: 'json',
      }),
    );

    expect(setFormDataMock).toHaveBeenCalledWith({ foo: 'bar' });
    expect(screen.getByText('123')).toBeInTheDocument();
  });

  test('mount without trackingId → resets form and shows "Not Available"', async () => {
    paramsMock = undefined;

    render(<StartOnboarding />);

    expect(resetFormDataMock).toHaveBeenCalled();

    // Allow effects to paint the tracking block
    await waitFor(() => {
      expect(
        screen.getByText((_, el) => el?.textContent?.includes('Not Available') ?? false),
      ).toBeInTheDocument();
    });
  });

  test('Save → POST /api/intake-form then navigates to /gcpOnboarding/:id', async () => {
    makeRequest.mockResolvedValueOnce({ data: { intakeFormTrackingId: 987 }, status: 200 });

    render(<StartOnboarding />);
    click(screen.getByRole('button', { name: /Save/i }));

    await waitFor(() => expect(makeRequest).toHaveBeenCalled());

    // Allow extra properties (body, etc.)
    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({
        method: 'POST',
        endpoints: '/api/intake-form/',
        responseType: 'json',
        body: expect.any(Object),
      }),
    );
    expect(navigateMock).toHaveBeenCalledWith('/gcpOnboarding/987');
  });

  test('Save (network error) → logs error, no navigation', async () => {
    makeRequest.mockRejectedValueOnce(new Error('boom'));
    render(<StartOnboarding />);

    click(screen.getByRole('button', { name: /Save/i }));

    await waitFor(() => expect(makeRequest).toHaveBeenCalled());
    expect(navigateMock).not.toHaveBeenCalled();
  });

  test('getFormData non-200 → error toast; no confirm dialog', async () => {
    paramsMock = { trackingId: '555' };
    makeRequest.mockResolvedValueOnce({ data: {}, status: 500 });

    render(<StartOnboarding />);

    const alert = await screen.findByRole('alert');
    expect(alert.innerHTML).toMatch(/error has occurred while fetching intake form/i);
    // confirm submit dialog not shown in this path
    expect(screen.queryByTestId('mock-submit-confirm')).not.toBeInTheDocument();
  });

  test('Submit invalid → validation toast; no POST', async () => {
    requiredFieldsMock = ['appDetails.name']; // force missing = invalid
    render(<StartOnboarding />);

    click(screen.getByRole('button', { name: /Submit/i }));

    const alert = await screen.findByRole('alert');
    expect(alert.innerHTML).toMatch(/please fill in all required fields/i);

    // Ensure submit call did NOT go out
    expect(
      makeRequest.mock.calls.some(c => String(c?.[0]?.endpoints).includes('/api/submit-intake-form')),
    ).toBe(false);
  });

  test('Submit valid → POST submit, success toast, confirm navigates to inbox', async () => {
    requiredFieldsMock = []; // valid
    makeRequest.mockResolvedValueOnce({ data: { intakeFormTrackingId: 4321 }, status: 200 });

    render(<StartOnboarding />);

    click(screen.getByRole('button', { name: /Submit/i }));

    await waitFor(() =>
      expect(
        makeRequest.mock.calls.some(c => String(c?.[0]?.endpoints).includes('/api/submit-intake-form')),
      ).toBe(true),
    );

    const alert = await screen.findByRole('alert');
    // be forgiving about spelling in the source (“succesfully” vs “successfully”)
    expect(alert.innerHTML).toMatch(/submitted succes+/i);

    // our stubbed confirm button simulates clicking the dialog's confirm
    click(screen.getByTestId('mock-submit-confirm'));
    expect(navigateMock).toHaveBeenCalledWith('/inbox');
  });

  test('Submit non-200 → error toast (no confirm dialog)', async () => {
    requiredFieldsMock = [];
    makeRequest.mockResolvedValueOnce({ data: {}, status: 500 });

    render(<StartOnboarding />);

    click(screen.getByRole('button', { name: /Submit/i }));

    const alert = await screen.findByRole('alert');
    expect(alert.innerHTML).toMatch(/error has occurred while submitting intake form/i);
    expect(screen.queryByTestId('mock-submit-confirm')).not.toBeInTheDocument();
  });

  test('Cancel confirm with trackingId → re-fetches and sets data', async () => {
    paramsMock = { trackingId: '123' };
    // 1) initial mount fetch
    makeRequest
      .mockResolvedValueOnce({ data: { a: 1 }, status: 200 })
      // 2) confirm cancel fetch
      .mockResolvedValueOnce({ data: { a: 2 }, status: 200 });

    render(<StartOnboarding />);

    click(screen.getByRole('button', { name: /Cancel/i }));
    click(screen.getByTestId('mock-cancel-confirm'));

    await waitFor(() => expect(makeRequest).toHaveBeenCalledTimes(2));
    expect(setFormDataMock).toHaveBeenCalledWith({ a: 2 });
  });

  test('Cancel confirm without trackingId → resets to initialFormData', () => {
    paramsMock = undefined;

    render(<StartOnboarding />);

    click(screen.getByRole('button', { name: /Cancel/i }));
    click(screen.getByTestId('mock-cancel-confirm'));

    expect(setFormDataMock).toHaveBeenCalledWith(initialFormDataMock);
  });

  test('buttons disabled when trackingStatus = Completed', () => {
    formDataMock = { ...formDataMock, trackingStatus: 'Completed' };

    render(<StartOnboarding />);

    expect(screen.getByRole('button', { name: /^Save$/i })).toBeDisabled();
    expect(screen.getByRole('button', { name: /^Submit$/i })).toBeDisabled();
  });

  test('tabs switch content', () => {
    render(<StartOnboarding />);

    // default
    expect(screen.getByTestId('app-details')).toBeInTheDocument();

    // to Component Details
    fireEvent.click(screen.getByRole('button', { name: /Component Details/i }));
    expect(screen.getByTestId('components-details')).toBeInTheDocument();

    // to Guide Lines
    fireEvent.click(screen.getByRole('button', { name: /Guide Lines/i }));
    expect(screen.getByTestId('guidelines')).toBeInTheDocument();
  });
});
