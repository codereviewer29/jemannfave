import { createRoot } from 'react-dom/client';

// ⬇️ add this line
jest.mock('bootstrap/dist/css/bootstrap.min.css', () => ({}), { virtual: true });

// If you mock this lib, return a component so children render safely
jest.mock('@wf/react-library', () => ({
  ConfigContextProvider: ({ children }: any) => <>{children}</>,
}));

jest.mock('./App', () => () => <div>MockApp</div>);

describe('bootstrap', () => {
  it('renders App within ConfigContextProvider and React.StrictMode', () => {
    const mockRender = jest.fn();
    (createRoot as unknown as jest.Mock).mockReturnValue({ render: mockRender });

    require('./main');

    expect(createRoot).toHaveBeenCalled();
    expect(mockRender).toHaveBeenCalled();
  });
});
// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/src/setupTests.ts'],
  transform: {
    '^.+\\.(ts|tsx)$': ['ts-jest', { tsconfig: '<rootDir>/tsconfig.json' }],
    '^.+\\.(css|scss|sass)$': 'jest-css-modules-transform',
  },
  transformIgnorePatterns: ['node_modules/(?!(@mui)/)'],
  modulePathIgnorePatterns: ['<rootDir>/dist/'],
  moduleNameMapper: {
    '\\.(jpg|jpeg|png|gif|svg)$': '<rootDir>/src/__mocks__/fileMock.js', // optional
    '^@/(.*)$': '<rootDir>/src/$1', // if you use "@/" alias
  },
};

{
  "compilerOptions": {
    "baseUrl": "src",
    "paths": {
      "@/*": ["*"]
    }
  }
}

module.exports = {
  // …
  moduleNameMapper: { '^@/(.*)$': '<rootDir>/src/$1' }
};
