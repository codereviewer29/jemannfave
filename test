// src/sideNavbar/boarding/intake-components/cdmpIntakeForm.test.tsx
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { createMemoryRouter, RouterProvider } from 'react-router-dom';

// ---- EnvContext mock (component calls useContext(EnvContext)) ----
jest.mock('../../envContext', () => {
  const React = require('react');
  return {
    __esModule: true,
    default: React.createContext({}),
  };
});

// ---- FormContext mock ----
const setFormData = jest.fn();
const useFormContextMock = jest.fn();
jest.mock('../FormContext', () => ({
  useFormContext: () => useFormContextMock(),
}));

// ---- MUI stubs (include FormLabel or React will crash) ----
jest.mock('@mui/material', () => {
  const React = require('react');
  const Pass = ({ children, ...rest }: any) => <div {...rest}>{children}</div>;

  const Box = Pass;
  const Grid = Pass;
  const FormControl = Pass;
  const FormLabel = ({ children }: any) => <label>{children}</label>;
  const InputLabel = ({ children }: any) => <label>{children}</label>;
  const MenuItem = ({ children }: any) => <>{children}</>;
  const Tooltip = ({ title, children }: any) => (
    <div>
      <div data-testid="tooltip-title">{title}</div>
      {children}
    </div>
  );
  const Typography = ({ children }: any) => <div>{children}</div>;
  const Button = ({ children, onClick, ...rest }: any) => (
    <button onClick={onClick} {...rest}>{children}</button>
  );

  const TextField = ({ label, name, value, onChange, disabled, helperText }: any) => (
    <label>
      {label}
      <input
        aria-label={label}
        name={name}
        defaultValue={value ?? ''}
        disabled={disabled}
        onChange={(e) => onChange?.({ target: { name, value: e.currentTarget.value } })}
      />
      {helperText ? <small>{helperText}</small> : null}
    </label>
  );

  const Radio = (props: any) => <input type="radio" {...props} />;
  const FormControlLabel = ({ value, label, control, ...rest }: any) => (
    <label>
      {React.cloneElement(control, { value, ...rest })}
      {label}
    </label>
  );
  const RadioGroup = ({ name, value, onChange, children }: any) => (
    <div role="radiogroup" aria-label={name}>
      {React.Children.map(children, (child: any) =>
        React.cloneElement(child, {
          name,
          checked: child.props.value === value,
          onChange: () => onChange?.({ target: { name, value: child.props.value } }),
        })
      )}
    </div>
  );

  // simple <select> (component barely uses this)
  const Select = ({ label, id, name, value, children, disabled }: any) => {
    const options = React.Children.toArray(children).map((n: any, i: number) => (
      <option key={i} value={n?.props?.value}>{n?.props?.children}</option>
    ));
    return (
      <label htmlFor={id}>
        {label}
        <select id={id} name={name} aria-label={label} value={value ?? ''} disabled={disabled} onChange={() => {}}>
          {options}
        </select>
      </label>
    );
  };

  return {
    __esModule: true,
    Box,
    Grid,
    FormControl,
    FormLabel,
    InputLabel,
    MenuItem,
    Select,
    Tooltip,
    Typography,
    Button,
    TextField,
    Radio,
    RadioGroup,
    FormControlLabel,
  };
});

jest.mock('@mui/icons-material/Info', () => ({
  __esModule: true,
  default: () => <span data-testid="info-icon" />,
}));

// ---- SUT AFTER mocks ----
import CDMPIntakeForm from './cdmpIntakeForm';

// ---- helpers ----
function renderWithDataRouter(ui: React.ReactElement) {
  const router = createMemoryRouter([{ path: '/', element: ui }], { initialEntries: ['/'] });
  return render(<RouterProvider router={router} />);
}

const baseFormData = {
  cdmpDetails: {
    vmName: '',
    serviceAccount: '',
    pythonVersion: '',
    directoryStructure: '',
    ucdAgent: '',
    isOnboardedAutosys: 'Yes', // start with Yes
  },
};

function setup(formData = baseFormData) {
  jest.clearAllMocks();
  useFormContextMock.mockReturnValue({ formData, setFormData, isReadOnly: false });

  const user = userEvent.setup();
  renderWithDataRouter(<CDMPIntakeForm validationErrors={{}} />);

  return {
    user,
    getVm: () => screen.getByLabelText(/vm name/i),
    getSvc: () => screen.getByLabelText(/service account/i),
    getPy: () => screen.getByLabelText(/python 3\.x/i),
    getDir: () => screen.getByLabelText(/directory structure/i),
    getUcd: () => screen.getByLabelText(/provide ucd agent/i),
  };
}

// ---- tests ----
describe('CDMPIntakeForm', () => {
  test('renders overview copy, fields, tooltips and icon', () => {
    setup();

    expect(screen.getByRole('heading', { name: /cdmp overview/i })).toBeInTheDocument();
    expect(screen.getByText(/controlled data movement platform/i)).toBeInTheDocument();

    expect(screen.getByLabelText(/vm name/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/service account/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/python 3\.x/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/directory structure/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/provide ucd agent/i)).toBeInTheDocument();

    expect(screen.getAllByTestId('tooltip-title').length).toBeGreaterThan(0);
    expect(screen.getByTestId('info-icon')).toBeInTheDocument();
  });

  test('updates vmName and serviceAccount', async () => {
    const { user, getVm, getSvc } = setup();

    await user.type(getVm(), 'DEV-VM');
    expect(setFormData).toHaveBeenLastCalledWith({
      ...baseFormData,
      cdmpDetails: { ...baseFormData.cdmpDetails, vmName: 'DEV-VM' },
    });

    await user.type(getSvc(), 'svc-cdmp');
    expect(setFormData).toHaveBeenLastCalledWith({
      ...baseFormData,
      cdmpDetails: { ...baseFormData.cdmpDetails, serviceAccount: 'svc-cdmp' },
    });
  });

  test('updates pythonVersion, directoryStructure and ucdAgent', async () => {
    const { user, getPy, getDir, getUcd } = setup();

    await user.type(getPy(), '3.11');
    expect(setFormData).toHaveBeenLastCalledWith({
      ...baseFormData,
      cdmpDetails: { ...baseFormData.cdmpDetails, pythonVersion: '3.11' },
    });

    await user.type(getDir(), '/apps/cdmp');
    expect(setFormData).toHaveBeenLastCalledWith({
      ...baseFormData,
      cdmpDetails: { ...baseFormData.cdmpDetails, directoryStructure: '/apps/cdmp' },
    });

    await user.type(getUcd(), 'agent-01');
    expect(setFormData).toHaveBeenLastCalledWith({
      ...baseFormData,
      cdmpDetails: { ...baseFormData.cdmpDetails, ucdAgent: 'agent-01' },
    });
  });

  test('radio toggles Autosys help text Yes/No', () => {
    setup({ cdmpDetails: { ...baseFormData.cdmpDetails, isOnboardedAutosys: 'Yes' } });
    expect(screen.getByText(/create cdmp jobs/i)).toBeInTheDocument();

    const noRadio = screen.getByLabelText(/^No$/i) as HTMLInputElement;
    fireEvent.change(noRadio, { target: { checked: true } });
    expect(screen.getByText(/onboard application to autosys/i)).toBeInTheDocument();
  });

  test('file input change shows the "File:" indicator', async () => {
    setup();
    const fileInput = screen.getByRole('textbox', { hidden: true }) || screen.getByLabelText(/upload venafi certificate/i, { selector: 'input[type="file"]' as any });
    // More robust: query by input[type=file]
    const input = document.querySelector('input[type="file"]') as HTMLInputElement;
    const file = new File(['dummy'], 'venafi.pem', { type: 'application/x-pem-file' });

    await userEvent.upload(input, file);
    expect(screen.getByText(/^File:/i)).toBeInTheDocument();
  });
});
