import { renderHook } from '@testing-library/react';
import useApiService from './useApiService';
import type { HttpRequest } from './types';

/* ─── Mocks ─────────────────────────────────────────────────────────────── */

jest.mock('@wf/react-library', () => ({
  // we’ll control these returns per-test
  useAppGlobalState: jest.fn(),
  useConfig: jest.fn(),
}));

jest.mock('./processHttp', () => ({
  __esModule: true,
  processHttpRequest: jest.fn(),
}));

/* typed helpers for our mocks */
const { useAppGlobalState, useConfig } = jest.requireMock('@wf/react-library') as {
  useAppGlobalState: jest.Mock;
  useConfig: jest.Mock;
};

const { processHttpRequest } = jest.requireMock('./processHttp') as {
  processHttpRequest: jest.Mock;
};

const TOKEN = { access_token: 'abc.123' };
const BASE = 'https://api.example.com';

beforeEach(() => {
  jest.clearAllMocks();
  useConfig.mockReturnValue({ API_BASE_ENDPOINT: BASE });
});

/* ─── Tests ──────────────────────────────────────────────────────────────── */

test('calls processHttpRequest with (request, access_token, baseEndpoint)', async () => {
  useAppGlobalState.mockReturnValue(TOKEN);
  processHttpRequest.mockResolvedValue({ ok: true });

  const { result } = renderHook(() => useApiService());
  const req = { method: 'GET', endpoint: '/things' } as unknown as HttpRequest;

  await result.current.makeRequest(req);

  expect(processHttpRequest).toHaveBeenCalledTimes(1);
  expect(processHttpRequest).toHaveBeenCalledWith(req, TOKEN.access_token, BASE);
});

test('passes undefined token when global state has no token', async () => {
  useAppGlobalState.mockReturnValue(undefined);
  processHttpRequest.mockResolvedValue({ ok: true });

  const { result } = renderHook(() => useApiService());
  const req = { method: 'GET', endpoint: '/things' } as unknown as HttpRequest;

  await result.current.makeRequest(req);

  expect(processHttpRequest).toHaveBeenCalledWith(req, undefined, BASE);
});

test('returns the resolved value from processHttpRequest', async () => {
  useAppGlobalState.mockReturnValue(TOKEN);
  const payload = { id: 7, name: 'thing' };
  processHttpRequest.mockResolvedValue(payload);

  const { result } = renderHook(() => useApiService());
  const req = { method: 'GET', endpoint: '/thing/7' } as unknown as HttpRequest;

  const value = await result.current.makeRequest(req);
  expect(value).toBe(payload);
});

test('propagates errors from processHttpRequest', async () => {
  useAppGlobalState.mockReturnValue(TOKEN);
  const err = new Error('network down');
  processHttpRequest.mockRejectedValue(err);

  const { result } = renderHook(() => useApiService());
  const req = { method: 'GET', endpoint: '/oops' } as unknown as HttpRequest;

  await expect(result.current.makeRequest(req)).rejects.toThrow('network down');
});
