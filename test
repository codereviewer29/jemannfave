// File: src/intake-components/__tests__/gcpSaferoomIntakeForm.test.tsx
import React from 'react';
import { render, screen, within } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

// Router Form â†’ simple passthrough
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  Form: ({ children, onSubmit }: { children: React.ReactNode; onSubmit?: React.FormEventHandler }) => (
    <form onSubmit={onSubmit}>{children}</form>
  ),
  Link: ({ children, ...rest }: any) => <a {...rest}>{children}</a>,
}));

// Inline Tooltip title for easy assertions (avoid portals/hover)
jest.mock('@mui/material', () => {
  const actual = jest.requireActual('@mui/material');
  return {
    ...actual,
    Tooltip: ({ title, placement, children }: { title: React.ReactNode; placement?: string; children: React.ReactElement }) => (
      <div data-testid={`tooltip-${placement || 'top'}`}>
        <div data-testid="tooltip-title">{title}</div>
        {children}
      </div>
    ),
  };
});

// Mutable test context
let ctxFormData: any;
let ctxSetFormData: jest.Mock;
let ctxSetReadOnly: jest.Mock;

jest.mock('../FormContext', () => ({
  useFormContext: () => ({
    formData: ctxFormData,
    setFormData: ctxSetFormData,
    setReadOnly: ctxSetReadOnly,
  }),
}));

// Import AFTER mocks
import GCPSaferoomIntakeForm from '../gcpSaferoomIntakeForm';

function resetCtx(overrides?: Partial<any>) {
  ctxFormData = {
    gcpSaferoomIntakeId: 0,
    SubmitForSABinding: '',
    SubmitForADBinding: '',
    ...(overrides ?? {}),
  };
  ctxSetReadOnly = jest.fn();
  ctxSetFormData = jest.fn((next: any) => {
    // keep last object shape the component passes
    ctxFormData = typeof next === 'function' ? next(ctxFormData) : next;
  });
}

function renderForm(props?: Partial<React.ComponentProps<typeof GCPSaferoomIntakeForm>>) {
  return render(
    <GCPSaferoomIntakeForm intakeFormTrackingId={props?.intakeFormTrackingId ?? 0} onSave={props?.onSave} />
  );
}

describe('GCPSaferoomIntakeForm', () => {
  beforeEach(() => resetCtx());

  test('renders labels, buttons, and inline help', () => {
    renderForm();

    // Labels
    expect(screen.getByLabelText(/Request Number for SA Role Binding/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/Request Number for AD Group Role Binding/i)).toBeInTheDocument();

    // Buttons
    expect(screen.getByRole('button', { name: /Cancel/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /^Save$/i })).toBeInTheDocument();

    // Inlined tooltip content from <Tooltip title=...>
    const tip = screen.getAllByTestId('tooltip-title')[0];
    expect(
      within(tip).getByText(/Submit sharepoint intakes for SA role binding/i)
    ).toBeInTheDocument();
  });

  test('saving with empty fields shows validation error alert', async () => {
    const user = userEvent.setup();
    renderForm();

    await user.click(screen.getByRole('button', { name: /^Save$/i }));

    expect(screen.getByText(/Please complete all required fields before saving/i)).toBeInTheDocument();
  });

  test('typing both fields then saving shows success alert, disables actions, and calls onSave', async () => {
    const user = userEvent.setup();
    const onSave = jest.fn();
    renderForm({ onSave });

    await user.type(screen.getByLabelText(/Request Number for SA Role Binding/i), 'SA-12345');
    await user.type(screen.getByLabelText(/Request Number for AD Group Role Binding/i), 'AD-67890');

    await user.click(screen.getByRole('button', { name: /^Save$/i }));

    // Success path
    expect(screen.getByText(/GCP Saferoom details saved Successfully/i)).toBeInTheDocument();
    // Component flips to read-only on success
    expect(screen.getByRole('button', { name: /^Save$/i })).toBeDisabled();
    expect(screen.getByRole('button', { name: /Cancel/i })).toBeDisabled();
    expect(onSave).toHaveBeenCalled();
  });

  test('only one field filled still shows validation error', async () => {
    const user = userEvent.setup();
    renderForm();

    await user.type(screen.getByLabelText(/Request Number for SA Role Binding/i), 'SA-ONLY');

    await user.click(screen.getByRole('button', { name: /^Save$/i }));

    expect(screen.getByText(/Please complete all required fields before saving/i)).toBeInTheDocument();
  });

  test('read-only mode when intakeFormTrackingId + non-zero gcpSaferoomIntakeId', () => {
    resetCtx({ gcpSaferoomIntakeId: 42 });
    renderForm({ intakeFormTrackingId: 777 });

    // useEffect should have set read-only; Save becomes disabled
    expect(screen.getByRole('button', { name: /^Save$/i })).toBeDisabled();
  });

  test('handleChange pushes updated data via setFormData', async () => {
    const user = userEvent.setup();
    renderForm();

    const saField = screen.getByLabelText(/Request Number for SA Role Binding/i);
    await user.type(saField, 'X1');

    expect(ctxSetFormData).toHaveBeenCalled();
    const last = ctxSetFormData.mock.calls.at(-1)?.[0];
    const latestData = typeof last === 'function' ? last(ctxFormData) : last;
    expect(latestData.SubmitForSABinding || ctxFormData.SubmitForSABinding).toContain('X1');
  });
});
