// ProvisionContext.test.tsx
import React from 'react';
import { renderHook, act } from '@testing-library/react';
import { ProvisionProvider, useProvisionContext, InitialProvisionData } from './ProvisionContext';

describe('ProvisionContext', () => {
  test('provides initial state correctly', () => {
    const wrapper = ({ children }: { children: React.ReactNode }) => (
      <ProvisionProvider>{children}</ProvisionProvider>
    );

    const { result } = renderHook(() => useProvisionContext(), { wrapper });

    expect(result.current.provisioningData).toEqual(InitialProvisionData);
    expect(result.current.requiredFields).toEqual(['githubToken', 'terraformToken']);
  });

  test('updates provisioningData with setProvisionData', () => {
    const wrapper = ({ children }: { children: React.ReactNode }) => (
      <ProvisionProvider>{children}</ProvisionProvider>
    );

    const { result } = renderHook(() => useProvisionContext(), { wrapper });

    act(() => {
      result.current.setProvisionData({
        githubToken: 'abc',
        terraformToken: 'xyz',
        githubRepo: ['repo1'],
        githubBranch: ['main'],
      });
    });

    expect(result.current.provisioningData.githubToken).toBe('abc');
    expect(result.current.provisioningData.terraformToken).toBe('xyz');
  });

  test('resets provisioningData to InitialProvisionData', () => {
    const wrapper = ({ children }: { children: React.ReactNode }) => (
      <ProvisionProvider>{children}</ProvisionProvider>
    );

    const { result } = renderHook(() => useProvisionContext(), { wrapper });

    // set custom data first
    act(() => {
      result.current.setProvisionData({
        githubToken: 'abc',
        terraformToken: 'xyz',
        githubRepo: ['repo1'],
        githubBranch: ['main'],
      });
    });

    expect(result.current.provisioningData.githubToken).toBe('abc');

    // reset back
    act(() => {
      result.current.resetProvisionData();
    });

    expect(result.current.provisioningData).toEqual(InitialProvisionData);
  });

  test('throws error if useProvisionContext is used outside provider', () => {
    const { result } = renderHook(() => useProvisionContext());
    expect(result.error).toEqual(
      new Error('useFormContext must be used within a ProvisionProvider')
    );
  });
});
