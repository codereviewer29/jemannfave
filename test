// put this in your applicationDetails.test.tsx BEFORE importing ApplicationDetails
jest.mock('@mui/material', () => ({
  __esModule: true,

  // layout & basics
  Box: (p: any) => <div {...p} />,
  Container: (p: any) => <div {...p} />,            // <-- add
  Grid: (p: any) => <div {...p} />,
  Typography: (p: any) => <div {...p} />,

  // text inputs
  TextField: ({ label, name, value, onChange, disabled, helperText, ...rest }: any) => (
    <div>
      <input
        aria-label={label || name}
        name={name}
        value={value ?? ''}
        onChange={onChange}
        disabled={disabled}
        {...rest}
      />
      {helperText ? <div data-testid={`${name || label}-helper`}>{helperText}</div> : null}
    </div>
  ),

  // selects
  Select: ({ children, multiple, label, name, value, onChange, disabled, ...rest }: any) => (
    <select
      aria-label={label || name}
      name={name}
      value={value ?? (multiple ? [] : '')}
      onChange={onChange}
      multiple={!!multiple}
      disabled={disabled}
      {...rest}
    >
      {children}
    </select>
  ),
  MenuItem: ({ value, children, disabled, ...rest }: any) => (
    <option value={value} disabled={disabled} {...rest}>
      {children}
    </option>
  ),

  // adornments & buttons
  InputAdornment: ({ children, ...rest }: any) => <span {...rest}>{children}</span>, // <-- add
  IconButton: ({ children, onClick, ...rest }: any) => (
    <button type="button" onClick={onClick} {...rest}>{children}</button>
  ),

  // form helpers
  Checkbox: (p: any) => <input type="checkbox" {...p} />,
  Radio: (p: any) => <input type="radio" {...p} />,
  RadioGroup: ({ children, ...rest }: any) => <div role="radiogroup" {...rest}>{children}</div>,
  FormControlLabel: ({ control, label, ...rest }: any) => <label {...rest}>{control}<span>{label}</span></label>,
  FormControl: ({ children, ...rest }: any) => <div {...rest}>{children}</div>,
  FormLabel: ({ children, ...rest }: any) => <label {...rest}>{children}</label>,
  InputLabel: ({ children, ...rest }: any) => <label {...rest}>{children}</label>,

  // misc
  Tooltip: ({ children }: any) => <>{children}</>,
  Link: ({ children, href, ...rest }: any) => <a href={href} {...rest}>{children}</a>,
  Alert: ({ children }: any) => <div role="alert">{children}</div>,
  Snackbar: ({ open, children }: any) => (open ? <div>{children}</div> : null),
  CircularProgress: () => <div aria-label="loading" />,

  // accordions
  Accordion: ({ children, ...rest }: any) => <section {...rest}>{children}</section>,
  AccordionSummary: ({ children, ...rest }: any) => <header {...rest}>{children}</header>,
  AccordionDetails: ({ children, ...rest }: any) => <div {...rest}>{children}</div>,
}));
