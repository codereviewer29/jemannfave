// src/sideNavbar/boarding/startOnboarding.test.tsx
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';

// Why: we must fully control form state & required fields across tests
const setFormDataMock = jest.fn();
const resetFormDataMock = jest.fn();
let requiredFieldsMock: string[] = [];
let formDataMock: any = { trackingStatus: '', appDetails: {}, cdmNextDetails: {} };
const initialFormDataMock = { trackingStatus: '', appDetails: {}, cdmNextDetails: {} };

jest.mock('./FormContext', () => ({
  __esModule: true,
  useFormContext: () => ({
    formData: formDataMock,
    setFormData: setFormDataMock,
    resetFormData: resetFormDataMock,
    requiredFields: requiredFieldsMock,
  }),
  initialFormData: initialFormDataMock,
}));

// Why: isolate network I/O
const makeRequest = jest.fn();
jest.mock('../../services/useApiService', () => ({
  __esModule: true,
  default: () => ({ makeRequest }),
}));

// Why: control navigation & params
const navigateMock = jest.fn();
let paramsMock: Record<string, string | undefined> = {};
jest.mock('react-router-dom', () => ({
  __esModule: true,
  useNavigate: () => navigateMock,
  useParams: () => paramsMock,
  Link: ({ to, children }: { to: string; children: React.ReactNode }) => (
    <a href={to} data-to={to}>
      {children}
    </a>
  ),
}));

// Why: keep children light to focus on container logic
jest.mock('./components/applicationDetails', () => () => <div data-testid="app-details" />);
jest.mock('./components/componentsDetails', () => () => <div data-testid="components-details" />);
jest.mock('./intake-components/guidelinesIntakeForm', () => () => (
  <div data-testid="guidelines" />
));
jest.mock('../../home/CustomNavigation', () => () => <div data-testid="nav" />);

// Why: surface dialog callbacks as clickable elements
jest.mock('./intake-components/cancelOnboarding', () => (props: any) => (
  <button data-testid="mock-cancel-confirm" onClick={props.handleConfirmCancel} />
));
jest.mock('./intake-components/confirmationOnboarding', () => (props: any) => (
  <button data-testid="mock-submit-confirm" onClick={props.handleConfirmSubmit} />
));

import StartOnboarding from './startOnboarding';

const click = (el: HTMLElement) => fireEvent.click(el);

describe('StartOnboarding', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    paramsMock = {};
    requiredFieldsMock = [];
    formDataMock = { trackingStatus: '', appDetails: {}, cdmNextDetails: {} };
  });

  test('mount with trackingId → fetches data and renders id', async () => {
    paramsMock = { trackingId: '123' };
    makeRequest.mockResolvedValueOnce({ data: { foo: 'bar' }, status: 200 });

    render(<StartOnboarding />);

    await waitFor(() => expect(makeRequest).toHaveBeenCalledTimes(1));
    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({
        method: 'GET',
        endpoints: '/api/intake-form?intakeFormTrackingId=123',
        responseType: 'json',
      }),
    );
    expect(setFormDataMock).toHaveBeenCalledWith({ foo: 'bar' });

    // Tracking ID section visible
    expect(screen.getByText(/Intake Tracking ID/i)).toBeInTheDocument();
    expect(screen.getByText('123')).toBeInTheDocument();
  });

  test('mount with no trackingId → resets form and shows "Not Available"', () => {
    paramsMock = {};
    render(<StartOnboarding />);
    expect(resetFormDataMock).toHaveBeenCalled();

    // Flexible matcher: text can be split by nested tags
    expect(
      screen.getByText((t) => t.includes('Not Available')),
    ).toBeInTheDocument();
  });

  test('Save → POST /api/intake-form then navigates to /gcpOnboarding/:id', async () => {
    makeRequest.mockResolvedValueOnce({ data: { intakeFormTrackingId: 987 }, status: 200 });

    render(<StartOnboarding />);
    click(screen.getByRole('button', { name: /^Save$/i }));

    await waitFor(() => expect(makeRequest).toHaveBeenCalled());

    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({
        method: 'POST',
        endpoints: '/api/intake-form',
        responseType: 'json',
      }),
    );
    expect(navigateMock).toHaveBeenCalledWith('/gcpOnboarding/987');
  });

  test('getFormData non-200 → shows error toast', async () => {
    paramsMock = { trackingId: '555' };
    makeRequest.mockResolvedValueOnce({ data: {}, status: 500 });

    render(<StartOnboarding />);

    const alert = await screen.findByRole('alert');
    expect(alert.innerHTML).toMatch(/Error has occurred while fetching Intake Form/i);
  });

  test('Submit invalid → shows validation toast; does not hit submit API', async () => {
    requiredFieldsMock = ['appDetails.name']; // missing
    render(<StartOnboarding />);

    click(screen.getByRole('button', { name: /^Submit$/i }));

    const alert = await screen.findByRole('alert');
    expect(alert.innerHTML).toMatch(/Please fill in all required fields/i);

    expect(
      makeRequest.mock.calls.some((c) =>
        String(c[0]?.endpoints).includes('/api/submit-intake-form'),
      ),
    ).toBe(false);
  });

  test('Submit valid → POST /api/submit-intake-form; success toast; confirm navigates to /inbox', async () => {
    requiredFieldsMock = [];
    makeRequest.mockResolvedValueOnce({ data: { intakeFormTrackingId: 4321 }, status: 200 });

    render(<StartOnboarding />);

    click(screen.getByRole('button', { name: /^Submit$/i }));

    await waitFor(() =>
      expect(
        makeRequest.mock.calls.some((c) =>
          String(c[0]?.endpoints).includes('/api/submit-intake-form'),
        ),
      ).toBe(true),
    );

    const alert = await screen.findByRole('alert');
    expect(alert.innerHTML).toMatch(/submitted/i);
    expect(alert.innerHTML).toMatch(/4321/);

    click(screen.getByTestId('mock-submit-confirm'));
    expect(navigateMock).toHaveBeenCalledWith('/inbox');
  });

  test('Cancel confirm with trackingId → re-fetches and sets form data', async () => {
    paramsMock = { trackingId: '99' };
    makeRequest
      .mockResolvedValueOnce({ data: { a: 1 }, status: 200 }) // mount
      .mockResolvedValueOnce({ data: { a: 2 }, status: 200 }); // on confirm

    render(<StartOnboarding />);

    click(screen.getByRole('button', { name: /^Cancel$/i }));
    click(screen.getByTestId('mock-cancel-confirm'));

    await waitFor(() => expect(makeRequest).toHaveBeenCalledTimes(2));
    expect(setFormDataMock).toHaveBeenCalledWith({ a: 2 });
  });

  test('Cancel confirm without trackingId → resets to initialFormData', () => {
    paramsMock = {};
    render(<StartOnboarding />);

    click(screen.getByRole('button', { name: /^Cancel$/i }));
    click(screen.getByTestId('mock-cancel-confirm'));

    expect(setFormDataMock).toHaveBeenCalledWith(initialFormDataMock);
  });

  test('Save/Submit disabled when trackingStatus === "Completed"', () => {
    formDataMock = { ...formDataMock, trackingStatus: 'Completed' };
    render(<StartOnboarding />);

    expect(screen.getByRole('button', { name: /^Save$/i })).toBeDisabled();
    expect(screen.getByRole('button', { name: /^Submit$/i })).toBeDisabled();
  });
});
