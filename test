// ====================================================================
// File: src/provision/__tests__/gcp-infra-setup.test.tsx
// ====================================================================
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import GCPInfraSetup from '../gcp-infra-setup';

// ---------- Lightweight MUI mocks (DOM-first, aria-friendly) ----------
jest.mock('@mui/material', () => {
  const React = require('react');

  const Box = ({ children, ...rest }: any) => <div {...rest}>{children}</div>;
  const Grid = ({ children, ...rest }: any) => <div {...rest}>{children}</div>;
  const Typography = ({ children }: any) => <div>{children}</div>;
  const Link = ({ children, ...p }: any) => <a {...p}>{children}</a>;
  const Tooltip = ({ children }: any) => <>{children}</>;
  const CircularProgress = () => <div aria-label="loading" />;
  const Alert = ({ children, ...p }: any) => (
    <div role="alert" {...p}>
      {children}
    </div>
  );
  const Snackbar = ({ open, children }: any) => (open ? <div>{children}</div> : null);

  const IconButton = ({ children, onClick, ...rest }: any) => (
    <button type="button" onClick={onClick} {...rest}>
      {children}
    </button>
  );
  const InputAdornment = ({ children }: any) => <span>{children}</span>;

  // TextField renders an input and optional helper when error=true.
  const TextField = ({
    label,
    name,
    value,
    onChange,
    type = 'text',
    required,
    disabled,
    error,
    helperText,
    InputProps,
  }: any) => (
    <label>
      {label}
      <input
        aria-label={label}
        name={name}
        value={value ?? ''}
        onChange={onChange}
        type={type}
        required={required}
        disabled={disabled}
      />
      {InputProps?.endAdornment}
      {error ? <div data-testid={`${name}-helper`}>{helperText}</div> : null}
    </label>
  );

  const FormControl = ({ children }: any) => <div>{children}</div>;
  const InputLabel = ({ children, id }: any) => <label id={id}>{children}</label>;
  const MenuItem = ({ value, children }: any) => <option value={value}>{children}</option>;
  const Select = ({
    labelId,
    label,
    name,
    value,
    onChange,
    children,
    required,
  }: any) => (
    <label>
      {label}
      <select
        aria-labelledby={labelId}
        aria-label={label}
        name={name}
        value={value ?? ''}
        onChange={onChange}
        required={required}
      >
        {children}
      </select>
    </label>
  );

  const Button = ({ children, onClick, ...rest }: any) => (
    <button type="button" onClick={onClick} {...rest}>
      {children}
    </button>
  );

  return {
    __esModule: true,
    Alert,
    Box,
    Button,
    CircularProgress,
    Grid,
    IconButton,
    InputAdornment,
    InputLabel,
    Link,
    MenuItem,
    Select,
    Snackbar,
    TextField,
    Tooltip,
    Typography,
    FormControl,
  };
});

// ---------- Icons as inert spans ----------
jest.mock('@mui/icons-material', () => {
  const I = ({ 'data-testid': id, ...p }: any) => <span data-testid={id || 'icon'} {...p} />;
  return {
    __esModule: true,
    InfoOutlined: I,
    Visibility: I,
    VisibilityOff: I,
    InfoOutlinedIcon: I,
  };
});

// ---------- Service & Provision Context mocks ----------
const makeRequest = jest.fn();

jest.mock('../../services/useApiService', () => ({
  __esModule: true,
  default: () => ({ makeRequest }),
}));

jest.mock('../ProvisionContext', () => ({
  __esModule: true,
  useProvisionContext: () => ({
    provisioningData: { github_token: 'gh-token', terraform_token: 'tf-token' },
  }),
}));

// ---------- Helpers ----------
function renderSut(
  props?: Partial<React.ComponentProps<typeof GCPInfraSetup>>,
) {
  const defaultProps = {
    appId: 'APPID',
    environment: 'sandbox',
    completedTabs: [] as number[],
    setCompletedTabs: jest.fn(),
    tabIndex: 2,
  };
  return {
    ...render(<GCPInfraSetup {...defaultProps} {...props} />),
    setCompletedTabs:
      (props?.setCompletedTabs as jest.Mock) || (defaultProps.setCompletedTabs as jest.Mock),
  };
}

// ---------- Common fixtures ----------
const GET_ENV = {
  data: {
    env_params: {
      vault_password: '',
      serviceonwrsupportgroup: 'svc-group',
      requesteremail: 'user@example.com',
      app_repo_name: '', // component derives "corp-appid" if falsy
      app_branch_name: 'sandbox',
      app_project_id: 'prj-123',
      app_notification_channel: 'chan',
      saferoom_repo_name: '',
      saferoom_branch_name: 'sandbox',
      saferoom_project_id: 'sprj-1',
      saferoom_notification_channel: 'schan',
    },
  },
};

// ====================================================================
// Tests
// ====================================================================
describe('GCPInfraSetup', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('GET on mount populates fields and marks tab completed', async () => {
    makeRequest.mockResolvedValueOnce(GET_ENV); // useEffect GET

    const { setCompletedTabs } = renderSut();

    // disabled fields show derived values
    expect(
      await screen.findByLabelText(/Repo Name/i),
    ).toHaveValue('corp-appid'); // derived from appId
    expect(screen.getByLabelText(/Project ID/i)).toHaveValue('prj-123');
    expect(screen.getByLabelText(/Email Address/i)).toHaveValue('user@example.com');

    await waitFor(() => {
      expect(setCompletedTabs).toHaveBeenCalled();
    });
  });

  test('password validation shows helper then clears on valid input; visibility toggle works', async () => {
    makeRequest.mockResolvedValueOnce(GET_ENV);

    renderSut();

    const pwd = await screen.findByLabelText(/Vault Password/i);
    // invalid
    fireEvent.change(pwd, { target: { value: 'short' } });
    expect(screen.getByTestId('vault_password-helper')).toHaveTextContent(
      /Password must have 8\+ characters/i,
    );

    // valid: at least 8 chars + number
    fireEvent.change(pwd, { target: { value: 'abcde123' } });
    await waitFor(() => {
      expect(screen.queryByTestId('vault_password-helper')).toBeNull();
    });

    // toggle visibility via icon button rendered inside InputAdornment
    const toggle = screen.getByRole('button', { name: /toggle password/i });
    fireEvent.click(toggle);
    // TextField mock reflects type change via prop; we simply ensure field still present
    expect(screen.getByLabelText(/Vault Password/i)).toBeInTheDocument();
  });

  test('branch select renders environment-specific options and accepts change', async () => {
    makeRequest.mockResolvedValueOnce(GET_ENV);

    renderSut({ environment: 'sandbox' });

    const select = await screen.findByLabelText(/Branch Name/i);
    // sandbox options visible
    expect(select).toHaveDisplayValue('sandbox');
    fireEvent.change(select, { target: { value: 'sandboxdev' } });
    expect(select).toHaveValue('sandboxdev');
  });

  test('POST success shows logs and sets tab completed', async () => {
    // GET
    makeRequest.mockResolvedValueOnce(GET_ENV);
    // POST
    makeRequest.mockResolvedValueOnce({
      status: 200,
      data: { log_output: ['success: created bucket', 'failed: skipped rule'] },
    });

    const { setCompletedTabs } = renderSut();

    // click CTA
    const btn = await screen.findByRole('button', { name: /Build GCP Infrastructure/i });
    fireEvent.click(btn);

    // logs appear
    expect(await screen.findByText(/created bucket/i)).toBeInTheDocument();
    expect(screen.getByText(/skipped rule/i)).toBeInTheDocument();

    // guidance text visible
    expect(
      screen.getByText(/Once GCP Infrastructure Setup is completed/i),
    ).toBeInTheDocument();

    await waitFor(() => {
      expect(setCompletedTabs).toHaveBeenCalled();
    });
  });

  test('POST error path shows snackbar error', async () => {
    // GET
    makeRequest.mockResolvedValueOnce(GET_ENV);
    // POST error response (non-200)
    makeRequest.mockResolvedValueOnce({
      status: 500,
      data: { log_output: [] },
    });

    renderSut();

    const btn = await screen.findByRole('button', { name: /Build GCP Infrastructure/i });
    fireEvent.click(btn);

    // error snackbar appears
    expect(await screen.findByRole('alert')).toBeInTheDocument();
  });
});
