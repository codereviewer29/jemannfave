const handleUploadChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
  type Env = 'UAT' | 'SIT' | 'Sandbox';

  // tiny helpers kept local so you can paste this as-is
  const getEnvKeys = (env: Env) => {
    switch (env) {
      case 'SIT':     return { nameKey: 'sitvenafiFileName',     contentKey: 'sitvenafiFileContent' };
      case 'UAT':     return { nameKey: 'uatvenafiFileName',     contentKey: 'uatvenafiFileContent' };
      case 'Sandbox': return { nameKey: 'sandboxvenafiFileName', contentKey: 'sandboxvenafiFileContent' };
    }
  };
  const hasFileForEnv = (env: Env) => {
    const { nameKey } = getEnvKeys(env);
    return Boolean((formData?.cdnNextDetails as any)?.[nameKey]);
  };

  const files = event.target.files;
  const file = files && files[0];
  if (!file) return;

  // choose ONE target: the first selected env without a file
  const target = (selectedEnvironments as Env[]).find((env) => !hasFileForEnv(env));
  if (!target) {
    // optional: toast/info "File already uploaded for all selected environments. Delete to replace."
    if (fileInputRef.current) fileInputRef.current.value = '';
    return;
  }

  // mark only that env as pending
  setVenafiStatus((s) => ({ ...s, [target]: 'pending' }));

  // build multipart form body (do NOT set Content-Type)
  const venafiData = new FormData();
  venafiData.append('certificate_file', file);

  const httpRequest = {
    method: 'POST' as const,
    endpoints: '/upload-venafi-certificate/',
    responseType: 'json' as const,
    headers: {},          // leave empty so browser sets multipart boundary
    body: venafiData,
  };

  try {
    const response = (await makeRequest(httpRequest)) as any;

    if (response?.data?.status === 'Success') {
      // backend may return per-env fields; otherwise fall back to picked file name/content
      const serverName =
        response?.data?.sitfilename ||
        response?.data?.uatfilename ||
        response?.data?.sandboxfilename ||
        file.name;

      const serverContent =
        response?.data?.sitfilecontent ||
        response?.data?.uatfilecontent ||
        response?.data?.sandboxfilecontent ||
        '';

      // persist only for the ONE target env
      setFormData((prev) => {
        const next: any = { ...prev, cdnNextDetails: { ...prev.cdnNextDetails } };
        const { nameKey, contentKey } = getEnvKeys(target);
        next.cdnNextDetails[nameKey] = serverName || '';
        next.cdnNextDetails[contentKey] = serverContent || '';
        return next;
      });

      setVenafiStatus((s) => ({ ...s, [target]: 'success' }));
    } else {
      setVenafiStatus((s) => ({ ...s, [target]: 'error' }));
    }
  } catch {
    setVenafiStatus((s) => ({ ...s, [target]: 'error' }));
  } finally {
    // allow re-selecting the same filename on the next click
    if (fileInputRef.current) fileInputRef.current.value = '';
  }
};
