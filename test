import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';

/* ---------- FormContext: keep it minimal ---------- */
const setFormDataMock = jest.fn();
const resetFormDataMock = jest.fn();
let requiredFieldsMock: string[] = [];
let formDataMock: any = { trackingStatus: '', appDetails: {}, cdmNextDetails: {} };
const initialFormDataMock = { trackingStatus: '', appDetails: {}, cdmNextDetails: {} };

jest.mock('../FormContext', () => ({
  __esModule: true,
  useFormContext: () => ({
    formData: formDataMock,
    setFormData: setFormDataMock,
    resetFormData: resetFormDataMock,
    requiredFields: requiredFieldsMock,
    initialFormData: initialFormDataMock,
  }),
}));

/* ---------- API hook ---------- */
const makeRequest = jest.fn();
jest.mock('../../services/useApiService', () => ({
  __esModule: true,
  default: () => makeRequest,
}));

/* ---------- Router (include useLocation because CustomNavigation uses it) ---------- */
const navigateMock = jest.fn();
let paramsMock: Record<string, string> | undefined;

jest.mock('react-router-dom', () => ({
  __esModule: true,
  useNavigate: () => navigateMock,
  useParams: () => (paramsMock ?? ({} as any)),
  useLocation: () => ({ pathname: '/' }),
  Link: ({ to, children }: { to: string; children: React.ReactNode }) => (
    <a href={to}>{children}</a>
  ),
}));

/* ---------- Child panes & dialogs as light stubs ---------- */
jest.mock('../applicationDetails', () => () => <div data-testid="app-details" />);
jest.mock('../componentsDetails', () => () => <div data-testid="components-details" />);
jest.mock('../guidelinesIntakeForm', () => () => <div data-testid="guidelines" />);
jest.mock('../intake-components/cancelOnboarding', () => (props: any) => (
  <button data-testid="dlg-cancel-confirm" onClick={props.handleConfirmCancel} />
));
jest.mock('../intake-components/confirmationOnboarding', () => (props: any) => (
  <button data-testid="dlg-submit-confirm" onClick={props.handleConfirmSubmit} />
));

/* ---------- SUT ---------- */
import StartOnboarding from './startOnboarding';

describe('StartOnboarding (lite)', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    paramsMock = undefined;
    requiredFieldsMock = [];
    formDataMock = { trackingStatus: '', appDetails: {}, cdmNextDetails: {} };
  });

  test('renders default tab and primary buttons', () => {
    render(<StartOnboarding />);

    // default Application Details tab is shown
    expect(screen.getByTestId('app-details')).toBeInTheDocument();

    // main action buttons visible
    expect(screen.getByRole('button', { name: /Cancel/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Save/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Submit/i })).toBeInTheDocument();
  });

  test('mount with trackingId → performs GET for intake form', async () => {
    paramsMock = { trackingId: '123' };
    makeRequest.mockResolvedValueOnce({ status: 200, data: { x: 1 } });

    render(<StartOnboarding />);

    await waitFor(() => expect(makeRequest).toHaveBeenCalled());
    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({
        method: 'GET',
        responseType: 'json',
        // keep endpoint assertion broad to avoid trailing-slash issues
        endpoints: expect.stringContaining('/api/intake-form'),
      }),
    );
  });

  test('Save → POST then navigates to /gcpOnboarding/:id', async () => {
    makeRequest.mockResolvedValueOnce({ status: 200, data: { intakeFormTrackingId: 111 } });

    render(<StartOnboarding />);
    fireEvent.click(screen.getByRole('button', { name: /Save/i }));

    await waitFor(() => expect(makeRequest).toHaveBeenCalled());
    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({
        method: 'POST',
        responseType: 'json',
        endpoints: expect.stringContaining('/api/intake-form'),
        body: expect.any(Object),
      }),
    );
    expect(navigateMock).toHaveBeenCalledWith('/gcpOnboarding/111');
  });

  test('Submit non-200 → shows an error alert (no need to match exact text)', async () => {
    // make form valid so submit path runs
    requiredFieldsMock = [];
    makeRequest.mockResolvedValueOnce({ status: 500, data: {} });

    render(<StartOnboarding />);
    fireEvent.click(screen.getByRole('button', { name: /Submit/i }));

    // any MUI Alert will have role="alert"
    const alert = await screen.findByRole('alert');
    expect(alert).toBeInTheDocument();

    // confirm dialog not expected on non-200
    expect(screen.queryByTestId('dlg-submit-confirm')).not.toBeInTheDocument();
  });

  test('buttons disabled when trackingStatus is Completed', () => {
    formDataMock = { ...formDataMock, trackingStatus: 'Completed' };

    render(<StartOnboarding />);

    expect(screen.getByRole('button', { name: /^Save$/i })).toBeDisabled();
    expect(screen.getByRole('button', { name: /^Submit$/i })).toBeDisabled();
  });

  test('tab buttons switch content (sanity)', () => {
    render(<StartOnboarding />);

    // to Component Details
    fireEvent.click(screen.getByRole('button', { name: /Component Details/i }));
    expect(screen.getByTestId('components-details')).toBeInTheDocument();

    // to Guide Lines
    fireEvent.click(screen.getByRole('button', { name: /Guide Lines/i }));
    expect(screen.getByTestId('guidelines')).toBeInTheDocument();
  });
});
