// src/sideNavbar/boarding/startOnboarding.test.tsx
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';

/* ---------- Child stubs (no reads from formData) ---------- */
jest.mock('./applicationDetails', () => () => <div data-testid="app-details" />);
jest.mock('./componentsDetails', () => () => <div data-testid="components-details" />);
jest.mock('../intake-components/guidelinesIntakeForm', () => () => (
  <div data-testid="guidelines" />
));

/* ---------- Dialog stubs (respect "open" flags) ---------- */
jest.mock('../intake-components/cancelOnboarding', () => (props: any) =>
  props.openCancelDialog ? (
    <button data-testid="dlg-cancel-confirm" onClick={props.handleConfirmCancel} />
  ) : null
);

jest.mock('../intake-components/confirmationOnboarding', () => (props: any) =>
  props.openConfirmSubmitDialog ? (
    <button data-testid="dlg-submit-confirm" onClick={props.handleConfirmSubmit} />
  ) : null
);

/* ---------- Keep top nav tiny ---------- */
jest.mock('../../home/CustomNavigation', () => () => <nav data-testid="nav" />);

/* ---------- API service mock ---------- */
const makeRequest = jest.fn();
jest.mock('../../services/useApiService', () => ({
  __esModule: true,
  default: () => ({ makeRequest }),
}));

/* ---------- Router mocks used by StartOnboarding ---------- */
const navigateMock = jest.fn();
let paramsMock: Record<string, string> | undefined;
jest.mock('react-router-dom', () => ({
  __esModule: true,
  useNavigate: () => navigateMock,
  useParams: () => paramsMock ?? {},
  Link: ({ to, children }: any) => <a href={typeof to === 'string' ? to : '/'}>{children}</a>,
}));

/* ---------- FormContext mock: minimal but correct ---------- */
const setFormDataMock = jest.fn();
const resetFormDataMock = jest.fn();
const requiredFieldsMock: string[] = [];
const baseFormData = {
  trackingStatus: '',
  // keep both keys present; pages read them
  appDetails: {},
  applicationDetails: {},
  cdmNextDetails: {},
};
jest.mock('./FormContext', () => ({
  __esModule: true,
  useFormContext: () => ({
    formData: baseFormData,
    setFormData: setFormDataMock,
    resetFormData: resetFormDataMock,
    requiredFields: requiredFieldsMock,
    initialFormData: baseFormData,
  }),
}));

/* ---------- SUT ---------- */
import StartOnboarding from './startOnboarding';

describe('StartOnboarding (lite)', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    paramsMock = undefined; // default: no trackingId in URL
    (baseFormData as any).trackingStatus = '';
  });

  test('mount without trackingId → calls reset and shows basic UI', () => {
    render(<StartOnboarding />);

    expect(resetFormDataMock).toHaveBeenCalled();

    // robust header assertion
    expect(screen.getByText(/GCP Onboarding Form/i)).toBeInTheDocument();
    // default tab content (our stub)
    expect(screen.getByTestId('app-details')).toBeInTheDocument();
  });

  test('mount with trackingId → performs GET for intake form', async () => {
    paramsMock = { trackingId: '123' };
    makeRequest.mockResolvedValueOnce({ data: { foo: 'bar' }, status: 200 });

    render(<StartOnboarding />);

    await waitFor(() => expect(makeRequest).toHaveBeenCalled());
    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({
        method: 'GET',
        // code builds with a query param; match loosely
        endpoints: expect.stringMatching(/\/api\/intake-form\?intakeFormTrackingId=123/i),
        responseType: 'json',
      })
    );
  });

  test('Save → POST then navigates to /gcpOnboarding/:id', async () => {
    makeRequest.mockResolvedValueOnce({ data: { intakeFormTrackingId: 987 }, status: 200 });

    render(<StartOnboarding />);

    fireEvent.click(screen.getByRole('button', { name: /save/i }));

    await waitFor(() => expect(makeRequest).toHaveBeenCalled());
    // Save uses /api/intake-form/   (not /api/submit-intake-form/)
    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({
        method: 'POST',
        endpoints: '/api/intake-form/',
        responseType: 'json',
        body: expect.any(Object),
      })
    );
    expect(navigateMock).toHaveBeenCalledWith('/gcpOnboarding/987');
  });

  test('Submit non-200 → stays on page; confirm dialog not shown; shows alert', async () => {
    makeRequest.mockRejectedValueOnce(new Error('boom'));

    render(<StartOnboarding />);

    fireEvent.click(screen.getByRole('button', { name: /submit/i }));

    await waitFor(() => expect(makeRequest).toHaveBeenCalled());
    expect(navigateMock).not.toHaveBeenCalled();
    // confirm dialog (our stub) should not be visible because "open" never set
    expect(screen.queryByTestId('dlg-submit-confirm')).not.toBeInTheDocument();

    // MUI Alert inside Snackbar uses role="alert"
    const alert = await screen.findByRole('alert');
    expect(alert).toBeInTheDocument();
  });

  test('buttons disabled when trackingStatus is "Completed"', () => {
    (baseFormData as any).trackingStatus = 'Completed';

    render(<StartOnboarding />);

    expect(screen.getByRole('button', { name: /save/i })).toBeDisabled();
    expect(screen.getByRole('button', { name: /submit/i })).toBeDisabled();
  });

  test('tabs switch content (stubs)', () => {
    render(<StartOnboarding />);

    // default tab
    expect(screen.getByTestId('app-details')).toBeInTheDocument();

    fireEvent.click(screen.getByRole('button', { name: /component details/i }));
    expect(screen.getByTestId('components-details')).toBeInTheDocument();

    fireEvent.click(screen.getByRole('button', { name: /guide lines/i }));
    expect(screen.getByTestId('guidelines')).toBeInTheDocument();
  });

  test('Cancel confirm without trackingId → resets to initialFormData', () => {
    render(<StartOnboarding />);

    // clicking page "Cancel" sets openCancelDialog true; our stub will then show confirm button
    fireEvent.click(screen.getByRole('button', { name: /cancel/i }));
    fireEvent.click(screen.getByTestId('dlg-cancel-confirm'));

    expect(setFormDataMock).toHaveBeenCalledWith(baseFormData);
  });
});
