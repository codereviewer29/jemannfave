// ====================================================================
// File: src/provision/__tests__/act-task-validation.test.tsx
// ====================================================================
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import ActTaskValidation from '../act-task-validation';

// ---------- Lightweight MUI mocks (DOM-first, aria-friendly) ----------
jest.mock('@mui/material', () => {
  const React = require('react');

  const Box = ({ children, ...rest }: any) => <div {...rest}>{children}</div>;
  const Typography = ({ children }: any) => <div>{children}</div>;
  const Button = ({ children, onClick, ...rest }: any) => (
    <button type="button" onClick={onClick} {...rest}>
      {children}
    </button>
  );
  const CircularProgress = () => <div aria-label="loading" />;
  const Link = ({ children, ...p }: any) => <a {...p}>{children}</a>;

  return {
    __esModule: true,
    Box,
    Button,
    CircularProgress,
    Typography,
    Link,
  };
});

// ---------- Icons as inert spans ----------
jest.mock('@mui/icons-material/InfoOutlined', () => ({
  __esModule: true,
  default: ({ 'data-testid': id, ...p }: any) => <span data-testid={id || 'info-icon'} {...p} />,
}));

// ---------- Service & Context ----------
const makeRequest = jest.fn();

jest.mock('../../services/useApiService', () => ({
  __esModule: true,
  default: () => ({ makeRequest }),
}));

const setProvisionData = jest.fn();
jest.mock('../ProvisionContext', () => ({
  __esModule: true,
  useProvisionContext: () => ({
    provisioningData: {
      github_token: 'gh-token',
      terraform_token: 'tf-token',
      githubRepo: ['corp-appid', 'misc-repo', 'corp-appid-extra'],
    },
    setProvisionData: (...args: any[]) => setProvisionData(...args),
  }),
}));

// ---------- Child component ----------
jest.mock('../Provision-logs', () => ({
  __esModule: true,
  default: ({ provisioningLogs }: any) => (
    <div data-testid="provision-logs">overall: {provisioningLogs?.overall_status ?? ''}</div>
  ),
}));

// ---------- Helpers ----------
function renderSut(props?: Partial<React.ComponentProps<typeof ActTaskValidation>>) {
  const defaultProps = {
    appId: 'APPID',
    environment: 'Sandbox',
    completedTabs: [] as number[],
    setCompletedTabs: jest.fn(),
    tabIndex: 7,
  };
  return {
    ...render(<ActTaskValidation {...defaultProps} {...props} />),
    setCompletedTabs:
      (props?.setCompletedTabs as jest.Mock) || (defaultProps.setCompletedTabs as jest.Mock),
  };
}

const successPayload = (overall = 'success') => ({
  status: 200,
  data: {
    overall_status: overall,
    validation_results: {
      gcpapp_validation: { status: 'ok', details: [] },
      gcpcdm_validation: { status: 'ok', details: [] },
      github_repos_validation: {
        status: 'ok',
        details: ['corp-appid', 'misc-repo', 'corp-appid-extra'],
      },
      secondary_ranges_validation: { status: 'ok', details: [] },
      workspace_validation: { status: 'ok', details: [] },
    },
  },
});

// ====================================================================
// Tests
// ====================================================================
describe('ActTaskValidation', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('mount: success fetch shows logs, next-step text, filters repos, and marks tab complete', async () => {
    makeRequest.mockResolvedValueOnce(successPayload('success'));

    const { setCompletedTabs } = renderSut();

    // Logs component rendered with overall status
    expect(await screen.findByTestId('provision-logs')).toHaveTextContent(/overall: success/i);

    // "Next Step" guidance visible
    expect(
      screen.getByText(/Once GCP Project Task Validation is completed/i),
    ).toBeInTheDocument();

    // Repo filter invoked (we don't execute the updater fn here; we just ensure it's called)
    await waitFor(() => expect(setProvisionData).toHaveBeenCalled());

    // Tab marked as complete
    await waitFor(() => expect(setCompletedTabs).toHaveBeenCalled());
  });

  test('mount: failure fetch shows logs and displays Run Validation button', async () => {
    makeRequest.mockResolvedValueOnce(successPayload('failure'));

    renderSut();

    expect(await screen.findByTestId('provision-logs')).toHaveTextContent(/overall: failure/i);
    expect(
      screen.getByRole('button', { name: /Run GCP Project Task Validation/i }),
    ).toBeInTheDocument();
  });

  test('clicking Run Validation posts again, shows logs, hides button, and marks tab complete', async () => {
    // First call → failure to show the button
    makeRequest.mockResolvedValueOnce(successPayload('failure'));
    // Second call → success after clicking button
    makeRequest.mockResolvedValueOnce(successPayload('success'));

    const { setCompletedTabs } = renderSut();

    const runBtn = await screen.findByRole('button', {
      name: /Run GCP Project Task Validation/i,
    });
    fireEvent.click(runBtn);

    // After POST success, logs show success and button hidden
    expect(await screen.findByTestId('provision-logs')).toHaveTextContent(/overall: success/i);
    expect(
      screen.queryByRole('button', { name: /Run GCP Project Task Validation/i }),
    ).toBeNull();

    await waitFor(() => expect(setCompletedTabs).toHaveBeenCalled());
  });

  test('request rejection is handled (no crash), spinner turns off and logs not shown', async () => {
    // Reject on mount
    makeRequest.mockRejectedValueOnce(new Error('network'));

    renderSut();

    // Spinner gone and no logs present
    await waitFor(() => {
      expect(screen.queryByLabelText(/loading/i)).toBeNull();
      expect(screen.queryByTestId('provision-logs')).toBeNull();
    });
  });
});
