// path: src/buildInventory/inventory/__tests__/Inventory.test.tsx

import React from 'react';
import { render, screen, waitFor, fireEvent, within } from '@testing-library/react';
import '@testing-library/jest-dom';

// ----------------- Router mocks -----------------
const mockNavigate = jest.fn();
let mockLocationState: any = null;

jest.mock('react-router-dom', () => ({
  useNavigate: () => mockNavigate,
  useLocation: () => ({ state: mockLocationState }),
  useParams: () => ({}),
}));

// ----------------- API hook mock -----------------
const makeRequestSpy = jest.fn();
jest.mock('../../services/useAPIService', () => ({
  __esModule: true,
  default: () =>
    ((req: { endpoints: string }) => makeRequestSpy(req)) as unknown,
}));

// ----------------- Constants mock -----------------
jest.mock('../../constants/inventory-constants', () => ({
  LANE_ORDER: ['L1', 'L2', 'L3', 'L4'],
}));

// ----------------- Child UI mocks -----------------
jest.mock('../../components/TreeView/Tree-View', () => ({
  __esModule: true,
  default: ({ tabname }: { tabname: string }) => (
    <div data-testid={`tree-view-${tabname}`} />
  ),
}));

jest.mock('../../components/ApplicationVersion/Application-Version', () => ({
  __esModule: true,
  default: ({ tabname }: { tabname: string }) => (
    <div data-testid={`app-version-${tabname}`} />
  ),
}));

type OptionType = { id: number; value: string; label: string };
function MockDropDown({
  value,
  options,
  onChange,
  'data-testid': testId,
}: {
  value: OptionType | null;
  options: OptionType[];
  onChange: (opt: OptionType) => void;
  'data-testid': string;
}) {
  return (
    <select
      data-testid={testId}
      value={value?.value ?? ''}
      onChange={(e) => {
        const opt = options.find((o) => o.value === e.target.value);
        if (opt) onChange(opt);
      }}
    >
      <option value="" aria-label="empty" />
      {options.map((o) => (
        <option key={`${o.id}-${o.value}`} value={o.value}>
          {o.label}
        </option>
      ))}
    </select>
  );
}
// IMPORTANT: match the exact import path used in your file
jest.mock('../../components/DropDown/DropDown', () => ({
  __esModule: true,
  default: MockDropDown,
}));

// ----------------- MUI mocks (fixes createTheme error) -----------------
// We stub only what Inventory.tsx imports.
// 1) Named exports from '@mui/material'
jest.mock('@mui/material', () => {
  const React = require('react');
  const Passthrough =
    (role?: string) =>
    ({ children, ...rest }: any) =>
      React.createElement(role ? 'div' : 'div', role ? { role, ...rest } : rest, children);

  const Tab = ({ label, ...rest }: any) => (
    <button role="tab" {...rest}>
      {label}
    </button>
  );
  const Tabs = ({ children, onChange }: any) => (
    <div role="tablist" onClick={(e) => e} data-testid="tabs">
      {children}
    </div>
  );
  const Button = ({ children, ...rest }: any) => (
    <button type="button" {...rest}>
      {children}
    </button>
  );
  const Typography = ({ children, ...rest }: any) => <div {...rest}>{children}</div>;
  const CircularProgress = Passthrough();

  return {
    __esModule: true,
    // named exports used in your file
    Button,
    CircularProgress,
    Tab,
    Tabs,
    Typography,
    useTheme: () => ({ direction: 'ltr' }), // minimal stub
  };
});

// 2) Default exports from subpaths '@mui/material/Box' and '@mui/material/Grid'
jest.mock('@mui/material/Box', () => {
  const React = require('react');
  return {
    __esModule: true,
    default: ({ children, ...rest }: any) => <div {...rest}>{children}</div>,
  };
});

jest.mock('@mui/material/Grid', () => {
  const React = require('react');
  // We mimic MUI's Grid default export with item/container props ignored
  const Grid = ({ children, ...rest }: any) => <div {...rest}>{children}</div>;
  return { __esModule: true, default: Grid };
});

// ----------------- Fixtures -----------------
const PROJECT_ENV_ROWS = [
  { projectid: 'app1', prj_env_id: 10, env_id: 'dev', env_lane: 'L2' },
  { projectid: 'app1', prj_env_id: 11, env_id: 'qa', env_lane: 'L1' },
  { projectid: 'app2', prj_env_id: 20, env_id: 'dev', env_lane: 'L3' },
];

const COMPONENTS_PAYLOAD = {
  data: {
    component_response: [
      { component_type: 'service', name: 'svc-a' },
      { component_type: 'google_storage_bucket_object', name: 'skip-me' },
    ],
  },
};
const SAFEROOM_PAYLOAD = {
  data: {
    saferoom_response: [
      { component_type: 'infra', name: 'sg-a' },
      { component_type: 'google_storage_bucket_object', name: 'skip-me-too' },
    ],
  },
};
const VERSION_PAYLOAD = {
  data: { cdp_cdp_version_response: [{ artifact: 'a', version: '1.2.3' }] },
};

function primeHappyApi() {
  makeRequestSpy.mockImplementation(({ endpoints }) => {
    if (endpoints.includes('getInventoryEnvProject')) {
      return Promise.resolve({ data: PROJECT_ENV_ROWS });
    }
    if (endpoints.includes('getTenantAppCompDetails')) {
      return Promise.resolve(COMPONENTS_PAYLOAD);
    }
    if (endpoints.includes('getTenantAppCompSafeRoomDetails')) {
      return Promise.resolve(SAFEROOM_PAYLOAD);
    }
    if (endpoints.includes('getTenantAppVersionDetails')) {
      return Promise.resolve(VERSION_PAYLOAD);
    }
    return Promise.resolve({ data: {} });
  });
}

import Inventory from '../Inventory';

const flush = () => new Promise((r) => setTimeout(r, 0));

describe('Inventory', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    mockLocationState = null;
  });

  test('renders tabs and loads projects', async () => {
    primeHappyApi();
    render(<Inventory />);

    ['GCP APP', 'GCP SAFEROOM', 'CDP', 'SAFEROOM', 'CDM Next'].forEach((l) =>
      expect(screen.getByRole('tab', { name: l })).toBeInTheDocument()
    );

    const projectDd = await screen.findByTestId('project-dropdown');
    const opts = within(projectDd).getAllByRole('option');
    expect(opts.length).toBe(3); // empty + APP1 + APP2
    expect(opts.map((o) => (o as HTMLOptionElement).text)).toEqual(
      expect.arrayContaining(['APP1', 'APP2'])
    );
  });

  test('selecting project and lane issues 3 parallel fetches', async () => {
    primeHappyApi();
    render(<Inventory />);

    const projectDd = await screen.findByTestId('project-dropdown');
    fireEvent.change(projectDd, { target: { value: 'app1' } });
    await flush();

    const laneDd = await screen.findByTestId('lane-dropdown');
    const laneOptions = within(laneDd).getAllByRole('option');
    const labels = laneOptions.map((o) => (o as HTMLOptionElement).text);
    expect(labels).toEqual(expect.arrayContaining(['L1', 'L2']));

    fireEvent.change(laneDd, { target: { value: 'L1' } });

    await waitFor(() => {
      expect(makeRequestSpy).toHaveBeenCalledWith(
        expect.objectContaining({ endpoints: expect.stringContaining('getTenantAppCompDetails') })
      );
      expect(makeRequestSpy).toHaveBeenCalledWith(
        expect.objectContaining({
          endpoints: expect.stringContaining('getTenantAppCompSafeRoomDetails'),
        })
      );
      expect(makeRequestSpy).toHaveBeenCalledWith(
        expect.objectContaining({
          endpoints: expect.stringContaining('getTenantAppVersionDetails'),
        })
      );
    });
  });

  test('initialization via location.state triggers one submit', async () => {
    primeHappyApi();
    mockLocationState = { tenant: 'app2', env: 'dev', lane: 'L3' };

    render(<Inventory />);

    await waitFor(() => {
      const versionCalls = makeRequestSpy.mock.calls.filter((c) =>
        String(c[0]?.endpoints || '').includes('getTenantAppVersionDetails')
      );
      expect(versionCalls.length).toBe(1);
    });
  });

  test('empty project list branch logs error and shows empty dropdown', async () => {
    makeRequestSpy.mockImplementation(({ endpoints }) => {
      if (endpoints.includes('getInventoryEnvProject')) return Promise.resolve({ data: [] });
      return Promise.resolve({ data: {} });
    });

    const errSpy = jest.spyOn(console, 'error').mockImplementation(() => {});
    render(<Inventory />);

    const projectDd = await screen.findByTestId('project-dropdown');
    const opts = within(projectDd).getAllByRole('option');
    expect(opts.length).toBe(1); // only placeholder

    expect(errSpy).toHaveBeenCalled();
    errSpy.mockRestore();
  });

  test('tab switching toggles visibility', async () => {
    primeHappyApi();
    render(<Inventory />);

    fireEvent.click(screen.getByRole('tab', { name: 'GCP SAFEROOM' }));
    // panel presence check; our mocked Tabs don't manage aria-hidden,
    // but Inventory's TabPanel still renders with role="tabpanel"
    const panels = screen.getAllByRole('tabpanel', { hidden: true });
    expect(panels.length).toBeGreaterThan(0);
  });
});
