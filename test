// ====================================================================
// File: src/services/processHttp.test.ts
// ====================================================================
import { processHttpRequest } from './processHttp';
import type { HttpRequest } from './types';

// ---- axios mock ----
const axiosGet = jest.fn();
const axiosPost = jest.fn();
const axiosPut = jest.fn();
const axiosDelete = jest.fn();

jest.mock('axios', () => ({
  __esModule: true,
  default: {
    get: (...args: any[]) => (global as any).__ax.get(...args),
    post: (...args: any[]) => (global as any).__ax.post(...args),
    put: (...args: any[]) => (global as any).__ax.put(...args),
    delete: (...args: any[]) => (global as any).__ax.delete(...args),
  },
}));

const API = 'https://api.example.com';
const token = 'tok123';

// Fully typed factory: include responseType to satisfy HttpRequest
const baseReq = (over: Partial<HttpRequest> = {}): HttpRequest => ({
  method: 'GET',                         // 'GET' | 'POST' | 'PUT' | 'DELETE'
  endpoints: '/v1/resource',
  body: undefined,
  headers: undefined,
  responseType: undefined as any,        // explicitly present (can be undefined)
  ...over,
});

describe('processHttpRequest', () => {
  beforeEach(() => {
    (global as any).__ax = {
      get: axiosGet.mockResolvedValue('GET_RES'),
      post: axiosPost.mockResolvedValue('POST_RES'),
      put: axiosPut.mockResolvedValue('PUT_RES'),
      delete: axiosDelete.mockResolvedValue('DEL_RES'),
    };
    jest.clearAllMocks();
  });

  test('GET builds URL, merges headers, and passes axios options', async () => {
    const req = baseReq({ method: 'GET', headers: { 'X-Foo': 'bar' } });

    const res = await processHttpRequest(req, token, API);
    expect(res).toBe('GET_RES');
    expect(axiosGet).toHaveBeenCalledTimes(1);

    const [url, options] = axiosGet.mock.calls[0];
    expect(url).toBe(`${API}${req.endpoints}`);
    expect(options.headers).toMatchObject({
      Authorization: `Bearer ${token}`,
      'Content-Type': 'application/json',
      'X-Foo': 'bar',
    });
    expect(options.withCredentials).toBe(true);
    expect(options.timeout).toBe(120000);
    expect(typeof options.validateStatus).toBe('function');
    expect(options.validateStatus(500)).toBe(true);
  });

  test('POST forwards body and axios options', async () => {
    const body = { a: 1 };
    const req = baseReq({ method: 'POST', body });

    const out = await processHttpRequest(req, token, API);
    expect(out).toBe('POST_RES');

    const [url, sentBody, options] = axiosPost.mock.calls[0];
    expect(url).toBe(`${API}${req.endpoints}`);
    expect(sentBody).toEqual(body);
    expect(options.headers.Authorization).toBe(`Bearer ${token}`);
  });

  test('PUT forwards body with merged/overridden headers', async () => {
    const req = baseReq({
      method: 'PUT',
      body: { b: 2 },
      headers: { 'Content-Type': 'application/merge-patch+json' },
    });

    await processHttpRequest(req, token, API);

    const [_url, _body, options] = axiosPut.mock.calls[0];
    expect(options.headers['Content-Type']).toBe('application/merge-patch+json');
    expect(options.headers.Authorization).toBe(`Bearer ${token}`);
  });

  test('DELETE passes body in options.data and validateStatus always true', async () => {
    const req = baseReq({ method: 'DELETE', body: { id: '42' } });

    await processHttpRequest(req, token, API);

    const [url, delOptions] = axiosDelete.mock.calls[0];
    expect(url).toBe(`${API}${req.endpoints}`);
    expect(delOptions.headers.Authorization).toBe(`Bearer ${token}`);
    expect(delOptions.data).toEqual({ id: '42' });
    expect(delOptions.validateStatus(418)).toBe(true);
  });

  test('DELETE with no body sends {} in options.data', async () => {
    const req = baseReq({ method: 'DELETE' });

    await processHttpRequest(req, token, API);

    const [_url, delOptions] = axiosDelete.mock.calls[0];
    expect(delOptions.data).toEqual({});
  });

  test('respects responseType when provided', async () => {
    const req = baseReq({ method: 'GET', responseType: 'blob' as any });

    await processHttpRequest(req, token, API);

    const [_url, options] = axiosGet.mock.calls[0];
    expect(options.responseType).toBe('blob');
  });
});
