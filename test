// src/provision/gcp-infra-setup.test.tsx
import React, { ComponentProps } from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import GCPInfraSetup from './gcp-infra-setup';

// ---- Mocks ----

// makeRequest (API client)
const makeRequestMock = jest.fn();
jest.mock('../services/useApiService', () => ({
  __esModule: true,
  default: () => ({ makeRequest: makeRequestMock }),
}));

// Provision context (tokens, etc.)
const setProvisionDataMock = jest.fn();
jest.mock('../ProvisionContext', () => ({
  __esModule: true,
  useProvisionContext: () => ({
    provisioningData: {
      githubToken: 'ghp_ctx',
      terraformToken: 'tf_ctx',
    },
    setProvisionData: setProvisionDataMock,
  }),
}));

// router navigate
const navigateMock = jest.fn();
jest.mock('react-router-dom', () => {
  const real = jest.requireActual('react-router-dom');
  return {
    ...real,
    useNavigate: () => navigateMock,
  };
});

// MUI icons (keep simple)
jest.mock('@mui/icons-material/Visibility', () => ({
  __esModule: true,
  default: (props: any) => <i data-testid="vis-on" {...props} />,
}));
jest.mock('@mui/icons-material/VisibilityOff', () => ({
  __esModule: true,
  default: (props: any) => <i data-testid="vis-off" {...props} />,
}));

// window.open (used by some links)
const openSpy = jest.spyOn(window, 'open').mockImplementation(() => null);

// ---- Typing helpers & render helper ----

type Props = ComponentProps<typeof GCPInfraSetup>;

// strongly typed setter we can assert
const setCompletedTabsMock = jest.fn() as unknown as React.Dispatch<
  React.SetStateAction<number[]>
>;

function renderPage(overrides: Partial<Props> = {}) {
  const base: Props = {
    appid: 'abc-999',
    environment: 'dev',
    completedTabs: [],
    setCompletedTabs: setCompletedTabsMock,
    tabIndex: 2,
  };

  const props: Props = { ...base, ...(overrides as Partial<Props>) };

  const ui = render(<GCPInfraSetup {...props} />);
  return { ...props, ui };
}

// ---- Fixtures ----
const envParamsFixture = {
  env_params: {
    vault_password: 'P@ssw0rd1',
    servicenowsupportgroup: 'app-support',
    requestemail: 'app-team@corp.test',
    app_repo_name: 'corp-abc-999',
    app_branch_name: 'main',
    app_project_id: 'p-123',
    app_notification_channel: 'app-chan',
    saferoom_repo_name: 'corp-abc-999-safe',
    saferoom_branch_name: 'main',
    saferoom_project_id: 's-456',
    saferoom_notification_channel: 'safe-chan',
  },
};

beforeEach(() => {
  makeRequestMock.mockReset();
  setCompletedTabsMock && (setCompletedTabsMock as unknown as jest.Mock).mockReset?.();
  navigateMock.mockReset();
});
afterAll(() => openSpy.mockRestore());

// ---- Tests ----

describe('GCPInfraSetup', () => {
  test('loads existing env params (GET) and renders the form with values', async () => {
    // bootstrap GET returns saved values
    makeRequestMock.mockResolvedValueOnce({ data: envParamsFixture });

    renderPage();

    // 1) initial GET is made
    await waitFor(() =>
      expect(makeRequestMock).toHaveBeenCalledWith(
        expect.objectContaining({
          method: 'GET',
          endPoints: expect.stringMatching(/get-env-params/i),
        }),
      ),
    );

    // 2) form shows values from the payload
    const vaultInput = screen.getByLabelText(/vault password/i) as HTMLInputElement;
    expect(vaultInput.value).toBe('P@ssw0rd1');

    expect((screen.getByLabelText(/repo name/i) as HTMLInputElement).value).toBe(
      'corp-abc-999',
    );
    expect((screen.getByLabelText(/branch name/i) as HTMLInputElement).value).toBe(
      'main',
    );
    expect((screen.getByLabelText(/project id/i) as HTMLInputElement).value).toBe(
      'p-123',
    );
    expect(
      (screen.getByLabelText(/notification channel/i) as HTMLInputElement).value,
    ).toBe('app-chan');
  });

  test('clicking "Build GCP Infrastructure" posts env params and marks tab complete', async () => {
    // GET -> returns existing params
    makeRequestMock.mockResolvedValueOnce({ data: envParamsFixture });
    // POST -> success (status 200) with logs
    makeRequestMock.mockResolvedValueOnce({
      data: { log_output: ['success: infra created'] },
      status: 200,
    });

    const { tabIndex } = renderPage();

    // wait for the initial GET
    await waitFor(() => expect(makeRequestMock).toHaveBeenCalled());

    // click the submit/build button
    const buildBtn = await screen.findByRole('button', {
      name: /build gcp infrastructure/i,
    });
    fireEvent.click(buildBtn);

    // POST was sent with env params and tokens from context
    await waitFor(() =>
      expect(makeRequestMock).toHaveBeenCalledWith(
        expect.objectContaining({
          method: 'POST',
          endPoints: expect.stringMatching(/tab=gcpapp/i),
          body: expect.objectContaining({
            env_params: expect.objectContaining({
              app_repo_name: expect.any(String),
              app_project_id: expect.any(String),
            }),
            github_token: 'ghp_ctx',
            terraform_token: 'tf_ctx',
          }),
        }),
      ),
    );

    // setCompletedTabs called (mark tab complete)
    const calls = (setCompletedTabsMock as unknown as jest.Mock).mock.calls;
    expect(calls.length).toBeGreaterThan(0);
    const updater = calls.at(-1)?.[0] as
      | number[]
      | ((prev: number[]) => number[]);

    const next = typeof updater === 'function' ? updater([0, 1]) : updater;
    expect(next).toEqual(expect.arrayContaining([tabIndex]));
  });

  test('password visibility toggle switches input type', async () => {
    makeRequestMock.mockResolvedValueOnce({ data: envParamsFixture });

    renderPage();

    // wait for bootstrap
    await screen.findByLabelText(/vault password/i);

    const input = screen.getByLabelText(/vault password/i) as HTMLInputElement;
    expect(input.type).toBe('password');

    const toggle = screen.getByRole('button', {
      name: /toggle password visibility/i,
    });
    fireEvent.click(toggle);

    expect(input.type).toBe('text');

    fireEvent.click(toggle);
    expect(input.type).toBe('password');
  });
});
