// src/sideNavbar/boarding/intake-components/gcpSaferoomIntakeForm.test.tsx
import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { createMemoryRouter, RouterProvider } from 'react-router-dom';

// ---- MUI stubs (tiny + a11y-friendly) ----
jest.mock('@mui/material', () => {
  const React = require('react');

  const Box = ({ children, ...rest }: any) => <div {...rest}>{children}</div>;
  const Grid = ({ children, ...rest }: any) => <div {...rest}>{children}</div>;

  const TextField = ({
    label,
    name,
    value,
    onChange,
    required,
    disabled,
    ...rest
  }: any) => (
    <label>
      {label}
      <input
        aria-label={label}
        name={name}
        value={value}
        onChange={(e) =>
          onChange?.({ target: { name: name ?? rest.name, value: e.target.value } })
        }
        required={required}
        disabled={disabled}
      />
    </label>
  );

  const Button = ({ children, onClick, disabled, ...rest }: any) => (
    <button onClick={onClick} disabled={disabled} {...rest}>
      {children}
    </button>
  );

  const Alert = ({ children, severity }: any) => (
    <div role="alert" data-severity={severity}>
      {children}
    </div>
  );

  const Tooltip = ({ title, children }: any) => (
    <div>
      <div data-testid="tooltip-title">{title}</div>
      {children}
    </div>
  );

  return {
    __esModule: true,
    Box,
    Grid,
    TextField,
    Button,
    Alert,
    Tooltip,
  };
});

jest.mock('@mui/icons-material/Info', () => ({
  __esModule: true,
  default: () => <span data-testid="info-icon" />,
}));

// ---- SUT AFTER mocks ----
import GCPSaferoomIntakeForm from './gcpSaferoomIntakeForm';

// ---- Helpers ----
function renderWithDataRouter(ui: React.ReactElement) {
  const router = createMemoryRouter([{ path: '/', element: ui }], {
    initialEntries: ['/'],
  });
  return render(<RouterProvider router={router} />);
}

async function fillValidForm(user: ReturnType<typeof userEvent.setup>) {
  await user.type(
    screen.getByLabelText(/request number for sa role binding/i),
    '123'
  );
  await user.type(
    screen.getByLabelText(/request number for ad group role binding/i),
    '456'
  );
}

// ---- Tests ----
describe('GCPSaferoomIntakeForm', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders inputs and buttons', () => {
    renderWithDataRouter(<GCPSaferoomIntakeForm intakeFormTrackingId={1} />);

    expect(
      screen.getByLabelText(/request number for sa role binding/i)
    ).toBeInTheDocument();
    expect(
      screen.getByLabelText(/request number for ad group role binding/i)
    ).toBeInTheDocument();

    expect(screen.getByRole('button', { name: /cancel/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /save/i })).toBeInTheDocument();
  });

  test('shows success alert when form valid and saved', async () => {
    const user = userEvent.setup();
    renderWithDataRouter(<GCPSaferoomIntakeForm intakeFormTrackingId={1} />);

    await fillValidForm(user);
    await user.click(screen.getByRole('button', { name: /save/i }));

    expect(screen.getByRole('alert')).toHaveTextContent(/saved successfully/i);
    expect(screen.queryByText(/please complete all required/i)).not.toBeInTheDocument();
  });

  test('shows error alert when required fields missing', async () => {
    const user = userEvent.setup();
    renderWithDataRouter(<GCPSaferoomIntakeForm intakeFormTrackingId={1} />);

    await user.click(screen.getByRole('button', { name: /save/i }));
    expect(screen.getByRole('alert')).toHaveTextContent(/please complete all required/i);
  });

  test('cancel button logs to console', async () => {
    const logSpy = jest.spyOn(console, 'log').mockImplementation(() => {});
    const user = userEvent.setup();
    renderWithDataRouter(<GCPSaferoomIntakeForm intakeFormTrackingId={1} />);

    await user.click(screen.getByRole('button', { name: /cancel/i }));
    expect(logSpy).toHaveBeenCalledWith('Form cancelled');
  });
});
