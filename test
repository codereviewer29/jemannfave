// src/services/useApiService.test.tsx
import { renderHook, act } from '@testing-library/react';
import processHttpRequest from './processHttp';
import useApiService from './useApiService';
import type { HttpRequest } from './types';

// --- Mock @wf/react-library BEFORE importing its members (avoid loading ESM deps)
jest.mock('@wf/react-library', () => ({
  __esModule: true,
  useAppGlobalState: jest.fn(),
  useConfig: jest.fn(),
}));

// Now import the mocked hooks (these are jest.fn())
import { useAppGlobalState, useConfig } from '@wf/react-library';

// --- Mock the default export from ./processHttp
jest.mock('./processHttp', () => ({
  __esModule: true,
  default: jest.fn(),
}));

const useAppGlobalStateMock = useAppGlobalState as unknown as jest.Mock;
const useConfigMock = useConfig as unknown as jest.Mock;
const processHttpRequestMock = processHttpRequest as unknown as jest.Mock;

// Handy constants
const BASE = 'https://api.example.com';
const TOKEN = { access_token: 'tok_123' };

// Minimal helper to satisfy your HttpRequest type without fighting TS here
const makeReq = (endpoint: string): HttpRequest =>
  ({ method: 'GET', endpoint, responseType: 'json' } as unknown as HttpRequest);

beforeEach(() => {
  jest.clearAllMocks();
  // default mocks used by most tests
  useConfigMock.mockReturnValue({ API_BASE_ENDPOINT: BASE });
  useAppGlobalStateMock.mockReturnValue({ token: TOKEN });
});

describe('useApiService', () => {
  test('calls processHttpRequest with (request, access_token, baseEndpoint)', async () => {
    processHttpRequestMock.mockResolvedValue({ ok: true });

    const { result } = renderHook(() => useApiService());
    const req = makeReq('/things');

    await act(async () => {
      await result.current.makeRequest(req);
    });

    expect(processHttpRequestMock).toHaveBeenCalledTimes(1);
    expect(processHttpRequestMock).toHaveBeenCalledWith(req, TOKEN.access_token, BASE);
  });

  test('passes undefined token when global state has no token', async () => {
    useAppGlobalStateMock.mockReturnValue({ token: undefined });
    processHttpRequestMock.mockResolvedValue({ ok: true });

    const { result } = renderHook(() => useApiService());
    const req = makeReq('/stuff');

    await act(async () => {
      await result.current.makeRequest(req);
    });

    expect(processHttpRequestMock).toHaveBeenCalledWith(req, undefined, BASE);
  });

  test('returns the resolved value from processHttpRequest', async () => {
    const payload = { id: 7, name: 'thing' };
    processHttpRequestMock.mockResolvedValue(payload);

    const { result } = renderHook(() => useApiService());
    const req = makeReq('/thing/7');

    const value = await act(async () => result.current.makeRequest(req));
    expect(value).toBe(payload);
  });

  test('propagates errors from processHttpRequest', async () => {
    const err = new Error('network down');
    processHttpRequestMock.mockRejectedValue(err);

    const { result } = renderHook(() => useApiService());
    const req = makeReq('/oops');

    await expect(result.current.makeRequest(req)).rejects.toThrow('network down');
  });
});
