// src/sideNavbar/boarding/intake-components/confirmationOnboarding.test.tsx
import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

// ---- Minimal MUI stubs (Dialog shows children only when open) ----
jest.mock('@mui/material', () => {
  const React = require('react');

  const Dialog = ({ open, onClose, children }: any) => (
    <div data-testid="dialog">{open ? <div>{children}<button
      aria-label="close-dialog"
      onClick={() => onClose?.({}, 'backdropClick')}
    /></div> : null}</div>
  );
  const DialogTitle = ({ children }: any) => <h2>{children}</h2>;
  const DialogContent = ({ children }: any) => <div>{children}</div>;
  const DialogContentText = ({ children }: any) => <p>{children}</p>;
  const DialogActions = ({ children }: any) => <div>{children}</div>;
  const Button = ({ children, onClick, ...rest }: any) => (
    <button onClick={onClick} {...rest}>{children}</button>
  );

  return {
    __esModule: true,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogContentText,
    DialogActions,
    Button,
  };
});

// ---- SUT ----
import ConfirmationOnboarding from './confirmationOnboarding';

describe('ConfirmationOnboarding', () => {
  test('renders title, message and tracking id when open', () => {
    const onConfirm = jest.fn();
    render(
      <ConfirmationOnboarding
        intakeFormTrackingId={12345}
        openConfirmSubmitDialog={true}
        handleConfirmSubmit={onConfirm}
      />
    );

    expect(screen.getByRole('heading', { name: /information/i })).toBeInTheDocument();
    expect(
      screen.getByText(/gcp provisioning form is submitted succesfully/i)
    ).toBeInTheDocument();
    expect(screen.getByText(/12345/)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /ok/i })).toBeInTheDocument();
  });

  test('does not render dialog content when closed', () => {
    const onConfirm = jest.fn();
    render(
      <ConfirmationOnboarding
        intakeFormTrackingId={1}
        openConfirmSubmitDialog={false}
        handleConfirmSubmit={onConfirm}
      />
    );

    expect(screen.queryByRole('heading', { name: /information/i })).not.toBeInTheDocument();
    expect(screen.getByTestId('dialog')).toBeInTheDocument(); // container exists from stub
  });

  test('clicking Ok calls handleConfirmSubmit', async () => {
    const onConfirm = jest.fn();
    const user = userEvent.setup();
    render(
      <ConfirmationOnboarding
        intakeFormTrackingId={7}
        openConfirmSubmitDialog={true}
        handleConfirmSubmit={onConfirm}
      />
    );

    await user.click(screen.getByRole('button', { name: /ok/i }));
    expect(onConfirm).toHaveBeenCalledTimes(1);
  });

  test('closing the dialog triggers handleConfirmSubmit (onClose)', async () => {
    const onConfirm = jest.fn();
    const user = userEvent.setup();
    render(
      <ConfirmationOnboarding
        intakeFormTrackingId={99}
        openConfirmSubmitDialog={true}
        handleConfirmSubmit={onConfirm}
      />
    );

    await user.click(screen.getByRole('button', { name: /close-dialog/i }));
    expect(onConfirm).toHaveBeenCalledTimes(1);
  });
});
