import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';

/* ───────────────── Child stubs (no reads from formData so nothing crashes) */
jest.mock('../applicationDetails', () => () => <div data-testid="app-details" />);
jest.mock('../componentsDetails', () => () => <div data-testid="components-details" />);
jest.mock('../intake-components/guidelinesIntakeForm', () => () => (
  <div data-testid="guidelines" />
));

/* ───────────────── Dialog stubs used by StartOnboarding (just buttons to click) */
jest.mock('../intake-components/cancelOnboarding', () => (props: any) => (
  <button data-testid="dlg-cancel-confirm" onClick={props.handleConfirmCancel} />
));
jest.mock('../intake-components/confirmationOnboarding', () => (props: any) => (
  <button data-testid="dlg-submit-confirm" onClick={props.handleConfirmSubmit} />
));

/* ───────────────── Keep the top nav tiny */
jest.mock('../../home/CustomNavigation', () => () => <nav data-testid="nav" />);

/* ───────────────── API mock (so we never import ESM libs from node_modules) */
const makeRequest = jest.fn();
jest.mock('../../services/useApiService', () => ({
  __esModule: true,
  default: () => ({ makeRequest }),
}));

/* ───────────────── Router mocks used by the component */
const navigateMock = jest.fn();
let paramsMock: Record<string, string> | undefined;
jest.mock('react-router-dom', () => ({
  __esModule: true,
  useNavigate: () => navigateMock,
  useParams: () => paramsMock ?? {},
  Link: ({ to, children }: any) => <a href={typeof to === 'string' ? to : '/'}>{children}</a>,
}));

/* ───────────────── FormContext mock: minimal but correct shape
   IMPORTANT: include BOTH appDetails and applicationDetails like the component expects.
*/
const setFormDataMock = jest.fn();
const resetFormDataMock = jest.fn();
const requiredFieldsMock: string[] = [];
const baseFormData = {
  trackingStatus: '',
  // keep both keys present to be safe with any spread/reads
  appDetails: {},
  applicationDetails: {},
  cdmNextDetails: {},
};

jest.mock('../FormContext', () => ({
  __esModule: true,
  useFormContext: () => ({
    formData: baseFormData,
    setFormData: setFormDataMock,
    resetFormData: resetFormDataMock,
    requiredFields: requiredFieldsMock,
    initialFormData: baseFormData,
  }),
  initialFormData: baseFormData,
}));

/* ───────────────── SUT */
import StartOnboarding from './startOnboarding';

describe('StartOnboarding (lite)', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    paramsMock = undefined; // default: no trackingId
    // keep baseFormData neutral
    (baseFormData as any).trackingStatus = '';
  });

  test('mount without trackingId → calls reset and shows header + default tab content', () => {
    render(<StartOnboarding />);

    // reset is called when no trackingId
    expect(resetFormDataMock).toHaveBeenCalled();

    // simple header assert (stable)
    expect(screen.getByText(/GCP Onboarding Form/i)).toBeInTheDocument();

    // default tab content (stubbed)
    expect(screen.getByTestId('app-details')).toBeInTheDocument();
  });

  test('mount with trackingId → performs GET for intake form', async () => {
    paramsMock = { trackingId: '123' };
    makeRequest.mockResolvedValueOnce({ data: { foo: 'bar' }, status: 200 });

    render(<StartOnboarding />);

    await waitFor(() => expect(makeRequest).toHaveBeenCalled());
    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({
        method: 'GET',
        // your code builds: `/api/intake-form?intakeFormTrackingId=${id}`
        endpoints: expect.stringMatching(/\/api\/intake-form\?intakeFormTrackingId=123/i),
        responseType: 'json',
      }),
    );
  });

  test('Save → POST /api/intake-form then navigates to /gcpOnboarding/:id', async () => {
    // saveFormData expects the save endpoint, not submit
    makeRequest.mockResolvedValueOnce({ data: { intakeFormTrackingId: 987 }, status: 200 });

    render(<StartOnboarding />);

    fireEvent.click(screen.getByRole('button', { name: /Save/i }));

    await waitFor(() => expect(makeRequest).toHaveBeenCalled());
    expect(makeRequest).toHaveBeenCalledWith(
      expect.objectContaining({
        method: 'POST',
        endpoints: '/api/intake-form',
        responseType: 'json',
        body: expect.any(Object),
      }),
    );
    expect(navigateMock).toHaveBeenCalledWith('/gcpOnboarding/987');
  });

  test('Submit non-200 → shows an error alert (confirm dialog not shown)', async () => {
    // formSubmit checks response.status !== 200 → error toast
    makeRequest.mockResolvedValueOnce({ status: 500, data: {} });

    render(<StartOnboarding />);

    fireEvent.click(screen.getByRole('button', { name: /Submit/i }));

    // MUI Alert renders with role="alert"
    const alert = await screen.findByRole('alert');
    expect(alert).toBeInTheDocument();

    // confirm dialog button should NOT be in the DOM on error path
    expect(screen.queryByTestId('dlg-submit-confirm')).not.toBeInTheDocument();
  });

  test('buttons disabled when trackingStatus is "Completed"', () => {
    (baseFormData as any).trackingStatus = 'Completed';
    render(<StartOnboarding />);

    expect(screen.getByRole('button', { name: /Save/i })).toBeDisabled();
    expect(screen.getByRole('button', { name: /Submit/i })).toBeDisabled();
  });

  test('tabs switch content (stubs)', () => {
    render(<StartOnboarding />);

    // Application tab is default
    expect(screen.getByTestId('app-details')).toBeInTheDocument();

    // switch to Component Details
    fireEvent.click(screen.getByRole('button', { name: /Component Details/i }));
    expect(screen.getByTestId('components-details')).toBeInTheDocument();

    // switch to Guide Lines
    fireEvent.click(screen.getByRole('button', { name: /Guide Lines/i }));
    expect(screen.getByTestId('guidelines')).toBeInTheDocument();
  });

  test('Cancel confirm without trackingId → resets to initialFormData', () => {
    // No trackingId → else branch in handleConfirmCancel → setFormData(initialFormData)
    render(<StartOnboarding />);

    // clicking the "Cancel" button opens dialog; our stub always renders the confirm control
    fireEvent.click(screen.getByRole('button', { name: /Cancel/i }));
    fireEvent.click(screen.getByTestId('dlg-cancel-confirm'));

    expect(setFormDataMock).toHaveBeenCalledWith(baseFormData);
  });
});
