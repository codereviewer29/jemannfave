// src/provision/Provision-logs.test.tsx
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import ProvisionLogs from './Provision-logs';

// Mock the child exactly as imported by the component
jest.mock('./provision-logs-template', () => ({
  __esModule: true,
  default: ({ logType }: { logType: string }) => (
    <div data-testid="logs-template">{logType}</div>
  ),
}));

// Derive the *exact* type used for the logs object from the component’s props.
// NB: the component prop is misspelled as "provisoningLogs".
type ProvisioningLogsProps = React.ComponentProps<typeof ProvisionLogs>['provisoningLogs'];

// Helper to produce a clearly non-empty logs object
function makeLogs(
  overall: 'success' | 'failure' = 'success'
): ProvisioningLogsProps {
  return {
    overall_status: overall,
    validation_results: {
      gcpapp_validation: { status: 'ok', details: [] },
      gcpdm_validation: { status: 'ok', details: [] },
      github_repos_validation: { status: 'ok', details: [] },
      secondary_ranges_validation: { status: 'ok', details: [] },
      workspace_validation: { status: 'ok', details: [] },
    },
  } as unknown as ProvisioningLogsProps;
}

// Small helper to render with a given logs object, using the misspelled prop
function renderWithLogs(logs: ProvisioningLogsProps | undefined) {
  // cast to any so we can pass the misspelled prop name without TS grief
  return render(
    <ProvisionLogs {...({ provisoningLogs: logs } as any)} />
  );
}

describe('ProvisionLogs', () => {
  test('renders empty state when no logs', () => {
    // explicitly pass undefined to hit the early-return branch
    renderWithLogs(undefined);

    expect(
      screen.getByText(/no provisioning logs available/i)
    ).toBeInTheDocument();

    // child template is not rendered
    expect(screen.queryByTestId('logs-template')).not.toBeInTheDocument();
  });

  test('shows overall status "Success" in green by default (APP tab active)', () => {
    renderWithLogs(makeLogs('success'));

    // label is present (Typography heading contains the phrase)
    expect(screen.getByText(/overall status/i)).toBeInTheDocument();

    // the status value text is “Success” (component capitalizes first letter)
    const statusValue = screen.getByText(/success/i);
    expect(statusValue).toBeInTheDocument();

    // sx inline style sets color to green when success
    expect(statusValue).toHaveStyle({ color: 'green' });

    // APP tab is initially active, so the child template shows APP label
    expect(screen.getByTestId('logs-template')).toHaveTextContent(
      /gcp app validation logs/i
    );
  });

  test('switches to CDM tab and renders CDM template', () => {
    renderWithLogs(makeLogs('success'));

    // Click the CDM tab button by its accessible name
    fireEvent.click(
      screen.getByRole('button', { name: /gcp cdm validation logs/i })
    );

    // The mocked template now shows the CDM label
    expect(screen.getByTestId('logs-template')).toHaveTextContent(
      /gcp cdm validation logs/i
    );
  });

  test('shows overall status "Failure" in red when overall_status=failure', () => {
    renderWithLogs(makeLogs('failure'));

    const statusValue = screen.getByText(/failure/i);
    expect(statusValue).toBeInTheDocument();
    expect(statusValue).toHaveStyle({ color: 'red' });
  });
});
