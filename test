// src/utils/dataParsing.test.ts
import { dataParsing } from './dataParsing';

describe('dataParsing', () => {
  beforeEach(() => {
    // console spies are installed in setupTests.ts; clear between tests
    (console.error as jest.Mock).mockClear();
    (console.log as jest.Mock).mockClear?.();
  });

  test('returns same array when input is already an array', () => {
    const input = [1, 2, 3];
    const result = dataParsing(input);
    expect(result).toBe(input); // same reference
    expect(console.error).not.toHaveBeenCalled();
  });

  test('wraps a plain object in an array', () => {
    const input = { a: 1 };
    const result = dataParsing(input);
    expect(result).toEqual([input]);
    expect(console.error).not.toHaveBeenCalled();
  });

  test('parses a JSON string representing an array', () => {
    const input = JSON.stringify([{ a: 1 }, { b: 2 }]);
    const result = dataParsing(input);
    expect(result).toEqual([{ a: 1 }, { b: 2 }]);
    expect(console.error).not.toHaveBeenCalled();
  });

  test('parses a JSON string representing an object and wraps it in an array', () => {
    const input = JSON.stringify({ a: 1 });
    const result = dataParsing(input);
    expect(result).toEqual([{ a: 1 }]);
    expect(console.error).not.toHaveBeenCalled();
  });

  test('returns empty array for JSON that is not object/array (e.g., string/number/bool)', () => {
    expect(dataParsing(JSON.stringify('text'))).toEqual([]);
    expect(dataParsing(JSON.stringify(123))).toEqual([]);
    expect(dataParsing(JSON.stringify(true))).toEqual([]);
    expect(console.error).not.toHaveBeenCalled();
  });

  test('returns empty array and logs for unsupported non-string, non-object, non-array inputs', () => {
    const result = dataParsing(42 as unknown);
    expect(result).toEqual([]);
    expect(console.error).toHaveBeenCalledWith('Unsupported data type:', 42);
  });

  test('returns empty array and logs when JSON.parse throws for invalid JSON string', () => {
    const result = dataParsing('{ invalid json }');
    expect(result).toEqual([]);
    // first arg message should start with "Error parsing data:"
    const [firstCallMsg] = (console.error as jest.Mock).mock.calls[0] || [];
    expect(String(firstCallMsg)).toContain('Error parsing data');
  });

  test('returns empty array and logs for null/undefined inputs', () => {
    expect(dataParsing(null as unknown)).toEqual([]);
    expect(dataParsing(undefined as unknown)).toEqual([]);
    // At least one Unsupported call should be recorded across the two invocations
    expect((console.error as jest.Mock).mock.calls.some(c => String(c[0]).includes('Unsupported'))).toBe(true);
  });
});
