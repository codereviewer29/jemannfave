// src/__tests__/apiClient.test.ts
/**
 * Tests for apiClient.ts
 * - Ensures correct axios method/args per HttpRequestModel.method
 * - Propagates axios errors
 */

import axios from 'axios';
import apiClient from '../apiClient';
import type { HttpRequestModel } from '../model/httpRequestModel';

// Note: apiClient only uses axios.get/post/put; mocking those is enough.
jest.mock('axios');
const mockedAxios = axios as jest.Mocked<typeof axios>;

const makeReq = (
  method: HttpRequestModel['method'],
  endpoints = 'https://api.test.local/path',
  body?: unknown,
): HttpRequestModel =>
  ({
    method,
    endpoints,
    body,
  } as HttpRequestModel);

describe('apiClient', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('issues GET with url and returns response', async () => {
    mockedAxios.get.mockResolvedValueOnce({ data: 'GET_OK' });

    const out = await apiClient(makeReq('GET'));

    expect(out).toEqual({ data: 'GET_OK' });
    expect(mockedAxios.get).toHaveBeenCalledTimes(1);
    expect(mockedAxios.get).toHaveBeenCalledWith('https://api.test.local/path');
  });

  it('issues POST with url + body and returns response', async () => {
    const body = { a: 1 };
    mockedAxios.post.mockResolvedValueOnce({ data: 'POST_OK' });

    const out = await apiClient(makeReq('POST', 'https://api/p', body));

    expect(out).toEqual({ data: 'POST_OK' });
    expect(mockedAxios.post).toHaveBeenCalledTimes(1);
    expect(mockedAxios.post).toHaveBeenCalledWith('https://api/p', body);
  });

  it('issues PUT with url + body and returns response', async () => {
    const body = { b: 2 };
    mockedAxios.put.mockResolvedValueOnce({ data: 'PUT_OK' });

    const out = await apiClient(makeReq('PUT', 'https://api/u', body));

    expect(out).toEqual({ data: 'PUT_OK' });
    expect(mockedAxios.put).toHaveBeenCalledTimes(1);
    expect(mockedAxios.put).toHaveBeenCalledWith('https://api/u', body);
  });

  it('propagates axios errors', async () => {
    const err = new Error('network boom');
    mockedAxios.post.mockRejectedValueOnce(err);

    await expect(
      apiClient(makeReq('POST', 'https://api/p', { x: 1 })),
    ).rejects.toThrow('network boom');

    expect(mockedAxios.post).toHaveBeenCalledWith('https://api/p', { x: 1 });
  });
});
