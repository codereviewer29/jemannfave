// src/App.test.tsx
import { render } from '@testing-library/react';
import React from 'react';

// Capture the Template props (so we can read config)
const mockTemplate = jest.fn();

// Mock the WF library (Template shell + helpers)
jest.mock('@wf/react-library', () => ({
  __esModule: true,
  isNotEmpty: (v: unknown) =>
    v !== null && v !== undefined && (typeof v !== 'string' || v.trim().length > 0),
  useConfig: () => ({
    env: {
      OAUTH_CLIENT_ID: 'mock-client-id',
      PING_OAUTHLOGOUTURL: 'https://logout.example/',
      PING_OAUTHURL: 'https://oauth.example/',
      POP_AD_GROUP_ACCESS: 'POP_AD_GROUP_ACCESS',
      DTCA_EDIT_OPERATIONAL_PORTAL_USERS_P: 'DTCA_EDIT_OPERATIONAL_PORTAL_USERS_P',
    },
  }),
  Template: (props: any) => {
    // why: capture the config passed by App without rendering the real shell
    mockTemplate(props);
    return <div data-testid="template" />;
  },
}));

// Default appConfiguration mock; individual tests will replace via jest.doMock
jest.mock('./app/config/appConfiguration.json', () => ({
  buildName: 'RELEASE :1.2.3',
}));

// --- Route component stubs (keep them featherweight) ---
jest.mock('./sideNavbar/boarding/applicationDetails', () => () => <div />);
jest.mock('./sideNavbar/boarding/actDetails', () => () => <div />);
jest.mock('./sideNavbar/boarding/componentsDetails', () => () => <div />);
jest.mock('./sideNavbar/inbox', () => () => <div />);
jest.mock('./sideNavbar/boarding/startOnboarding', () => () => <div />);
jest.mock('./provision/provision-details', () => () => <div />);
jest.mock('./provision/provision-list', () => () => <div />);
jest.mock('./home/Home', () => () => <div />);
jest.mock('./gcp.gath/gcpProjects', () => () => <div />);
jest.mock('./buildInventory/inventory/Inventory', () => () => <div />);
jest.mock('./buildInventory/inventory-dashboard/inventory-dashboard', () => () => <div />);

// --- Providers (return children directly) ---
jest.mock('./provision/ProvisionContext', () => ({
  ProvisionProvider: ({ children }: { children: React.ReactNode }) => <>{children}</>,
}));

// Handle both possible paths/cases for the form context
jest.mock('./formContext', () => ({
  FormProvider: ({ children }: { children: React.ReactNode }) => <>{children}</>,
}));
jest.mock('./sideNavbar/boarding/FormContext', () => ({
  FormProvider: ({ children }: { children: React.ReactNode }) => <>{children}</>,
}));

// --- Router bits used by App ---
jest.mock('react-router-dom', () => ({
  __esModule: true,
  Navigate: ({ to }: { to: string }) => <div data-testid="navigate" data-to={to} />,
  useLocation: () => ({ pathname: '/' }),
}));

/**
 * Render App in an isolated module context (so jest.doMock for appConfiguration applies).
 * We intentionally avoid jest.resetModules() here to retain our top-level mocks above.
 */
function renderFreshAppAndGetConfig() {
  let config: any;
  jest.isolateModules(() => {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const FreshApp = require('./App').default;
    render(<FreshApp />);
    config = mockTemplate.mock.calls[0][0].config;
  });
  return config as Record<string, any>;
}

describe('App → passes correct Template config', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('full config with parsed footer version from buildName', () => {
    // ensure baseline buildName
    jest.doMock('./app/config/appConfiguration.json', () => ({
      buildName: 'RELEASE :1.2.3',
    }));

    const config = renderFreshAppAndGetConfig();

    // app
    expect(config.app).toEqual({
      appName: 'Google Cloud Platform',
      componentName: 'apmf-Google Cloud Platform',
      description: '',
      version: '1.0.0',
      acin: 'APMF-ARIOBF',
      achm: 'ARIOBF',
    });

    // theme/header/footer
    expect(config.theme).toBe('consumer');
    expect(config.header).toEqual({ appName: 'Google Cloud Platform' });
    expect(config.footer).toEqual({ version: '1.2.3' });

    // routes (names + paths; element is a React node)
    expect(config.routes).toEqual([
      { name: '', path: '/', element: expect.any(Object) }, // Navigate → /home
      { name: 'home', path: '/home', element: expect.any(Object) },

      { name: 'applicationDetails', path: '/applicationDetails', element: expect.any(Object) },
      { name: 'actDetails', path: '/actDetails', element: expect.any(Object) },
      { name: 'componentsDetails', path: '/componentsDetails', element: expect.any(Object) },

      { name: 'inbox', path: '/inbox', element: expect.any(Object) },
      { name: 'gcpOnboarding', path: '/gcpOnboarding', element: expect.any(Object) },
      { name: 'gcpOnboardingTrackingId', path: '/gcpOnboarding/trackingId', element: expect.any(Object) },

      { name: 'Provision Details', path: '/provisions/:appId/environment', element: expect.any(Object) },
      { name: 'Provision List', path: '/provision', element: expect.any(Object) },

      { name: 'GCP Projects', path: '/gcpProjects', element: expect.any(Object) },

      { name: 'inventory', path: '/inventory', element: expect.any(Object) },
      { name: 'Inventory Dashboard', path: '/inventory-dashboard', element: expect.any(Object) },
    ]);

    // feature flags
    expect(config.featureFlags).toEqual({
      enabled: false,
      apiKey: '',
      userTargeting: false,
      defaultTargetId: 'orchestrareact',
      defaultTargetName: 'Google Cloud Platform',
    });
  });

  test('uses default footer version when buildName is empty/whitespace', () => {
    jest.doMock('./app/config/appConfiguration.json', () => ({ buildName: '   ' }));
    const config = renderFreshAppAndGetConfig();
    expect(config.footer.version).toBe('1.0.0');
  });

  test('parses footer version when buildName is "RELEASE :2.3.4"', () => {
    jest.doMock('./app/config/appConfiguration.json', () => ({ buildName: 'RELEASE :2.3.4' }));
    const config = renderFreshAppAndGetConfig();
    expect(config.footer.version).toBe('2.3.4');
  });
});
