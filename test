// ====================================================================
// File: src/provision/__tests__/gcp-infra-setup.test.tsx
// ====================================================================
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import GCPInfraSetup from '../gcp-infra-setup';

// ---- Lightweight MUI mocks (DOM-first) ----
jest.mock('@mui/material', () => {
  const React = require('react');

  const Box = ({ children, ...rest }: any) => <div {...rest}>{children}</div>;
  const Grid = ({ children, ...rest }: any) => <div {...rest}>{children}</div>;
  const Typography = ({ children }: any) => <div>{children}</div>;
  const Link = ({ children, ...p }: any) => <a {...p}>{children}</a>;
  const Tooltip = ({ children }: any) => <>{children}</>;
  const CircularProgress = () => <div aria-label="loading" />;
  const Alert = ({ children, ...p }: any) => (
    <div role="alert" {...p}>
      {children}
    </div>
  );
  const Snackbar = ({ open, children }: any) => (open ? <div>{children}</div> : null);

  const IconButton = ({ children, onClick, ...rest }: any) => (
    <button type="button" onClick={onClick} {...rest}>
      {children}
    </button>
  );
  const InputAdornment = ({ children }: any) => <span>{children}</span>;

  // Why: expose helper when `error` true; keep label/value/required wiring.
  const TextField = ({
    label,
    name,
    value,
    onChange,
    type = 'text',
    required,
    disabled,
    error,
    helperText,
    InputProps,
  }: any) => (
    <label>
      {label}
      <input
        aria-label={label}
        name={name}
        value={value ?? ''}
        onChange={onChange}
        type={type}
        required={required}
        disabled={disabled}
      />
      {InputProps?.endAdornment}
      {error ? <div data-testid={`${name}-helper`}>{helperText}</div> : null}
    </label>
  );

  const FormControl = ({ children }: any) => <div>{children}</div>;
  const InputLabel = ({ children, id }: any) => <label id={id}>{children}</label>;
  const MenuItem = ({ value, children }: any) => <option value={value}>{children}</option>;
  const Select = ({ labelId, label, name, value, onChange, children, required }: any) => (
    <label>
      {label}
      <select
        aria-labelledby={labelId}
        aria-label={label}
        name={name}
        value={value ?? ''}
        onChange={onChange}
        required={required}
      >
        {children}
      </select>
    </label>
  );

  const Button = ({ children, onClick, ...rest }: any) => (
    <button type="button" onClick={onClick} {...rest}>
      {children}
    </button>
  );

  return {
    __esModule: true,
    Alert,
    Box,
    Button,
    CircularProgress,
    Grid,
    IconButton,
    InputAdornment,
    InputLabel,
    Link,
    MenuItem,
    Select,
    Snackbar,
    TextField,
    Tooltip,
    Typography,
    FormControl,
  };
});

// ---- Icons stub ----
jest.mock('@mui/icons-material', () => {
  const I = ({ 'data-testid': id, ...p }: any) => <span data-testid={id || 'icon'} {...p} />;
  return { __esModule: true, InfoOutlined: I, Visibility: I, VisibilityOff: I, InfoOutlinedIcon: I };
});

// ---- API & Context ----
const makeRequest = jest.fn();

jest.mock('../../services/useApiService', () => ({
  __esModule: true,
  default: () => ({ makeRequest }),
}));

jest.mock('../ProvisionContext', () => ({
  __esModule: true,
  useProvisionContext: () => ({
    provisioningData: { github_token: 'gh-token', terraform_token: 'tf-token' },
  }),
}));

// ---- Helpers / fixtures ----
const GET_ENV = {
  data: {
    env_params: {
      vault_password: '',
      serviceonwrsupportgroup: 'svc-group',
      requesteremail: 'user@example.com',
      app_repo_name: '', // derived in component as 'corp-' + appId
      app_branch_name: 'sandbox',
      app_project_id: 'prj-123',
      app_notification_channel: 'chan',
      saferoom_repo_name: '',
      saferoom_branch_name: 'sandbox',
      saferoom_project_id: 'sprj-1',
      saferoom_notification_channel: 'schan',
    },
  },
};

function renderSut(props?: Partial<React.ComponentProps<typeof GCPInfraSetup>>) {
  const defaultProps = {
    appId: 'APPID',
    environment: 'Sandbox', // Why: options render only for 'Sandbox'
    completedTabs: [] as number[],
    setCompletedTabs: jest.fn(),
    tabIndex: 2,
  };
  return {
    ...render(<GCPInfraSetup {...defaultProps} {...props} />),
    setCompletedTabs:
      (props?.setCompletedTabs as jest.Mock) || (defaultProps.setCompletedTabs as jest.Mock),
  };
}

// ====================================================================
// Tests
// ====================================================================
describe('GCPInfraSetup', () => {
  beforeEach(() => jest.clearAllMocks());

  test('GET on mount populates fields and marks tab completed', async () => {
    makeRequest.mockResolvedValueOnce(GET_ENV);

    const { setCompletedTabs } = renderSut();

    expect(await screen.findByLabelText(/Repo Name/i)).toHaveValue('corp-appid');
    expect(screen.getByLabelText(/Project ID/i)).toHaveValue('prj-123');
    expect(screen.getByLabelText(/Email Address/i)).toHaveValue('user@example.com');

    await waitFor(() => expect(setCompletedTabs).toHaveBeenCalled());
  });

  test('invalid password shows helper only after submit; then valid clears; toggle works', async () => {
    makeRequest.mockResolvedValueOnce(GET_ENV);
    renderSut();

    const pwd = await screen.findByLabelText(/Vault Password/i);

    // Submit with invalid password → helper appears via handleError()
    fireEvent.change(pwd, { target: { value: 'short' } });
    fireEvent.click(screen.getByRole('button', { name: /Build GCP Infrastructure/i }));
    expect(await screen.findByTestId('vault_password-helper')).toHaveTextContent(/Password must have 8/i);

    // Enter valid password → helper disappears
    fireEvent.change(pwd, { target: { value: 'abcde123' } });
    await waitFor(() => expect(screen.queryByTestId('vault_password-helper')).toBeNull());

    // Toggle visibility
    fireEvent.click(screen.getByRole('button', { name: /toggle password visibility/i }));
    expect(screen.getByLabelText(/Vault Password/i)).toBeInTheDocument();
  });

  test('branch select renders Sandbox options and accepts change', async () => {
    makeRequest.mockResolvedValueOnce(GET_ENV);
    renderSut({ environment: 'Sandbox' });

    const select = await screen.findByLabelText(/Branch Name/i);
    expect(select).toHaveValue('sandbox');
    fireEvent.change(select, { target: { value: 'sandboxdev' } });
    expect(select).toHaveValue('sandboxdev');
  });

  test('POST success shows logs and sets tab completed', async () => {
    makeRequest.mockResolvedValueOnce(GET_ENV); // GET
    makeRequest.mockResolvedValueOnce({
      status: 200,
      data: { log_output: ['success: created bucket', 'failed: skipped rule'] },
    }); // POST

    const { setCompletedTabs } = renderSut();

    // Provide valid password to pass handleError
    const pwd = await screen.findByLabelText(/Vault Password/i);
    fireEvent.change(pwd, { target: { value: 'valid123' } });

    fireEvent.click(screen.getByRole('button', { name: /Build GCP Infrastructure/i }));

    expect(await screen.findByText(/created bucket/i)).toBeInTheDocument();
    expect(screen.getByText(/skipped rule/i)).toBeInTheDocument();
    expect(screen.getByText(/Once GCP Infrastructure Setup is completed/i)).toBeInTheDocument();

    await waitFor(() => expect(setCompletedTabs).toHaveBeenCalled());
  });

  test('POST non-200 shows snackbar error', async () => {
    makeRequest.mockResolvedValueOnce(GET_ENV); // GET
    makeRequest.mockResolvedValueOnce({ status: 500, data: { log_output: [] } }); // POST

    renderSut();

    // Provide valid password so submit actually fires POST
    fireEvent.change(await screen.findByLabelText(/Vault Password/i), {
      target: { value: 'valid123' },
    });
    fireEvent.click(screen.getByRole('button', { name: /Build GCP Infrastructure/i }));

    expect(await screen.findByRole('alert')).toBeInTheDocument();
  });
});
