// src/sideNavbar/boarding/applicationDetails.test.tsx
import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import ApplicationDetails from './applicationDetails';

// ---------- Mock FormContext (runtime require to avoid TS complaints) ----------
jest.mock('./FormContext', () => {
  const React = require('react');
  const Ctx = React.createContext<any>(null);
  return {
    __esModule: true,
    // hook the component imports
    useFormContext: () => React.useContext(Ctx),
    // provider we'll use in tests
    TestFormProvider: ({ value, children }: any) => (
      <Ctx.Provider value={value}>{children}</Ctx.Provider>
    ),
  };
});
// pull mocked export at runtime, not via static import
// eslint-disable-next-line @typescript-eslint/no-var-requires
const { TestFormProvider } = require('./FormContext');

// ---------- Minimal, robust mocks for MUI X date pickers ----------
jest.mock('@mui/x-date-pickers/AdapterDayjs', () => ({
  __esModule: true,
  default: function AdapterDayjs() {
    return null;
  },
}));
jest.mock('@mui/x-date-pickers/LocalizationProvider', () => ({
  __esModule: true,
  default: ({ children }: any) => <div>{children}</div>,
}));
jest.mock('@mui/x-date-pickers/DatePicker', () => ({
  __esModule: true,
  default: ({ label, onChange }: { label: string; onChange: (d: any) => void }) => (
    <input aria-label={label} onChange={(e) => onChange?.((e as any).target.value)} />
  ),
}));

// ---------- Router bits used in the component (links only) ----------
jest.mock('react-router-dom', () => ({
  __esModule: true,
  Link: (props: any) => <a {...props} />,
}));

// ---------- Icons (avoid heavy SVG) ----------
jest.mock('@mui/icons-material/ExpandMore', () => ({ __esModule: true, default: () => <span /> }));
jest.mock('@mui/icons-material/Search', () => ({ __esModule: true, default: () => <span /> }));
jest.mock('@mui/icons-material/AddCircle', () => ({ __esModule: true, default: () => <span /> }));
jest.mock('@mui/icons-material/RemoveCircle', () => ({ __esModule: true, default: () => <span /> }));
jest.mock('@mui/icons-material/ErrorOutline', () => ({ __esModule: true, default: () => <span /> }));

// ---------- API service (no network) ----------
jest.mock('../../services/useApiService', () => ({
  __esModule: true,
  default: () => ({
    makeRequest: jest.fn().mockResolvedValue({
      data: { environments: ['DEV1', 'SIT'], applicationID: 'APP-123' },
    }),
  }),
}));

// ---------- Helpers ----------
function makeBaseFormData() {
  // include every field that the component reads to keep inputs controlled
  return {
    applicationDetails: {
      applicationID: '',
      applicationName: '',
      summary: '',
      description: '',
      purposeAndBenefit: '',
      lobDomain: '',
      environmentsNeeded: [] as string[],
      requesterName: '',
      requesterEmail: '',
      businessExecutiveSponsor: '',
      applicationBusinessOwner: '',
      applicationPortfolioOwner: '',
      techExecutiveSponsor: '',
      primaryTechManager: '',
      cloudAccountableExecutive: '',
      applicationArchitect: '',
      auNumber: '',
      techContact: '',
      serviceNowSupportGroup: '',
      developersList: '',
      applicationOwnerApprover: '',
      timelineSandbox: null as any,
      timelineNonProd: null as any,
      timelineProd: null as any,
      isNewApp: '',
      appLocation: '',
      appLinkInBAM: '',
      beamsStatus: '',
      dataSource: 'External',
      dataFormat: [] as string[],
      dataSLATime: '',
      dataClassification: '',
      panCardDataInScope: '',
      panCardDetails: '',
      sarUarData: '',
      internationalUsers: '',
      internationalUsersDetails: '',
      externalIngress: '',
      externalIngressDetails: '',
      serviceNowCI: '',
      technicalConstraints: '',
      reviewedWithCIO: '',
      reviewedWithArchitect: '',
      requiresCloudReview: '',
      artRequestDetails: {}, // map<string, {label, value, isCustom, helperText}[]>
      historicalDataSize: 0,
      appIdInBAM: '',
      timelineProdReq: '', // helper only
    },
    actDetails: {
      requesterName: '',
      requesterEmail: '',
    },
  };
}

type RenderOpts = {
  validation?: Record<string, any>;
  setFormDataSpy?: jest.Mock;
};

function renderWithProvider(opts: RenderOpts = {}) {
  const user = userEvent.setup();
  const formData = makeBaseFormData();
  const setFormData = opts.setFormDataSpy ?? jest.fn();
  const value = { formData, setFormData };

  // component takes validationErrors + setValidationErrors
  const Wrapper: React.FC = ({ children }) => (
    <TestFormProvider value={value}>{children}</TestFormProvider>
  );

  const validationErrors = opts.validation ?? { applicationDetails: {} };
  const setValidationErrors = jest.fn();

  render(
    <Wrapper>
      <ApplicationDetails
        validationErrors={validationErrors}
        setValidationErrors={setValidationErrors}
      />
    </Wrapper>
  );

  return { user, formData, setFormData, setValidationErrors };
}

// ---------- Tests ----------
describe('ApplicationDetails', () => {
  test('renders Overview section and key fields', () => {
    renderWithProvider();

    // one stable thing we know is present from the screenshots: the "Application ID" field
    expect(screen.getByLabelText(/application id/i)).toBeInTheDocument();
    // a couple of other labels that exist early in the form
    expect(screen.getByLabelText(/application name/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/summary/i)).toBeInTheDocument();
  });

  test('typing invalid requester email sets validation message', async () => {
    const { user } = renderWithProvider({
      validation: { applicationDetails: {} },
    });

    const email = screen.getByLabelText(/requester email/i);
    await user.clear(email);
    await user.type(email, 'not-an-email');

    // Helper text shows "Invalid email format" when regex fails
    expect(await screen.findByText(/invalid email format/i)).toBeInTheDocument();
  });

  test('typing Application ID updates formData via setFormData', async () => {
    const setFormDataSpy = jest.fn();
    const { user } = renderWithProvider({ setFormDataSpy });

    const appId = screen.getByLabelText(/application id/i);
    await user.clear(appId);
    await user.type(appId, 'APP-42');

    // Expect last call merged applicationDetails.applicationID = 'APP-42'
    const lastCall = setFormDataSpy.mock.calls.pop();
    expect(lastCall).toBeTruthy();

    const updater = lastCall![0];
    const prev = { formData: makeBaseFormData() } as any;
    const next = typeof updater === 'function' ? updater(prev.formData) : updater;

    expect(next.applicationDetails.applicationID).toBe('APP-42');
  });
});
